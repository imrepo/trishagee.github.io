<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Presentations on Trisha Gee </title>
    <link>https://trishagee.github.io/presentation/index.xml/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Mon, 26 Feb 2018 00:00:00 UTC</updated>
    
    <item>
      <title>Upcoming Events</title>
      <link>https://trishagee.github.io/presentation/upcoming_events/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/upcoming_events/</guid>
      <description>&lt;p&gt;While the list in the &lt;a href=&#34;/presentation/public_appearances/&#34;&gt;talks section&lt;/a&gt; of my blog covers past presentations,
this page should list my confirmed upcoming events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;27 Feb&lt;/strong&gt;: SVQJUG - &lt;a href=&#34;https://www.meetup.com/SVQJUG/events/247799741/&#34;&gt;Is boilerplate code really so bad?&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;7 Mar&lt;/strong&gt;: QCon London - &lt;a href=&#34;https://qconlondon.com/london2018/presentation/boilerplate-code-really-so-bad&#34;&gt;Is boilerplate code really so bad?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is boilerplate code really so bad?</title>
      <link>https://trishagee.github.io/presentation/boilerplate/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/boilerplate/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s exhausting staying up to date with the evolution of Java and the myriad other JVM languages.  Is it worth it? What
do modern languages give us?&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Many JVM languages promote &amp;ldquo;less boilerplate code&amp;rdquo; as one of their selling points. Even updates to Java in recent years
 have removed unnecessary syntax. While this is clearly meant to be a Good Thing, many of us - particularly if we&amp;rsquo;ve been writing Java for a long time - think &amp;ldquo;so what?&amp;rdquo;. Our IDEs can generate code, and our brains get used to ignoring the stuff that doesn&amp;rsquo;t matter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is the removal of extraneous code from the syntax of a language necessary, or just a gimmick? How does it impact our
ability to write and read code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this talk, Trisha will explore common coding scenarios using Java and Kotlin. We&amp;rsquo;ll see what a language designed for
 developer productivity looks like: what&amp;rsquo;s important for developers to write (and, more importantly, read) and what can
 be removed. We&amp;rsquo;ll also see how Java has evolved to improve our productivity as producers and consumers of code, and why staying up to date with the features of a language like Java can ultimately make your life easier.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Slides&lt;/h2&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;The code examples from this talk are shamelessly reused from Hadi Hariri&amp;rsquo;s London Software Craftsmanship
Conference talk, &lt;a href=&#34;https://youtu.be/pAFiPjXEOtg&#34;&gt;The Importance of Syntax In Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The code &lt;a href=&#34;https://github.com/trishagee/boilerplate&#34;&gt;lives here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Resources&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Version information&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/SVQJUG/events/247799741/&#34;&gt;JUG&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Java: OpenJDK Runtime Environment 18.3 (build 10+44)&lt;/li&gt;
&lt;li&gt;Kotlin: 1.2.21&lt;/li&gt;
&lt;li&gt;IntelliJ: IntelliJ IDEA 2018.1 EAP (Ultimate Edition) Build #IU-181.3870.7&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Java&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/10/&#34;&gt;JDK 10 early access releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk/10/&#34;&gt;Java 10 Open JDK page&lt;/a&gt; (tracks which features are currently going into
Java 10)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk/11/&#34;&gt;Java 11 Open JDK page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/286&#34;&gt;JEP 286: Local-variable type inference&lt;/a&gt; (Java 10)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/302&#34;&gt;JEP 302: Lambda Leftovers (including underscore for param)&lt;/a&gt; (Java ??)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/305&#34;&gt;JEP 305: Pattern Matching&lt;/a&gt; (Java ??)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/325&#34;&gt;JEP 325: Switch expressions&lt;/a&gt; (Java ??)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cr.openjdk.java.net/~briangoetz/amber/datum.html&#34;&gt;Data Classes for Java&lt;/a&gt; and &lt;a href=&#34;https://www.infoq.com/news/2018/02/data-classes-for-java&#34;&gt;Brian Goetz on Data Classes
for Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Kotlin&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Data Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;Lambdas and higher order functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/properties.html&#34;&gt;Properties&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/equality.html&#34;&gt;Equality (== vs ===)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Real World Java 9</title>
      <link>https://trishagee.github.io/presentation/real_world_java_9/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/real_world_java_9/</guid>
      <description>

&lt;p&gt;How is Java 9 going to change the way developers work?&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The feature we always hear about whenever Java 9 is in the news is Jigsaw, modularity.  But this doesn&amp;rsquo;t scratch the same developer itch that Java 8&amp;rsquo;s lambdas and streams did, and we&amp;rsquo;re left with a vague sensation that the next version might not be that interesting.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Java 9 actually has a lot of great additions and changes to make development a bit nicer.  These features can&amp;rsquo;t be lumped under an umbrella term like Java 8&amp;rsquo;s lambdas and streams, the changes are scattered throughout the APIs and language features that we regularly use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this presentation Trisha will show, via live coding:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What the Java Platform Module System is and how to make your code modular&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The improvements to the Streams API that make it easier to control infinite streams&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How the Collections convenience methods simplify code&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Along the way we&amp;rsquo;ll bump into other Java 9 features, including some of the additions to interfaces and Optional, and a number of other small changes that make coding in Java a bit nicer than it was before.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;These are all the available videos, with the most recent at the top.  Usually, the more recent the talk the more polished, therefore usually they&amp;rsquo;re better.  With this talk, it&amp;rsquo;s more a case of showcasing / focusing on different aspects in different versions.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QqmQ_0tV978&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This JetBrains webinar is the most up-to-date version of the talk, and includes more Java 9 features than any of the
others, including a quick look at JShell. It has almost no content on Reactive Streams though, so check out one of
the other videos if this is what you&amp;rsquo;re interested in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/QAssmRMXMXo&#34;&gt;vJUG, September 2017&lt;/a&gt;.  Lucky to have 90 minutes to cover the material.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/watS54iWH9U&#34;&gt;GOTO Amsterdam&lt;/a&gt;. Less reactive streams, less Jigsaw, marginally more time for the &amp;ldquo;other&amp;rdquo; Java 9 features.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/wZLDDx-5KJg&#34;&gt;J on the Beach, Malaga&lt;/a&gt;. Pretty much the same as the DevoxxUK version.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/GkP83hvdeMk&#34;&gt;DevoxxUK&lt;/a&gt;. More focus on Jigsaw / Java Modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/java9-flow-stream-api&#34;&gt;QCon London&lt;/a&gt;. Much more focus on Reactive Streams: what they are, how they work, and how to migrate an app to use the Reactive Streams API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/5WKfdU7WjMOQkd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;These are the latest slides.  For earlier versions, see &lt;a href=&#34;https://www.slideshare.net/trishagee/&#34;&gt;Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;The code for this presentation was originally created to demonstrate Java 8 code in
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 in Anger&lt;/a&gt;, take a look at the videos there to see more background on the application and how it used Java 8 Streams and Lambda Expressions for the core business logic. The code and the presentation
evolved &lt;a href=&#34;https://youtu.be/sKozumGWAOo&#34;&gt;to include some Java 9 features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have another Java 9 talk based off this code, &lt;a href=&#34;/presentation/java_9_are_we_there_yet&#34;&gt;Anticipating Java 9 - Functionality and Tooling&lt;/a&gt;, which demos more individual Java 9 features and talks specifically about IntelliJ IDEA&amp;rsquo;s support for it.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Articles &amp;amp; More Detail&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve expanded upon the examples in this presentation in a couple of articles about adopting Java 9:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java Magazine: &lt;a href=&#34;http://www.javamagazine.mozaicreader.com/JulyAug2017#&amp;amp;pageSet=17&amp;amp;page=0&#34;&gt;Migrating from Java 8 to Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InfoQ: &lt;a href=&#34;https://www.infoq.com/articles/Java-Jigsaw-Migration-Guide&#34;&gt;Painlessly Migrating to Java Jigsaw Modules - a Case Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JetBrains Blog: &lt;a href=&#34;https://blog.jetbrains.com/idea/2017/10/real-world-java-9/&#34;&gt;Real World Java 9 Summary and FAQs&lt;/a&gt;
in this blog post I answer audience questions about the module system mostly, some questions relate to other Java 9
features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trishagee/sense-nine&#34;&gt;https://github.com/trishagee/sense-nine&lt;/a&gt;.
The full application with all Java 9 code is currently under the
&lt;em&gt;working-system&lt;/em&gt; branch, the presentation builds off the code in &lt;em&gt;start_point&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Original Java 8 code comes from &lt;a href=&#34;https://github.com/trishagee/sense&#34;&gt;https://github.com/trishagee/sense&lt;/a&gt;, the &lt;em&gt;master&lt;/em&gt; branch has the most up-to-date final working Java 8 application.  JUnit 5 tests come from the &lt;em&gt;junit-5&lt;/em&gt; branch. Java 8 and 9 features live side-by-side in &lt;em&gt;yow-brisbane&lt;/em&gt;. That app was built with Java build 9-ea+146, but does not work with build 9-ea+156&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;IntelliJ IDEA&lt;/h3&gt;

&lt;p&gt;The earliest version of this talk runs on IntelliJ IDEA 2017.1, which supports
Jigsaw much better than pre-2017 versions.  However, I&amp;rsquo;m currently using
&lt;a href=&#34;https://www.jetbrains.com/idea/nextversion/&#34;&gt;2017.3 EAP&lt;/a&gt;, as this has the best support for Java 9/JPMS
and also a basic version of the &lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161611&#34;&gt;Java Console&lt;/a&gt;.
Read a &lt;a href=&#34;https://blog.jetbrains.com/idea/2017/09/java-9-and-intellij-idea/&#34;&gt;summary of the Java 9 support in IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a 5-minute version of IntelliJ IDEA&amp;rsquo;s support for modularity, watch
&lt;a href=&#34;https://twitter.com/jonnyzzz&#34;&gt;@jonnyzzz&lt;/a&gt;&amp;rsquo;s
&lt;a href=&#34;https://youtu.be/UNg9lmk60sg?t=6903&#34;&gt;demo during the JavaOne Keynote&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Java 9&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html&#34;&gt;Oracle&amp;rsquo;s JDK 9&lt;/a&gt; or &lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;OpenJDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/whatsnew/toc.htm&#34;&gt;What&amp;rsquo;s New in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;Java 9 Expert Insights&lt;/a&gt; series of short videos&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk9/&#34;&gt;JDK 9 Project Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;Download JDK 9 EA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.rainfocus.com/oracle/oraclecode17/sess/1485992822413001Yd6N/PF/Cool%20in%20Java%208,%20and%20new%20in%20Java%209.pdf&#34;&gt;What is cool in Java 8 and new in 9&lt;/a&gt;(Slides: Java 9 content starts at Slide 40)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/ultimate-guide-to-java-9/&#34;&gt;The Ultimate Guide to Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-i/&#34;&gt;Inside Java 9 – Version Schema, Multi-Release JARs, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-ii/&#34;&gt;Inside Java 9 – Performance, Compiler, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3169388/java-language/java-9s-other-new-enhancements-part-2.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 2: Milling Project Coin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://download.java.net/java/jdk9/docs/index.html&#34;&gt;Java Platform Standard Edition 9 Early Access Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/overview-summary.html&#34;&gt;Java 9 Javadoc&lt;/a&gt; (note the new search feature!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Jigsaw / JPMS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/&#34;&gt;Project Jigsaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/261&#34;&gt;JEP 261: The Java Platform Module System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Quick Start Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/spec/sotms/&#34;&gt;The State of the Module System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mreinhold.org/blog/jigsaw-module-system&#34;&gt;Project Jigsaw: The module system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/Latest-Project-Jigsaw-Usage-Tutorial&#34;&gt;Programming with Modularity and Project Jigsaw. A Tutorial Using the Latest Early Access Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2015/11/first-steps-with-java9-jigsaw-part-1&#34;&gt;First steps with Java 9 and Project Jigsaw – Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2015/12/first-steps-with-java9-jigsaw-part-2/&#34;&gt;First steps with Java 9 and Project Jigsaw – Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joda.org/2017/04/java-9-modules-jpms-basics.html&#34;&gt;Java 9 modules - JPMS basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joda.org/2017/04/java-se-9-jpms-modules-are-not-artifacts.html?m=1&#34;&gt;Java SE 9 - JPMS modules are not artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joda.org/2017/04/java-se-9-jpms-module-naming.html&#34;&gt;Java SE 9 - JPMS module naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/doc/ModulesAndJavac.pdf&#34;&gt;Modules and javac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;jlink&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;docs.oracle.com/javase/9/tools/jlink.htm&#34;&gt;jlink Reference Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idrsolutions.com/2017/05/java-9-jlink-explained-in-5-minutes/&#34;&gt;Java 9 jlink Explained in 5 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Jigsaw &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Quick Start Tutorial&lt;/a&gt; also has a section on jlink&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Migrating to Java 9 (and Jigsaw)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/migrate/&#34;&gt;Java 9 Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/czhSo8rotC4&#34;&gt;Migrating to Modules&lt;/a&gt; (video) Highly recommended.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codefx.org/java/dev/how-java-9-and-project-jigsaw-may-break-your-code/&#34;&gt;How Java 9 And Project Jigsaw May Break Your Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-March/011763.html&#34;&gt;The Jigsaw &amp;ldquo;kill switch&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/tools/jdeps.htm#JSWOR690&#34;&gt;jdeps Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;Reactive Programming and RxJava&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;Reactive Streams API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reactive-streams.org/announce-1.0.0#implementations&#34;&gt;Reactive Streams Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.oracle.com/docs/DOC-1006738&#34;&gt;Reactive Programming with JDK 9 Flow API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxJava/wiki&#34;&gt;RxJava Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/rxjava2-by-example&#34;&gt;RXJava2 by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vogella.com/tutorials/RxJava/article.html&#34;&gt;RxJava 2.0 - Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/rxjava-for-easy-concurrency-and-backpressure&#34;&gt;RxJava for easy concurrency and backpressure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.danlew.net/2016/06/13/multicasting-in-rxjava/&#34;&gt;Multicasting in RxJava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/streams-jdk&#34;&gt;Reactive Streams, j.u.concurrent, &amp;amp; beyond!&lt;/a&gt; (video)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/blog/2016/04/19/understanding-reactive-types&#34;&gt;Understanding Reactive Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/rolandkuhn/reactive-streams&#34;&gt;Reactive Streams: Handling Data-Flow the Reactive Way&lt;/a&gt;(slides)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/reactor-by-example/&#34;&gt;Reactor by Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_12&#34;&gt;Multi-Release JAR Files&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/238&#34;&gt;JEP 238&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-i/#multireleasejars&#34;&gt;Simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thoughtfulsoftware.wordpress.com/2016/08/22/java-9-multi-release-jar-files-part-ii/&#34;&gt;Multi-release JAR files tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;Stack-Walking API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/259&#34;&gt;JEP 259&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/deep-dive-into-java-9s-stack-walking-api/&#34;&gt;Deep Dive into the Stack-Walking API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3188289/core-java/java-9s-other-new-enhancements-part-5-stack-walking-api.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 5: Stack-Walking API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_14&#34;&gt;Process API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/102&#34;&gt;JEP 102&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3176874/java-language/java-9s-other-new-enhancements-part-3.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 3: The Process API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iteratrlearning.com/java/2017/03/12/java9-process-api.html&#34;&gt;Java 9 Process API: The Shape of Things to Come&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_15&#34;&gt;JShell (the REPL)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm&#34;&gt;JShell User&amp;rsquo;s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/kulla/&#34;&gt;REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/&#34;&gt;Java 9 REPL – Getting started guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;HTML5 Javadoc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.voxxed.com/2016/10/java-9-series-html5-javadoc/&#34;&gt;Java 9 series: HTML5 and Javadoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idrsolutions.com/2017/05/how-html5-javadocs-in-java-9-will-make-your-life-easier/&#34;&gt;How HTML5 Javadocs in Java 9 will make your life easier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_17&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/gof-design-patterns-using-java-02&#34;&gt;GoF - Adapter Pattern&lt;/a&gt; (required to adapt between Java 9 Flow API and the Reactive Streams API)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Career Advice for Programmers</title>
      <link>https://trishagee.github.io/presentation/career_advice_for_programmers/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/career_advice_for_programmers/</guid>
      <description>

&lt;p&gt;One developer&amp;rsquo;s journey to find the perfect job.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Do you know how to remain a programmer? To avoid being “promoted” into
positions away from technology and code? Did they teach you at university
that you need social skills to be a good developer? What other skills do you
need that aren&amp;rsquo;t technical? Did you know that all development roles are not
created equal? Is it true that moving jobs a lot is a Bad Thing? In this
session, Trisha Gee (Java Champion, 2015 MongoDB Master, 2016 / 2014 / 2012
JavaOne Rock Star &amp;amp; Technical Advocate for JetBrains) will share some lessons
she learnt the hard way over nearly twenty years of managing her career as a Java developer. She&amp;rsquo;ll talk about what&amp;rsquo;s really important to developers when thinking about their careers, and give you tools for working out what your next steps are. If nothing else, you’ll get to laugh at the (many) mistakes I’ve made in my search for The Perfect Job.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/l8V7GYWY3pl2GG&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;This talk has been videoed twice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/LlAn452X4Lc&#34;&gt;GOTO Aarhus&lt;/a&gt;: this version of the talk
covers a wide variety of topics&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yow.eventer.com/yow-2013-1080/career-advice-for-programmers-by-trisha-gee-1380&#34;&gt;YOW Australia&lt;/a&gt;: this
version has a better structure, but doesn&amp;rsquo;t cover as many topics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Other links&lt;/h2&gt;

&lt;p&gt;Links and resources mentioned in the talk are largely from my own blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://trishagee.github.io/post/life_on_both_sides_of_the_interview_table/&#34;&gt;Life on both sides of the interview table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/post/how_to_make_your_cv_not_suck/&#34;&gt;How to make your CV not suck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/post/staying_ahead_of_the_curve/&#34;&gt;Staying Ahead of the Curve&lt;/a&gt; (original blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/presentation/staying_ahead_of_the_curve/&#34;&gt;Staying Ahead of the Curve&lt;/a&gt;(conference talk)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/presentation/becoming_buzzword_compliant/&#34;&gt;Becoming Fully Buzz Word Compliant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Becoming Fully Buzzword Compliant</title>
      <link>https://trishagee.github.io/presentation/becoming_buzzword_compliant/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/becoming_buzzword_compliant/</guid>
      <description>

&lt;p&gt;How do you keep your skills up to date in this fast-moving and turbulant
industry?&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Abstract&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s all about Containers, Serverless and Reactive Programming right now!
ProgSCon London will explore these trends with leading industry experts. Several talks will also feature Blockchain, Microservices and Big Data.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You’re here at ProgSCon to hear all about the latest trends in technology,
to learn about them and decide which ones to apply and figure out how. But
it’s a tall order, learning to be a fully buzzword compliant developer, architect or lead, especially when What’s Hot changes on practically a daily basis.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;During this talk, Trisha will give an irreverent overview of the current
technical landscape and present a survival guide for those who want to stay ahead in this turbulent industry.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Slides&lt;/h1&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/4uySiObJeca3dX&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Resources&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;News&lt;/h2&gt;

&lt;p&gt;These are the sources I mention in the talk and some of the tools I personally
use to help organise my news.  Definite slant towards the Java / JVM world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites&lt;/strong&gt;&lt;br /&gt;
You can subscribe to receive regular updates via email too if you prefer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/&#34;&gt;InfoQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com&#34;&gt;DZone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoworld.com&#34;&gt;InfoWorld&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Newsletters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://androidweekly.net/&#34;&gt;Android Weekly Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groovycalamari.com/&#34;&gt;Groovy Calamari Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kotlinweekly.net/&#34;&gt;Kotlin Weekly Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalatimes.com/&#34;&gt;Scala Times Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/java/&#34;&gt;Sitepoint Java Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baeldung.com/java-web-weekly/&#34;&gt;Baeldung Weekly Roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://info.jetbrains.com/Java-Annotated-Subscription.html&#34;&gt;Java Annotated Monthly Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://feedly.com&#34;&gt;Feedly&lt;/a&gt; - RSS Feed Aggregator&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getpocket.com&#34;&gt;Pocket&lt;/a&gt; - Lets you save articles for reading
later, including offline.  Useful for commuting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;More Info&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Blockchain&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are literally the first articles I found with the search &amp;ldquo;blockchain
bluffers guide&amp;rdquo;. I am in no position to qualify how good they are, but they
gave me enough of an overview to make me feel comfortable I wouldn&amp;rsquo;t make any
stupid mistakes in 2 minutes of mentioning Blockchain.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.forbes.com/sites/bernardmarr/2017/01/24/a-complete-beginners-guide-to-blockchain/#373d2d46e607&#34;&gt;A Complete Beginner&amp;rsquo;s Guide To Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dataconomy.com/2015/10/wtf-is-the-blockchain-a-guide-for-total-beginners/&#34;&gt;WTF is the Blockchain? A Guide for Total Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blockgeeks.com/guides/what-is-blockchain-technology/&#34;&gt;What is Blockchain Technology? A Step-by-Step Guide For Beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reactive&lt;/strong&gt;&lt;br /&gt;
I&amp;rsquo;ve already listed resources for my research in this area in &lt;a href=&#34;/presentation/real_world_java_9&#34;&gt;Real World
Java 9&lt;/a&gt;, but these are particularly used in
this presentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/ideas/reactive-programming-vs-reactive-systems&#34;&gt;Reactive Programming vs Reactive Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reactive_programming&#34;&gt;Reactive Programming Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Credits&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flic.kr/p/b99vsi&#34;&gt;Enigma Machine Photo: Adam Foster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:Technology-Adoption-Lifecycle.png&#34;&gt;Crossing the Chasm Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bamedia.co.uk/?pg=portfolio&amp;amp;sp=onboard&#34;&gt;BA Business Life Magazine Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flic.kr/p/zhyKQx&#34;&gt;Terminator 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/Bitcoin_symbol&#34;&gt;Bitcoin Symbol&lt;/a&gt;, actual image
from &lt;a href=&#34;http://www.unicode.org/L2/L2015/15229-bitcoin-sign.pdf&#34;&gt;Proposal for addition of bitcoin sign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Related Presentations&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/presentation/staying_ahead_of_the_curve&#34;&gt;Staying Ahead of the Curve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/presentation/yow_2013_career_advice_for_programmers&#34;&gt;Career Advice for Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Anticipating Java 9 - Functionality and Tooling</title>
      <link>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</guid>
      <description>

&lt;p&gt;Looking ahead to what functionality is available in Java 9, and IntelliJ IDEA&amp;rsquo;s support (current and future) for it.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Seems like we’ve been waiting for Java 9 for eternity.  We’ve been hearing all about Jigsaw since Java 7, so we’ll be forgiven for thinking that’s the most interesting thing about the next Java release.  What we should be wondering is, will Java 9 it change the way we develop, like Java 8 did?  Will my tools break when I try to use it? Is it worth playing with it before it comes out, or should I just wait until everything stabilises?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this talk, Trisha will take a look at some of the features in Java 9, including modularity, the REPL, and the nice new Collections features.  Trisha will demonstrate, via live coding, these features in IntelliJ IDEA, and talk a bit about the current and future support for Java 9 in IntelliJ IDEA.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Video&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eDV1JUMqMDU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/ePGXu8U5H0CSh&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;See also &lt;a href=&#34;/presentation/real_world_java_9&#34;&gt;Real World Java 9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;Download the latest Java JDK here&lt;/a&gt; (the
talk uses build 161).&lt;/p&gt;

&lt;p&gt;IntelliJ IDEA 2017.1
&lt;a href=&#34;https://blog.jetbrains.com/idea/2017/03/support-for-java-9-modules-in-intellij-idea-2017-1/&#34;&gt;introduced basic support for modules&lt;/a&gt;.
This support has evolved a little since then, I&amp;rsquo;m now using the
&lt;a href=&#34;https://www.jetbrains.com/idea/nextversion/&#34;&gt;2017.2 EAP&lt;/a&gt; to get the best support for Java 9.&lt;/p&gt;

&lt;p&gt;The Jigsaw code I used was from a workshop by Brian Goetz.  But to start playing with Jigsaw, take a look at
the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Getting Started tutorial&lt;/a&gt;.  I used the &lt;a href=&#34;https://java.net/downloads/adoptopenjdk/REPL_Tutorial.pdf&#34;&gt;Java REPL
Tutorial&lt;/a&gt; to help me get started with JShell.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Help &amp;amp; Feedback&lt;/h2&gt;

&lt;p&gt;Get help and more information on JDK 9 from the
&lt;a href=&#34;https://community.oracle.com/community/java/java_desktop/java-se-early-access&#34;&gt;Oracle Community feedback forum&lt;/a&gt;. If you find a genuine
bug in the JDK, &lt;a href=&#34;http://bugreport.java.com/&#34;&gt;report it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can report bugs and request features for IntelliJ IDEA in
&lt;a href=&#34;https://youtrack.jetbrains.com/issues/idea/&#34;&gt;YouTrack&lt;/a&gt;. Some Java 9 tickets you may be interested in:&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161611&#34;&gt;IDEA-161611: Java REPL support for Java 9&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-154240&#34;&gt;IDEA-154240: IDEA should work with JDK module system&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161641&#34;&gt;IDEA-161641: Produce JLink Artefacts&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;More information&lt;/h2&gt;

&lt;p&gt;Joseph Darcy&amp;rsquo;s talk on
&lt;a href=&#34;https://youtu.be/vKYzmIi_1LM&#34;&gt;JDK 9 Language, Tooling and Library Features&lt;/a&gt; from JavaOne is a good summary of what&amp;rsquo;s coming (&lt;a href=&#34;https://blogs.oracle.com/darcy/resource/JavaOne/J1_2016-jdk9-lang-tools-libs.pdf&#34;&gt;slides
also available&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://static.rainfocus.com/oracle/oraclecode17/sess/1485992822413001Yd6N/PF/Cool%20in%20Java%208,%20and%20new%20in%20Java%209.pdf&#34;&gt;What is cool in Java 8 and new in 9&lt;/a&gt;(Slides: Java 9 content starts at Slide 40)&lt;/p&gt;

&lt;p&gt;The OpenJDK wiki provides &lt;a href=&#34;https://wiki.openjdk.java.net/display/Adoption/JDK+9+Outreach&#34;&gt;guidance on running your code with Java 9&lt;/a&gt;, and a
&lt;a href=&#34;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&#34;&gt;list of libraries and frameworks who are currently testing against Java 9&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Review Matters and Manners</title>
      <link>https://trishagee.github.io/presentation/code_review_matters_and_manners/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/code_review_matters_and_manners/</guid>
      <description>

&lt;p&gt;Content and resources for the Code Review Matters and Manners talk, including links to additional information and
supporting material.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;A code review is basically a technical discussion which should lead to improvements in the code and/or sharing
knowledge in a team. As with any conversation, it should have substance and form.&lt;/p&gt;

&lt;p&gt;What’s involved in a good code review? What kind of problems do we want to spot and address? Trisha Gee will talk
about things a reviewer may consider when looking at changes:  what potential issues to look for; why certain
patterns may be harmful; and, of course, what NOT to look at.&lt;/p&gt;

&lt;p&gt;But when it comes to commenting on someone’s work, it may be hard to find the right words to convey a useful message
without offending the authors - after all, this is something that they worked hard on. Maria Khalusova will share
some observations, thoughts and practical tricks on how to give and receive feedback without turning a code review
into a battlefield.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/182087729&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/7wG1iGAnGsQ4F6&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;More Information&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Books&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;What to Look for in a Code Review&lt;/a&gt; - Trisha Gee (free!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=4f2f97b38b1e19961a4425340aef003b&#34;&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0735619670&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Steve McConnell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=86afa947570d6d5c8d03f7c4d495c449&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0132350882&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Robert C. Martin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/&#34;&gt;What to look for in a Code Review&lt;/a&gt;, the article that started all of this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/03/what-to-look-for-in-a-code-review-tests/&#34;&gt;What to look for in a Code Review: Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/06/what-to-look-for-in-a-code-review-performance/&#34;&gt;What to look for in a Code Review: Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/20/what-to-look-for-in-a-code-review-data-structures/&#34;&gt;What to look for in a Code Review: Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/31/what-to-look-for-in-a-code-review-solid-principles-2/&#34;&gt;What to look for in a Code Review: SOLID Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/05/what-to-look-for-in-a-code-review-security/&#34;&gt;What to look for in a Code Review: Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/19/what-to-look-for-in-a-code-review-upsource-quick-wins/&#34;&gt;What to look for in a Code Review: Upsource Quick Wins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2016/08/03/what-to-look-for-in-java-8-code/&#34;&gt;What to look for in: Java 8 code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/code-reviews-just-do-it/&#34;&gt;Code Reviews: Just Do It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.fullstory.com/what-we-learned-from-google-code-reviews-arent-just-for-catching-bugs-b125a13aa292#.mktgod79l&#34;&gt;What we learned from Google: code reviews aren’t just for catching bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infragistics.com/community/blogs/erikdietrich/archive/2016/06/29/the-human-cost-of-tech-debt.aspx&#34;&gt;The Human Cost of Tech Debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2016/06/21/pick-battles-software-team/&#34;&gt;How to Pick Your Battles on a Software Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;And, of course&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can &lt;a href=&#34;https://www.jetbrains.com/upsource/&#34;&gt;download Upsource&lt;/a&gt;, it&amp;rsquo;s free for up to 10 users.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Applying Java 8 Idioms to Existing Code</title>
      <link>https://trishagee.github.io/presentation/refactoring_to_java_8/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/refactoring_to_java_8/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Understand how to improve performance with your Java code using Java 8 language features.&lt;/li&gt;
&lt;li&gt;Learn hands on techniques to discover and implement common Java 8 refactorings.&lt;/li&gt;
&lt;li&gt;Understand when you should and should not apply key refactorings in Java 8.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;While we’re drawing ever closer to Java 9, and even hearing about features in Java 10, many of us are still working with an older version. Even if your project has technically adopted Java 8, and even if you’re using it when coding new features, it’s likely that the majority of your code base is still not making the most of what’s available in Java 8 - features like Lambda Expressions, the Streams API, and new Date/Time. And this is a shame, since Java 8 provides not only nicer syntax for developers, but (usually) better application performance.&lt;/p&gt;

&lt;p&gt;In this presentation, Trisha will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight the performance benefits of using Java 8 - after all, you’ll probably have to persuade &amp;ldquo;The Management&amp;rdquo; that tampering with
existing code is worthwhile&lt;/li&gt;
&lt;li&gt;Demonstrate how to identify areas of code that can be updated to use Java 8 features, and how to pick which changes will give you the
most benefit&lt;/li&gt;
&lt;li&gt;Demonstrate how to automatically refactor your code to make use of features like lambdas and streams&lt;/li&gt;
&lt;li&gt;Cover some of the pros and cons of using the new features - including suggestions of when refactoring may NOT be the best idea.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NcetKbGayZY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This is the most complete version of the talk, containing as many different refactorings as I could squeeze in, and updated performance analysis.&lt;/p&gt;

&lt;p&gt;Other versions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/2xOtyGUTpQU&#34;&gt;JetBrains Webinar&lt;/a&gt;, with all the latest IntelliJ IDEA support for Java 8 refactoring.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/java8-lambda-streams&#34;&gt;QCon New York&lt;/a&gt;, with a nice summary of the &lt;a href=&#34;https://www.infoq.com/articles/qcon-new-york-2016#_Toc456084721&#34;&gt;points covered in
the talk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dlzMV83RTtw&#34;&gt;DevoxxUK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/xPhKtRN9aOsHZd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;You can purchase a more in-depth tutorial on
&lt;a href=&#34;http://www.informit.com/store/refactoring-to-modern-java-livelessons-video-training-9780134653594&#34;&gt;informIT&lt;/a&gt;, and is also available via
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/refactoring-to-modern/9780134653617/&#34;&gt;Safari Books Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The IntelliJ-specific features of some of the refactoring shown are covered in my
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Article: &lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features You Won&amp;rsquo;t Be Able to Live Without&lt;/a&gt;&lt;br /&gt;
Video and Research: &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Building a Java 8 Application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The project we&amp;rsquo;re refactoring is &lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt;. You can see the &amp;ldquo;after&amp;rdquo; of the chosen refactorings on the
 &lt;a href=&#34;https://github.com/trishagee/morphia/tree/r2j8&#34;&gt;r2j8&lt;/a&gt; branch.&lt;/p&gt;

&lt;p&gt;The performance tests that were written and run specifically for this talk are in the &lt;a href=&#34;https://github.com/trishagee/j8-morphia-perf-tests&#34;&gt;j8-morphia-perf-tests repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Performance&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Lambda Expressions&lt;/h3&gt;

&lt;p&gt;Video: &lt;a href=&#34;http://medianetwork.oracle.com/video/player/2623576348001&#34;&gt;Lambda Performance&lt;/a&gt; and &lt;a href=&#34;http://www.oracle
.com/technetwork/java/jvmls2013kuksen-2014088.pdf&#34;&gt;talk slides&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood&#34;&gt;Java 8 Lambdas - A Peek Under the Hood&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href=&#34;https://youtu.be/MLksirK9nnE&#34;&gt;Lambdas in Java: A Peek under the Hood - Brian Goetz&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Streams&lt;/h4&gt;

&lt;p&gt;Video: &lt;a href=&#34;https://www.infoq.com/presentations/java8-stream-performance&#34;&gt;Let’s Get to the Rapids: Java 8 Stream Performance&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://jaxenter
.com/java-performance-tutorial-how-fast-are-the-java-8-streams-118830.html&#34;&gt;Java performance tutorial: How fast are the Java 8 streams? - Angelika Langer&lt;/a&gt; Notable Quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, the for-loop is faster that the sequential stream operation, but the difference on an ArrayList is not nearly as significant as
it was on an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will find that there is no measurable difference any more between for-loop and sequential stream if the functionality is heavily cpu
 bound.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The point to take home is that sequential streams are no faster than loops. If you use sequential streams then you don’t do it for
performance reasons; you do it because you like the functional programming style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reality check via our benchmark yields a ratio (sequential / parallel) of only 1.6 instead of 2.0, which illustrates the amount of
overhead that is involved in going parallel and how (well or poorly) it is overcompensated (on this particular platform).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this in mind it is fair to say that the performance model of streams is not a trivial one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;you need to benchmark a lot in order to find out for a given context whether going parallel is worth doing or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The realisation is: Yes, parallel stream operations are easy to use and often they run faster than sequential operations, but don’t
expect miracles. Also, don’t guess; instead, benchmark a lot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.takipi
.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/&#34;&gt;Benchmark: How Misusing Streams Can Make Your Code 5 Times Slower&lt;/a&gt; -
interesting comparison of different iteration styles.  Also shows that things like boxing might add more cost than streams (but that you
don&amp;rsquo;t realise you&amp;rsquo;re boxing)&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance/&#34;&gt;Stream Performance&lt;/a&gt; - some interesting benchmarks based on Angelika Langer&amp;rsquo;s
article&lt;br /&gt;
Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance-your-ideas/&#34;&gt;Follow up on Stream Performance&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Date and Time&lt;/h3&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://java-performance.info/jsr-310-java-8-datetime-library-performance-well-joda-time-2-3-j-u-calendar/&#34;&gt;JSR 310 – Java 8 Date/Time library performance (as well as Joda Time 2.3 and j.u.Calendar)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Benchmarking&lt;/h3&gt;

&lt;p&gt;I used a bunch of techniques to produce the benchmarks on the talk.  I&amp;rsquo;d like to summarise them more thoroughly when I get a chance, but
for now here&amp;rsquo;s my background reading:&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&#34;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tool: &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;&lt;br /&gt;
Tool: &lt;a href=&#34;https://github.com/artyushov/idea-jmh-plugin&#34;&gt;IntelliJ JMH Plugin&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;http://java-performance.info/jmh/&#34;&gt;Introduction to JMH&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;&amp;ldquo;Best Practice&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I dislike the term &amp;ldquo;Best Practice&amp;rdquo; as it implies a &amp;ldquo;one size fits all&amp;rdquo; approach, and I believe that our job is to
make difficult decisions based on various pros and cons and differing situations.  However, here I will collect
resources that may help us make some of those decisions&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://martinfowler.com/articles/refactoring-pipelines.html&#34;&gt;Refactoring with Loops and Collection Pipelines&lt;/a&gt; -
Martin Fowler&lt;br /&gt;
Slides: &lt;a href=&#34;http://martinfowler.com/articles/workflowsOfRefactoring/&#34;&gt;Workflows of Refactoring&lt;/a&gt; - Martin Fowler&lt;br /&gt;
Book: &lt;a href=&#34;https://www.amazon.com/gp/product/0201485672/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201485672&amp;amp;linkId=11d0b95e050a492112eeac6fb6b2bcb0&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; - Martin Fowler&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.joda.org/2014/11/optional-in-java-se-8.html&#34;&gt;Using Optional in Java SE 8&lt;/a&gt; - Stephen Colebourne&lt;br /&gt;
Article: &lt;a href=&#34;http://zeroturnaround.com/rebellabs/java-8-best-practices-cheat-sheet/&#34;&gt;Java 8 Best Practices Cheat Sheet&lt;/a&gt; - ZeroTurnaround&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Extraordinary Team Of Developers</title>
      <link>https://trishagee.github.io/presentation/the_extraordinary_team_of_developers/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/the_extraordinary_team_of_developers/</guid>
      <description>

&lt;p&gt;Daniel Bryant and I did a keynote at Devoxx UK about how individuals can add something to a team to make the team
more productive, and overall more awesome.&lt;/p&gt;

&lt;p&gt;&lt;div data-parleys-presentation=&#34;keynote-extraordinary-team-developers&#34; style=&#34;width:100%;height:300px&#34;&gt;&lt;script type = &#34;text/javascript&#34; src=&#34;//parleys.com/js/parleys-share.js&#34;&gt;&lt;/script&gt;&lt;a href=&#34;https://www.parleys.com/play/keynote-extraordinary-team-developers&#34;&gt;Watch on Parleys.com&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;We mention a number of books, so I&amp;rsquo;ve made a list of them here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1594484805&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=GSO6AH7236C37XUL&#34;&gt;Drive: The Surprising Truth About What Motivates
Us&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1594484805&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/1491919019/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1491919019&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=S3PUS65PBYMVIK4U&#34;&gt;Badass: Making Users Awesome&lt;/a&gt;&lt;img 
src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1491919019&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0316346624/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0316346624&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=JSKRNEPP3R3RTZH4&#34;&gt;The Tipping Point: How Little Things Can Make a
Big Difference&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0316346624&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0321356683/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321356683&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=WFSI2OVJKEBPD7YA&#34;&gt;Effective Java (2nd Edition)&lt;/a&gt;&lt;img 
src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0321356683&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0982201222/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0982201222&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=26DOP5D3JV2MWTGW&#34;&gt;The Servant as Leader&lt;/a&gt;&lt;img src=&#34;http://ir-na
.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0982201222&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/1591842697/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1591842697&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=NJ42CVES4P6F7FEA&#34;&gt;The Back of the Napkin: Solving Problems and Selling Ideas with Pictures&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1591842697&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rock stars are dead. Ninjas are banished. There are simply too many trashed hotel rooms, dead bodies and failed
projects. The age of the individual superhero coder is over.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But if we’re still striving for excellence, what’s replaced the rock-star-ninja-hero programmer?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The team. The team that’s greater than the sum of its parts. Like The Avengers, but with less latex.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the same way those without super powers, genius levels of intelligence and pots of money were vital to The
Avengers, every developer, no matter how much or how little experience they have, brings something important to the
team and has the potential to make it better: a nicer place to work, an openness to learning, a focus on clean code or a deeper understanding of the business’ needs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can a collection of good developers become a super-performing business-impact-delivering team? What do you, as
an individual, add to the mix?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Daniel and Trisha will share stories of individuals and teams who have made an impact (both good and bad!) and offer
  suggestions for steps we, as individuals, can take to level up our teams.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Level Up Your Automated Tests</title>
      <link>https://trishagee.github.io/presentation/level_up_your_automated_tests/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/level_up_your_automated_tests/</guid>
      <description>

&lt;p&gt;This presentation is about how to change a team&amp;rsquo;s attitude towards writing automated tests.  The
talk covers the same case study as
&lt;a href=&#34;/presentation/groovy_vs_java&#34;&gt;Groovy vs Java for Testing&lt;/a&gt;, adopting
Spock in MongoDB, but this is a more process/agile/people perspective, not a
technical look at the merits of one language over another.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3fEnq6JuwuI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/zUhtb6nqz7IgdO&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Other Videos&lt;/h3&gt;

&lt;p&gt;First version: &lt;a href=&#34;https://www.youtube.com/watch?v=D-xra_X9Nwg&#34;&gt;GOTO Chicago&lt;/a&gt; ( &lt;a href=&#34;https://www.slideshare.net/slideshow/embed_code/key/dJvHtktHbiDABW&#34;&gt;slides&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Questions&lt;/h2&gt;

&lt;p&gt;I sadly do not have a lot of time for questions during the presentation, but
thanks to the wonders of modern technology, I have a list of unanswered
questions which I will attempt to address here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is testing to find out your system works? Or is it so you know when your
system is broken?&lt;/strong&gt;&lt;br /&gt;
Excellent question. I would expect that if you have a system that&amp;rsquo;s in
production (which is probably the large majority of the projects we work on),
we can assume the system is working, for some definition of working.
Automated testing is particularly good at catching when your system stops
doing the things you thought it was doing when you wrote the tests (which
may, or may not, mean the system is genuinely &amp;ldquo;broken&amp;rdquo;). Regression testing is
to find out when your system is no longer doing what you expect, and automated tests are
really good for this.&lt;/p&gt;

&lt;p&gt;But testing can also make sure you implement code that behaves the way you
expect, especially if you write the tests first.  Automated tests can be used
to determine that your code is complete, according to some pre-agreed
specification (in this case, the automated tests you wrote up front).&lt;/p&gt;

&lt;p&gt;So I guess what I&amp;rsquo;m trying to say is, when you first write the tests you
have tests that, when they pass, proves the system works (&lt;em&gt;assuming&lt;/em&gt; your
tests are testing the right things and/or not giving you false positives).
Subsequent passes show that you haven&amp;rsquo;t broken anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At what level do &amp;ldquo;tests documenting code&amp;rdquo; actually become useful? And who
is/should the documentation be targeted to?&lt;/strong&gt;&lt;br /&gt;
In the presentation, my case study is the MongoDB Java Driver.  Our users
were Java programmers, who were going to be coding using our driver.  So in
this example, it makes a lot of sense to document the code using a language
that our users understood.  We started with Java, and ended up using Groovy
because it was also understandable for our users and a bit more succinct.&lt;/p&gt;

&lt;p&gt;On a previous project we had different types of tests.  The unit and system
tests documented what the expected behaviour was at the class or module
level, and was aimed at developers in the team.  The acceptance tests were
written in Java, but in a &lt;a href=&#34;https://www.symphonious.net/2015/06/05/testinglmax-abstraction-by-dsl/&#34;&gt;friendly DSL-style way&lt;/a&gt;. These were usually
written by a triad of tester, business analyst and developer, and documented to all
these guys and girls what the top-level behaviour should be. Our audience here
was fairly technical though, so there was no need to go to the extent of trying
to write English-language-style tests, they were readable enough for a
reasonably techy (but non-programmer) audience. These were not designed to be
read by &amp;ldquo;the business&amp;rdquo; - us developers might use
them to answer questions about the behaviour of the system, but they didn&amp;rsquo;t
document it in a way that just anyone could understand.&lt;/p&gt;

&lt;p&gt;These are two different approaches for two different-sized
team/organisations, with different users. So I guess in summary the answer is
&amp;ldquo;it depends&amp;rdquo;.  But at the very least, developers on your own team should be
able to read your tests and understand what the expected behaviour of the
code is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you become a team champion? I.e. get authority and acceptance that
people listen to you?&lt;/strong&gt;&lt;br /&gt;
In my case, it was just by accident - I happened to care about the tests
being green and also being useful, so I moaned at people until it happened. But
it&amp;rsquo;s not just about nagging, you get more buy-in if other people see you
doing the right things the right way, and it&amp;rsquo;s not too painful for them to
follow your example.&lt;/p&gt;

&lt;p&gt;There are going to be things that you care about that you&amp;rsquo;ll never get other
people to care about, and this will be different from team to team. You have
two choices here - if you care that much, and it bothers you that much, you
have to do it yourself (often on your own time, especially if your boss
doesn&amp;rsquo;t buy into it). Or, you have to let it go - when it comes to quality,
there are so many things you could care about that it might be more
beneficial to drop one cause and pick another that you can get people to care
about.&lt;/p&gt;

&lt;p&gt;For example, I wanted us to use &lt;code&gt;assertThat&lt;/code&gt; instead of &lt;code&gt;assertFalse&lt;/code&gt; (or
true, or equals, or whatever).  I tried to demo the advantages (as I saw
them) of my approach to the team, and tried to push this in code reviews, but
in the end the other developers weren&amp;rsquo;t sold on the benefits, and
from my point of view the benefits weren&amp;rsquo;t big enough to force the issue.
Those of us who cared, used &lt;code&gt;assertThat&lt;/code&gt;. For the rest, I was just happy
people were writing and maintaining tests.&lt;/p&gt;

&lt;p&gt;So, pick your battles. You&amp;rsquo;ll be surprised at how many people do get on board
with things.  I thought implementing checkstyle and setting draconian
formatting standards was going to be a tough battle, but in the end people
were just happy to have &lt;em&gt;any&lt;/em&gt; standards, especially when they were enforced
by the build.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you report test, style, coverage, etc failures separately? Why?&lt;/strong&gt;&lt;br /&gt;
We didn&amp;rsquo;t fail on coverage.  Enforcing a coverage percentage is a really good
way to end up with crappy tests, like for getters/setters and constructors
(by the way, if there&amp;rsquo;s enough logic in your constructor that it &lt;em&gt;needs&lt;/em&gt; a
test, You&amp;rsquo;re Doing It Wrong).&lt;/p&gt;

&lt;p&gt;Generally different types of failures are found by different tools, so for
this reason alone they will be reported separately - for example, checkstyle
will fail the build if it doesn&amp;rsquo;t conform to our style standards, codenarc
fails it for Groovy style failures, and Gradle will run the tests in a
different task to these two.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s actually important, though, is time-to-failure.  For checkstyle, for
example, it will fail on something silly like curly braces in the wrong place.
You want this to fail within seconds, so you can fix the silly mistake
quickly. Ideally you&amp;rsquo;d have IntelliJ (perhaps) run your checks before it even
makes it into your CI environment. Compiler errors should, of course, fail
things before you run a test, short-running tests should fail before
long-running tests.  Basically, the easier it is to fix the problem, the
sooner you want to know, I guess.&lt;/p&gt;

&lt;p&gt;Our build was relatively small and not too complex, so actually we ran all
our types of tests (integration and unit, both Groovy and Java) in a single
task, because this turned out to be much quicker in Gradle (in our case) than
splitting things up into a simple pipeline.&lt;/p&gt;

&lt;p&gt;You might have a reason to report stuff separately, but for me it&amp;rsquo;s much more
important to understand how fast I need to be aware of a particular type of
failure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sometimes I find myself modifying code design and architecture to enable
testing. How can I avoid damaging design?&lt;/strong&gt;&lt;br /&gt;
This is a great question, and a common one too. The short answer is: &lt;em&gt;in
general&lt;/em&gt; writing code that&amp;rsquo;s easier to test leads to a cleaner design anyway
(for example, dependency injection at that appropriate places). If you find
you need to rip your design apart to test it, there&amp;rsquo;s a smell there somewhere
 - either your design isn&amp;rsquo;t following SOLID principals, or you&amp;rsquo;re trying to
test the wrong things.&lt;/p&gt;

&lt;p&gt;Of course, the common example here is testing private methods - how do you test
these without exposing secrets&lt;sup&gt;1&lt;/sup&gt;? I think for me, if it&amp;rsquo;s important
enough
 to be tested
it&amp;rsquo;s important enough to be exposed in some way - it might belong in some
sort of util or helper (right now I&amp;rsquo;m not going to go into whether utils or
helpers are, in themselves a smell), in a smaller class that only
provides this sort of functionality, or simply a protected method. Or, if
you&amp;rsquo;re testing with Groovy, you can access private methods anyway so this
becomes a moot point (i.e. your testing framework may be limiting you).&lt;/p&gt;

&lt;p&gt;In another story from LMAX, we found we had created methods just for testing. It seemed a
bit wrong to have these methods only available for testing, but later on down
the line, we needed access to many of these methods In Real Life (well, from
our Admin app), so our testing had &amp;ldquo;found&amp;rdquo; a missing feature. When we came
to implement it, it was pretty easy as we&amp;rsquo;d already done most of it for
testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My co-workers often point to a lack of end-to-end testing as the reason why
 a lot of bugs get out to production even though they don&amp;rsquo;t have much unit
 tests nor integration tests. What, in your experience, is a good balance
 between unit tests, integration tests and end-to-end testing?&lt;/strong&gt;&lt;br /&gt;
Hmm, sounds to me like &amp;ldquo;lack of tests&amp;rdquo; is your problem!&lt;/p&gt;

&lt;p&gt;This is a big (and contentious!) topic.  &lt;a href=&#34;http://martinfowler.com/bliki/TestPyramid.html&#34;&gt;Martin Fowler has written about it&lt;/a&gt;, Google wrote something I
completely disagree with (so I&amp;rsquo;m not even going to link to it,
but you&amp;rsquo;ll find references in the links in this paragraph), and my
ex-colleague Adrian &lt;a href=&#34;https://www.symphonious.net/2015/04/30/making-end-to-end-tests-work/&#34;&gt;talks about what we, at LMAX, meant by end-to-end tests&lt;/a&gt;. I
hope that&amp;rsquo;s enough to get you started, there&amp;rsquo;s plenty more out there too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you go about getting buy in from the team to use Spock?&lt;/strong&gt;&lt;br /&gt;
I cover this in
&lt;a href=&#34;/presentation/groovy_vs_java&#34;&gt;my other presentation on the topic&lt;/a&gt; - the
short version is, I did a week-long spike to investigate whether Spock would
make testing easier for us, showed the pros and cons to the whole team, and
then led by example writing tests that (I thought) were more readable than
what we had before and, probably most importantly, much easier to write than
what we were previously doing. I basically got buy-in by showing how much
easier it was for us to use the tool than even JUnit (which we were all
familiar with). It did help that we were already using Gradle, so we already
had a development dependency on Groovy. It also helped that adding Spock made
no changes to the dependencies of the final Jar, which was very important.&lt;/p&gt;

&lt;p&gt;Over time, further buy-in (certainly from management) came when the new tests
started catching more errors - usually regressions in our code or regressions in
the server&amp;rsquo;s overnight builds. I don&amp;rsquo;t think it was Spock specifically
that caught more problems - I think it was writing more tests, and
better tests, that caught the issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we do data driven style tests in frameworks like junit or cucumber?&lt;/strong&gt;&lt;br /&gt;
I don&amp;rsquo;t think you can in JUnit (although maybe there&amp;rsquo;s something out there). I
believe someone told me you can do it in
&lt;a href=&#34;http://testng.org/doc/index.html&#34;&gt;TestNG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are there drawbacks to having tests that only run in ci? I.e I have Java 8
on my machine, but the test requires Java 7&lt;/strong&gt;&lt;br /&gt;
Yes, definitely - the drawback is Time.  You have to commit your code to a
branch that is being checked by CI and wait for CI to finish before you find
the error.&lt;/p&gt;

&lt;p&gt;In practice, we found very little that was different between Java
7 and 8, for example, but this is a valid concern (otherwise you wouldn&amp;rsquo;t be
testing a complex matrix of dependencies at all).&lt;/p&gt;

&lt;p&gt;In our case, our Java 6 driver used Netty for async capabilities, as the
stuff we were using from Java 7 wasn&amp;rsquo;t available. This was clearly a
different code path that wasn&amp;rsquo;t tested by us locally as we were all running
Java 8. Probably more importantly for us is we were testing against at least
3 different major versions of the server, which all supported different
features (and had different APIs).  I would often find I&amp;rsquo;d broken the tests
for version 2.2 as I&amp;rsquo;d only been running it on 2.6, and had forgotten to
either turn off the new tests for the old server versions, or didn&amp;rsquo;t realise
the new functionality wouldn&amp;rsquo;t work there.&lt;/p&gt;

&lt;p&gt;So the main drawback is time - it takes a lot longer to find out about these
errors.  There are a few ways to get around this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit often!! And to a branch that&amp;rsquo;s actually going to be run by CI&lt;/li&gt;
&lt;li&gt;Make your build as fast as possible, so you get failures fast (you
should be doing this anyway)&lt;/li&gt;
&lt;li&gt;You could set up virtual machines locally or somewhere cloudy to run these
configurations before committing, but that sounds kinda painful (and to my
mind defeats a lot of the point of CI).&lt;/li&gt;
&lt;li&gt;I set up Travis on my fork of the project, so I could have that running a
different version of Java and MongoDB when I committed to my own fork - I&amp;rsquo;d
be able to see some errors before they made it into the &amp;ldquo;real&amp;rdquo; project.&lt;/li&gt;
&lt;li&gt;If you can, you probably want these specific tests run first so they can
fail fast. E.g. if you&amp;rsquo;re running a Java 6 &amp;amp; MongoDB 2.2 configuration on
CI, run those tests that only work in that environment first.  Would
probably need some Gradle magic, and/or might need you to separate these
into a different set of folders.  The advantage of this approach though is
if you set up some aliases on your local machine you could sanity check
&lt;em&gt;just&lt;/em&gt; these special cases before checking in. For example, I had aliases to
start MongoDB versions/configurations from a single command, and to set
JAVA_HOME to whichever version I wanted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you have any tips for unit tests that pass on dev machines but not on
Jenkins because it&amp;rsquo;s not as powerful as our own machines? E.g. Synchronous
calls timeout on the Jenkins builds intermittently.&lt;/strong&gt;&lt;br /&gt;
Erk! Yes, not uncommon. No, not really. We had our timeouts set longer than I
would have liked to prevent these sorts of errors, and they still
intermittently failed. You can also set some sort of retry on the test, and
get your build system to re-run those that fail to see if they pass later.
It&amp;rsquo;s kinda nasty though.&lt;/p&gt;

&lt;p&gt;At LMAX they were able to take testing seriously enough to &lt;a href=&#34;https://www.symphonious.net/2015/06/24/end-to-end-tests-lmax-update/&#34;&gt;really invest in
their testing
architecture&lt;/a&gt;, and, of course, this is The Correct Answer. Just
often very difficult to sell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you ask where are tests and dev asks if code is correct? And you say yes.
Then dev asks why you&amp;rsquo;re delaying shipping value, how do you manage that?&lt;/strong&gt;&lt;br /&gt;
These are my opinions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your code is &lt;em&gt;not&lt;/em&gt; complete without tests that show me it&amp;rsquo;s complete.&lt;/li&gt;
&lt;li&gt;Your code might do what you think it&amp;rsquo;s supposed to do right now, but given
Shared Code Ownership, anyone can come in and change it at any time, you
want tests in place to make sure they don&amp;rsquo;t change it to break what you
thought it did&lt;/li&gt;
&lt;li&gt;The tests are not so much to show it works right now, the tests are to
show it continues to work in future&lt;/li&gt;
&lt;li&gt;Having automated tests &lt;em&gt;will&lt;/em&gt; speed you up in future. You can refactor
more safely, you can fix bugs and know almost immediately if you broke
something, you can read from the test what the author of the code thought
the code should do, getting you up to speed faster.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t know you&amp;rsquo;re shipping value without tests - you&amp;rsquo;re only shipping
code (to be honest, you never know if you&amp;rsquo;re shipping value until much later
on when you also analyse if people are even using the feature).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Testing almost never slows you down in the long run. Show me the bits of your
code base which are poorly tested, and I bet I can show you the bits of your
code base that frequently have bugs (either because the code is not really
doing what the author thinks, or because subsequent changes break things in
subtle ways).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you say code is hard to understand and dev asks if you seriously don&amp;rsquo;t
understand the code, how do you explain you mean easy to understand without
thinking rather than &amp;lsquo;can I compile this in my head&amp;rsquo;?&lt;/strong&gt;&lt;br /&gt;
I have zero problem with saying &amp;ldquo;I&amp;rsquo;m too stupid to understand this code, and
I expect you&amp;rsquo;re much smarter than me for writing it. Can you please write it
in a way so that a less smart person like myself won&amp;rsquo;t trample all over your
beautiful code at a later date through lack of understanding?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;By definition, code should be easy to understand by someone who&amp;rsquo;s not the
author. If someone who is not the author says the code is hard to understand,
then the code is hard to understand. This is not negotiable. This is what
code reviews or pair programming should address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is effective nagging like? (Whether or not you get what you want)&lt;/strong&gt;&lt;br /&gt;
Mmm, good question. Off the top of my head:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t make the people who are the target of the nagging feel stupid -
they&amp;rsquo;ll get defensive. If necessary, take the burden of &amp;ldquo;stupidity&amp;rdquo; on
yourself. E.g. &amp;ldquo;I&amp;rsquo;m just not smart enough to be able to tell if this test is
failing because the test is bad or because the code is bad. Can you walk me
through it and help me fix it?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Do &lt;em&gt;at least&lt;/em&gt; your fair share of the work, if not more. When I wanted to
get the code to a state where we could fail style errors, I fixed 99% of the
problems, and delegated the handful of remaining ones that I just didn&amp;rsquo;t
have the context to fix. In the face of three errors to fix each, the team
could hardly say &amp;ldquo;no&amp;rdquo; after I&amp;rsquo;d fixed over 6000.&lt;/li&gt;
&lt;li&gt;Explain &lt;em&gt;why&lt;/em&gt; things need to be done. Developers are adults and don&amp;rsquo;t want
to be treated like children. Give them a good reason and they&amp;rsquo;ll follow the
rules. The few times I didn&amp;rsquo;t have good reasons, I could not get the team
to do what I wanted.&lt;/li&gt;
&lt;li&gt;Find carrots and sticks that work.  At LMAX, a short e-mail at the start
of the day summarising the errors that had happened overnight, who seemed to
be responsible, and whether they looked like real errors or
intermittencies, was enough to get people to fix their problems&lt;sup&gt;2&lt;/sup&gt; -
they didn&amp;rsquo;t like to look bad, but they also had enough information to get right
on it, they didn&amp;rsquo;t have to wade through all the build info.  On occasion,
when people were ignoring this, I&amp;rsquo;d turn up to work with bags of chocolate
that I&amp;rsquo;d bought with my own money, offering chocolate bars to anyone who
fixed up the tests. I was random with my carrot offerings so people didn&amp;rsquo;t
game the system.&lt;/li&gt;
&lt;li&gt;Give up if it&amp;rsquo;s not working. If you&amp;rsquo;ve tried to phrase the &amp;ldquo;why&amp;rdquo; in a
number of ways, if you&amp;rsquo;ve tried to show examples of the benefits, if you&amp;rsquo;ve
tried to work the results you want into a process, but it&amp;rsquo;s still not
getting done, just accept the fact that this isn&amp;rsquo;t working for the team.
Move on to something else, or find a new angle.
&lt;br/&gt;&lt;br/&gt;
&lt;sup&gt;1&lt;/sup&gt; I had a colleague at LMAX who was  working with a hypothesis that
All Private Methods Were Evil - they were clearly only sharable within
single class, so provided no reuse elsewhere, and if you have the same bit
of code being called multiple times from within the same class (but it&amp;rsquo;s
not valuable elsewhere) then maybe your design is wrong. I&amp;rsquo;m still
pondering this specific hypothesis 4 years on, and I admit I see its pros
and cons.&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt; This worked so well that this process was automated by
one of the guys and turned into a tool called AutoTrish, which as far as I
know is still used at LMAX.  Dave Farley talks about it in some of his
&lt;a href=&#34;https://www.parleys.com/tutorial/continuous-delivery-part-2-2&#34;&gt;Continuous Delivery talks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;My talk that specifically looks at the
&lt;a href=&#34;presentation/groovy_vs_java/&#34;&gt;advantages of Spock over JUnit&lt;/a&gt;, plus some
Spock-specific resources.&lt;/li&gt;
&lt;li&gt;I &lt;em&gt;love&lt;/em&gt; Jay Fields book
&lt;a href=&#34;https://leanpub.com/wewut&#34;&gt;Working Effectively With Unit Tests&lt;/a&gt; - if I
could have made the whole team read this before moving to Spock, we might
have stuck with JUnit.&lt;/li&gt;
&lt;li&gt;Go read everything Adrian Sutton has written about testing at LMAX. If not
everything, definitely &lt;a href=&#34;https://www.symphonious.net/2015/06/05/testinglmax-abstraction-by-dsl/&#34;&gt;Abstraction by
DSL&lt;/a&gt;
and
&lt;a href=&#34;https://www.symphonious.net/2015/04/30/making-end-to-end-tests-work/&#34;&gt;Making End-to-End Tests Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t make it all the way through Dave Farley and Jez Humble&amp;rsquo;s
excellent &lt;a href=&#34;http://www.amazon
.com/gp/product/0321601912/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789
&amp;creative=9325&amp;creativeASIN=0321601912&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId
=I7ZAO2TETBFJIPHL&#34;&gt;Continuous Delivery book&lt;/a&gt;, do take a look at one of
Dave&amp;rsquo;s presentations on the subject, for example &lt;a href=&#34;http://www.infoq.com/presentations/cd-success&#34;&gt;The Rationale for Continuous
Delivery&lt;/a&gt; or &lt;a href=&#34;http://www.infoq.com/presentations/technology-practice-continuous-delivery&#34;&gt;The Process,
Technology and Practice of Continuous
Delivery&lt;/a&gt; - my own talk was
around testing, but I&amp;rsquo;m working off the assumption that you&amp;rsquo;re &lt;em&gt;at least&lt;/em&gt;
running some sort of Continuous Integration, if not Continuous Delivery.&lt;/li&gt;
&lt;li&gt;Martin Fowler has loads of &lt;a href=&#34;http://martinfowler.com/tags/testing.html&#34;&gt;interesting and useful articles on
testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;i&gt;What can you do to help developers a) write tests b) write meaningful tests
and c) write readable tests?&lt;/p&gt;

&lt;p&gt;Trisha will talk about her experiences of working in a team that wanted to
build quality into their new software version without a painful overhead -
without a QA / Testing team, without putting in place any formal processes,
without slavishly improving the coverage percentage.&lt;/p&gt;

&lt;p&gt;The team had been writing automated tests and running them in a continuous
integration environment, but they were simply writing tests as another tick
box to check, there to verify the developer had done what the developer had
aimed to do. The team needed to move to a model where tests provided more
than this. The tests needed to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Demonstrate that the library code was meeting the requirements&lt;/li&gt;
&lt;li&gt;Document in a readable fashion what those requirements were, and what should happen under non-happy-path situations&lt;/li&gt;
&lt;li&gt;Provide enough coverage so a developer could confidently refactor the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk will cover how the team selected a new testing framework (Spock, a
framework written in Groovy that can be used to test JVM code) to aid with
this effort, and how they evaluated whether this tool would meet the team’s
needs. And now, two years after starting to use Spock, Trisha can talk
about how both the tool and the shift in the focus of the purpose of tests
has affected the quality of the code. And, interestingly, the happiness
of the developers.&lt;/i&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy vs Java</title>
      <link>https://trishagee.github.io/presentation/groovy_vs_java/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/groovy_vs_java/</guid>
      <description>&lt;p&gt;Resources for my &amp;ldquo;Is Groovy Better Than Java for Testing?&amp;rdquo; talk.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VK2sMI5B1pY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/46936375&#34; width=&#34;476&#34; height=&#34;400&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
  

&lt;ul&gt;
&lt;li&gt;Blog: &lt;a href=&#34;http://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking/&#34;&gt;Mocking in Spock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href=&#34;http://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing/&#34;&gt;Stubbing in Spock&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blog: &lt;a href=&#34;http://trishagee.github.io/post/spock_data_driven_testing/&#34;&gt;Data Driven Testing in Spock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://spockframework.github.io/spock/docs/1.0/index.html&#34;&gt;Spock Reference Documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Book: &lt;a href=&#34;https://leanpub.com/wewut&#34;&gt;Working Effectively With Unit Tests - Jay Fields&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Video: &lt;a href=&#34;https://vimeo.com/80222114&#34;&gt;Making Java Tests Groovy with Spock - Ken Sipe&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Code: &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver&#34;&gt;MongoDB Java Driver&lt;/a&gt; All examples from the talk come from the MongoDB Java driver. Some tests have been improved or dropped over time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 in Anger</title>
      <link>https://trishagee.github.io/presentation/java8_in_anger/</link>
      <pubDate>Mon, 16 Feb 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/java8_in_anger/</guid>
      <description>

&lt;p&gt;Content and resources for the Java 8 in Anger presentation.&lt;/p&gt;

&lt;p&gt;This vJUG video of Java 8 in Anger shows the Java 8 version of this talk in
its clearest form. Here I also have links to other material I&amp;rsquo;ve published
on this topic, and to the resources I used to create the code.&lt;/p&gt;

&lt;p&gt;In 2016 this talk has evolved to also contain some Java 9 features too, and
the latest version even shows how to use TDD to help figure out which stream
operations you need. The video of the latest version is not yet available.&lt;/p&gt;

&lt;h4 id=&#34;toc_0&#34;&gt;Videos&lt;/h4&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/6_06zcDisNg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Other videos&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Java 8 (and 9) In Anger at &lt;a href=&#34;https://youtu.be/sKozumGWAOo&#34;&gt;YOW!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8 (and 9) In Anger at &lt;a href=&#34;https://youtu.be/miV7Ws7DODY&#34;&gt;Lambda World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.parleys.com/play/java-8-anger-1&#34;&gt;Devoxx UK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/java8-examples&#34;&gt;QCon New York&lt;/a&gt; (in this version, you get to see what happens
when it goes wrong&amp;hellip;)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.parleys.com/play/java-8-anger&#34;&gt;Devoxx France&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ustream.tv/recorded/61448786&#34;&gt;CraftConf&lt;/a&gt; (not quite as easy to see the code)&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/java8-tutorial&#34;&gt;First ever version! QCon London&lt;/a&gt; (code has been
simplified a little since then)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_2&#34;&gt;More details&lt;/h4&gt;

&lt;p&gt;Firstly, you might want to read &lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8?&lt;/a&gt;, and &lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;5 Java 8 Features That
You Won&amp;rsquo;t Be Able To Live Without&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can follow my tutorial on &amp;ldquo;Building Java 8 Applications with Microservices&amp;rdquo;, which is a deep dive into
the code I write in the presentation - 3 hours of material where I go into each section in a lot more detail:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://click.linksynergy.com/link?id=/zztT3fScng&amp;offerid=163217.2348574&amp;type=2&amp;murl=http%3A%2F%2Fwww.informit.com%2Ftitle%2F9780134312187&#34;&gt;&lt;IMG border=0 src=&#34;http://www.informit.com/ShowCover.aspx?isbn=9780134312187&amp;type=d&#34; &gt;&lt;/a&gt;&lt;IMG border=0 width=1 height=1 src=&#34;http://ad.linksynergy.com/fs-bin/show?id=/zztT3fScng&amp;bids=163217.2348574&amp;type=2&amp;subid=0&#34; &gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can &lt;a href=&#34;https://www.safaribooksonline.com/library/view/building-java-8/9780134312170/&#34;&gt;watch this tutorial&lt;/a&gt; with a Safari Books Online subscription.&lt;/p&gt;

&lt;p&gt;I also wrote &lt;a href=&#34;https://community.oracle.com/docs/DOC-920950&#34;&gt;an article&lt;/a&gt; for Oracle Technology Network in which I go
into some of the interesting code sections in more detail. It also shows more clearly some of the features of
IntelliJ IDEA that make the transition to Java 8 a bit easier for developers.&lt;/p&gt;

&lt;h4 id=&#34;toc_3&#34;&gt;Project code&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The full application code on the master branch branch of my &lt;a href=&#34;https://github.com/trishagee/sense/&#34;&gt;sense repository&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If you want to play along from the beginning of the demo, check out &lt;a href=&#34;https://github.com/trishagee/sense/tree/starting_point&#34;&gt;starting_point&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s a branch which shows the steps of the application as a series of &lt;a href=&#34;https://github.com/trishagee/sense/tree/steps&#34;&gt;independent steps&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You will find a whole mess of various branches. The conference names are the final working code demoed at that conference.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;The following is a list of the resources I used to create the talk, and can be used to find more information about
any of the technologies or approaches used during the presentation.&lt;/p&gt;

&lt;h4 id=&#34;toc_5&#34;&gt;Java 8 &amp;amp; Java EE Overview&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://winterbe.com/posts/2014/03/16/java-8-tutorial/&#34;&gt;Java 8 Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/1617291994/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1617291994&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=KDGWBWOK2S6FVS6F&#34;&gt;Java 8 in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/0321927761/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321927761&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=7VJH32FI5ZVEDOMW&#34;&gt;Java 8 for the Really Impatient&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/143024626X/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=143024626X&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=R75X5UJWBVYK4SV4&#34;&gt;Beginning Java EE 7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Lambdas and Streams&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/1449370772/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1449370772&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=GGWNXKE672H3G2FY&#34;&gt;Lambdas and Streams&lt;/a&gt; by Richard Warburton,  highly recommended&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.adam-bien.com/roller/abien/entry/java_8_from_ordinary_for&#34;&gt;Java 8: From ordinary for-loop to an intstream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Processing Data with Java SE 8 Streams, Part 1&lt;/a&gt;, by Raoul-Gabriel Urma&lt;/li&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/1617291994/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1617291994&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=QF2A5KBWSZALJJIZ&#34;&gt;Java 8 in Action&lt;/a&gt; also by Raoul-Gabriel Urma, and Mario Fusco &amp;amp; Alan Mycroft&lt;/li&gt;
&lt;li&gt;Code: &lt;a href=&#34;https://github.com/RichardWarburton/lambda-behave&#34;&gt;lambda-behave&lt;/a&gt;, a Java 8 testing framework&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;JavaFX&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/8/javafx/get-started-tutorial/jfx-overview.htm#JFXST784&#34;&gt;Introduction to JavaFX&lt;/a&gt; - invaluable. Short enough to download as PDF and read cover-to-cover.&lt;/li&gt;
&lt;li&gt;Building serious JavaFX Applications - Adam Bien: &lt;a href=&#34;(https://www.youtube.com/watch?v=gKU7ZeCNbqU&#34;&gt;video presentation&lt;/a&gt;, &lt;a href=&#34;https://github.com/AdamBien/lightfish&#34;&gt;code&lt;/a&gt; and &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/javafxinteg-2062777.html&#34;&gt;JavaFX Integration Strategies article&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javafx/2/threads/jfxpub-threads.htm&#34;&gt;Concurrency in JavaFX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javafx/2/collections/jfxpub-collections.htm#CIHEJJFH&#34;&gt;Using JavaFX Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javafx/2/api/javafx/fxml/doc-files/introduction_to_fxml.html&#34;&gt;Introduction to FXML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javafx/2/get_started/fxml_tutorial.htm&#34;&gt;Using FXML to Create a User Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javafx/2/fxml_get_started/fxml_tutorial_intermediate.htm&#34;&gt;Using FXML to create a Table View&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javafx/2/binding/jfxpub-binding.htm&#34;&gt;Using JavaFX properties and binding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/BinaryWebSocket/binaryWebSocket.html#section4&#34;&gt;Creating Binary WebSocket Connections with Java EE 7 and JavaFX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code: &lt;a href=&#34;https://github.com/RichardWarburton/honest-profiler&#34;&gt;honest-profiler&lt;/a&gt;, an Open Source project that uses JavaFX&lt;/li&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/0321927761/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321927761&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=7VJH32FI5ZVEDOMW&#34;&gt;Java 8 for the Really Impatient&lt;/a&gt;, includes a section on JavaFX&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_8&#34;&gt;Websockets&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/jsr356-1937161.html&#34;&gt;JSR-356, Java API for WebSocket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://java.dzone.com/articles/java-websockets-jsr-356-jetty&#34;&gt;Java WebSockets (JSR-356) on Jetty 9.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.programmingforliving.com/2013/08/jsr-356-java-api-for-websocket-client-api.html&#34;&gt;JSR 356 - Java API for Websocket (Java Client)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idrsolutions.com/2013/12/websockets-an-introduction/&#34;&gt;Introduction to Websockets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/arungupta/entry/websocket_client_and_server_endpoint&#34;&gt;Annotated Websocket Clients&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.mastertheboss.com/javaee/websockets/websockets-using-encoders-and-decoders&#34;&gt;Websockets: Using encoders and decoders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/BinaryWebSocket/binaryWebSocket.html#section4&#34;&gt;Creating Binary WebSocket Connections with Java EE 7 and JavaFX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Code: &lt;a href=&#34;https://github.com/jetty-project/embedded-jetty-websocket-examples&#34;&gt;embedded-jetty-websocket-examples&lt;/a&gt; examples of how to create Jetty Websockets&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_9&#34;&gt;Date and Time&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html&#34;&gt;Java SE 8 Date and Time&lt;/a&gt; by Ben Evans and Richard Warburton&lt;/li&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/1617291994/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1617291994&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=KDGWBWOK2S6FVS6F&#34;&gt;Java 8 in Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Book: &lt;a href=&#34;http://www.amazon.com/gp/product/0321927761/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321927761&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=7VJH32FI5ZVEDOMW&#34;&gt;Java 8 for the Really Impatient&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_10&#34;&gt;Optional&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.voxxed.com/blog/2015/02/defence-java-8s-optional-use/&#34;&gt;In Defence of Java 8&amp;rsquo;s Optional: Why and How to Use It&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_11&#34;&gt;Files&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/essential/io/file.html&#34;&gt;Reading, Writing, and Creating Files&lt;/a&gt; - much simplified since Java 7&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_12&#34;&gt;Microservices&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Martin Fowler on Microservices: &lt;a href=&#34;http://youtu.be/wgdBVIX9ifA&#34;&gt;25 minute video overview&lt;/a&gt; and &lt;a href=&#34;http://martinfowler.com/articles/microservices.html&#34;&gt;article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/introduction-microservices&#34;&gt;Introduction to Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Article &amp;amp; link to video: &lt;a href=&#34;http://www.infoq.com/articles/microservices-practical-tips&#34;&gt;Practical Implications of Microservices in 14 Tips&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_13&#34;&gt;Special Thanks To&amp;hellip;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://mechanical-sympathy.blogspot.com.es/&#34;&gt;Martin Thompson&lt;/a&gt;, &lt;a href=&#34;http://insightfullogic.com/blog/&#34;&gt;Richard Warburton&lt;/a&gt;,
&lt;a href=&#34;http://www.codingthearchitecture.com/authors/rannett/&#34;&gt;Robert Annett&lt;/a&gt; and &lt;a href=&#34;http://hadihariri.com/&#34;&gt;Hadi Hariri&lt;/a&gt; for
code reviewing and giving great suggestions. Not all suggestions have been implemented yet, so all errors are my own.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_14&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Java 9 is just around the corner, and yet many of us developers have yet to use Java 8 features in an application. The
goal of this presentation is to move beyond slide-sized examples of streams and lambdas, and to show how to build a
fully working end-to-end application using as few external dependencies as possible, and the latest version of Java.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this session, Trisha will build a Java 8 application live. This application will consume a real-time feed of high
velocity data, contain services that make sense of the data, and present it in a JavaFX dashboard. Along the way, we&amp;rsquo;ll
encounter Java 8 streams, lambdas, new ways of working with collections, and bump into the new date and time API.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Staying Ahead of the Curve</title>
      <link>https://trishagee.github.io/presentation/staying_ahead_of_the_curve/</link>
      <pubDate>Mon, 10 Nov 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/staying_ahead_of_the_curve/</guid>
      <description>

&lt;p&gt;Last Thursday I gave a keynote at
&lt;a href=&#34;http://gotocon.com/berlin-2014/presentation/Party%20Keynote:%20Staying%20Ahead%20of%20the%20Curve&#34;&gt;GOTO Berlin&lt;/a&gt; to address the problems
of deciding how to learn a new technology/framework/process (Spoiler Alert: it&amp;rsquo;s not by putting it into production).&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/qWKf3ROVgrY?list=PLEx5khR4g7PIIBNcNhHOMmOhzxcwI5joG&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/41120693&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%&#34; allowfullscreen&gt; &lt;/iframe&gt;
 

&lt;p&gt;I presented a shorter, more succinct version of this talk at &lt;a href=&#34;https://vimeo.com/139726208&#34;&gt;The Lead Developer&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During the talk I show an example of how &lt;em&gt;not&lt;/em&gt; to &lt;a href=&#34;https://gist.github.com/trishagee/a3e4a54329e94ada2fe2&#34;&gt;implement lambdas&lt;/a&gt;,
and I also demonstrate a very crude performance test for using &lt;code&gt;parallelStream&lt;/code&gt;. I&amp;rsquo;m not going to link to the performance test as it&amp;rsquo;s
not a shining example of how to write these sorts of tests, but if you&amp;rsquo;re desperate you&amp;rsquo;ll be able to find it in my Github repo.&lt;/p&gt;

&lt;p&gt;I also talk about how amazing Spock is, so if you&amp;rsquo;re interested you can read more about
&lt;a href=&#34;http://trishagee.github.io/tags/spock/&#34;&gt;my experiences with Spock&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk was built off an &lt;a href=&#34;/post/staying_ahead_of_the_curve/&#34;&gt;earlier blog post&lt;/a&gt; I wrote, about how to decide which technologies to
invest your personal time in.&lt;/p&gt;

&lt;p&gt;EDIT: The talk has been updated for 2016 and the Agile aspects emphasised in a version presented at Agile Manchester.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/Fp4LPkfAGcL8FF&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/trishagee/staying-ahead-of-the-curve-62186557&#34; title=&#34;Staying Ahead of the Curve&#34; target=&#34;_blank&#34;&gt;Staying Ahead of the Curve&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;//www.slideshare.net/trishagee&#34; target=&#34;_blank&#34;&gt;Trisha Gee&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll leave you with this crude decision
chart and the mind-map of potential ways to play with a technology. Remember, learning to say &lt;em&gt;&amp;ldquo;no&amp;rdquo;&lt;/em&gt; to a technology can be very powerful.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/staying-ahead/why-learn.png&#34; alt=&#34;Decision Flow Diagram&#34; title=&#34;Decision Flow Diagram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/staying-ahead/approaches.jpg&#34; alt=&#34;Approaches to trying new technologies&#34; title=&#34;Approaches to trying new technologies&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;PS I&amp;rsquo;m thinking of writing a book, &lt;a href=&#34;https://leanpub.com/careeradviceforprogrammers/&#34;&gt;Career Advice for Programmers&lt;/a&gt;. If you&amp;rsquo;re
interested, let me know (because, you know, I&amp;rsquo;ve got loads of spare time for another project, sigh&amp;hellip;).&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Presentation Abstract&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;We all want to stay ahead of the curve - after all, that&amp;rsquo;s what you go to a conference for. But have you ever considered how being ahead
of the curve might be dangerous?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Using a new language before you understand it, putting a technology into production so you can learn it,
abandoning &amp;ldquo;old practices&amp;rdquo; before you&amp;rsquo;ve got the benefit from them… These things are common practice,
under the guise of Progress and Keeping Up To Date.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But while we shouldn&amp;rsquo;t be running around like headless chickens chasing the next Shiny New Thing,
we do need to see to our Continuous Learning and, of course, we should Embrace Change.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How do we balance these two extremes? And how do we see to our own growth and learning as techies while meeting the needs of our
project, team and organisation?&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS, HTML5, Groovy, Java and MongoDB All Together - What Could Possibly Go Wrong??</title>
      <link>https://trishagee.github.io/presentation/angularjs_html5_groovy_java_mongodb_wcpgw/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/angularjs_html5_groovy_java_mongodb_wcpgw/</guid>
      <description>

&lt;p&gt;This year I&amp;rsquo;ve been giving an evolving live demonstration of coding a Fully Buzz Word Compliant,
mobile-friendly web application.  The aim of the demo is to show, via a real-world application rather than snippets or a toy example,
where these popular technologies sit in your architecture, and how they interact with each other.&lt;/p&gt;

&lt;p&gt;The exact code I present has changed a bit over time, the session I did for hack.summit() is the most recent:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/VyEdy-l5608&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
 

&lt;p&gt;The code is &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;available on GitHub&lt;/a&gt;.  You&amp;rsquo;ll see there are a number of different branches for the
different versions I&amp;rsquo;ve presented. The current one is the NoSQL Matters version.  With all the branches,
the commits correspond to the user stories in &lt;a href=&#34;http://www.slideshare.net/trishagee/i-want-coffeejavaone&#34;&gt;the slides&lt;/a&gt;,
so you can get a feel for how the code builds up throughout the demo.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also presented the talk as a series of &lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=/zztT3fScng&amp;offerid=145238.10000553&amp;type=3&amp;subid=0&#34;&gt;short, follow-along lessons&lt;/a&gt;. You can get 40% off the price with discount code VDEAL40.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=/zztT3fScng&amp;offerid=145238.10000553&amp;type=3&amp;subid=0&#34; target=&#34;_blank&#34;&gt;&lt;IMG border=0 src=&#34;http://www.informit.com/ShowCover.aspx?isbn=9780134070865&amp;type=d&#34; &gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the demo I don&amp;rsquo;t get much of a chance to go through the Groovy script I use to import data into MongoDB,
so I have a &lt;a href=&#34;/post/groovy_import_to_mongodb/&#34;&gt;whole blog post just on that subject&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk has been videoed several times -
some older versions use a different library to talk to MongoDB and (I hope) you&amp;rsquo;ll see that the most recent code is even simpler than
these initial demos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.parleys.com/talk/html5-angularjs-groovy-java-mongodb-together-what-could-possibly-go-wrong&#34;&gt;JavaOne, October 2014&lt;/a&gt; (uses Morphia, but the Java driver for &lt;code&gt;getNearest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MRrSAkEAnZQ&#34;&gt;vJUG, September 2014&lt;/a&gt; (the Java back end is similar to the JavaOne version, but UI for getting the nearest coffee shop is slightly different)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oscon.com/open-source-2015/public/content/2015/05/15-html5-angularjs-groovy-java-mongodb-all-together?cmp=tw-prog-na-article-os15_1431727268&#34;&gt;OSCON, July 2014&lt;/a&gt; (uses Morphia)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/presentation/interview_at_goto_chicago/&#34;&gt;GOTO Chicago, May 2014&lt;/a&gt; (there&amp;rsquo;s an interview where I explain the motivation behind the
presentation, and the video uses MongoJack instead of Morphia &amp;amp; shows an even earlier version of the find-my-coffee UI)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/demo-java-javascript-mongodb&#34;&gt;Joy of Coding, March 2014&lt;/a&gt; (only the second time I presented this
demo, shows the initial technology stack (including MongoJack) and UI).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(For a full list of this and all my presentations, see &lt;a href=&#34;presentation/public_appearances/&#34;&gt;Public Appearances&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;These are the main resources I used in creating this talk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0596805829/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596805829&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=GAJBJ3MFBCQJ2N53&#34;&gt;REST in Practice&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0596805829&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important;margin:0px!important;&#34; /&gt; - Fantastic book to get your head into the right place for RESTy web services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=i9MHigUZKEM&#34;&gt;AngularJS in 60 mins&lt;/a&gt; - a very useful introduction to building simple AngularJS apps&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/geertjan/entry/angularjs_meets_java_ee_7&#34;&gt;AngularJS meets JavaEE&lt;/a&gt; - specifically walks through connecting an
AngularJS app to a JavaEE back end using NetBeans, but the principals here are the ones I used in the cafelito application&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://angular-ui.github.io/bootstrap/&#34;&gt;UI Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dropwizard.io/&#34;&gt;Dropwizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;: remember MongoDB has &lt;a href=&#34;https://university.mongodb.com/&#34;&gt;free online courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mongodb/morphia/&#34;&gt;Morphia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt;: I liked both &lt;a href=&#34;http://www.amazon.com/gp/product/1935182447/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182447&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=ZRWVYOCX5XYURUFM&#34;&gt;Groovy in Action&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1935182447&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
and &lt;a href=&#34;http://www.amazon.com/gp/product/1935182943/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182943&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=AD26ZYRKRBBF3DHC&#34;&gt;Making Java Groovy&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1935182943&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and I&amp;rsquo;ve written about &lt;a href=&#34;/tags/spock/&#34;&gt;Spock&lt;/a&gt; before&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt;: there&amp;rsquo;s a free community version of the IDE, but it&amp;rsquo;s not very expensive to upgrade to
the full version and it will save you so much time and effort.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And remember, the &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;application code is available here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What could possibly go wrong? (GOTO Chicago)</title>
      <link>https://trishagee.github.io/presentation/interview_at_goto_chicago/</link>
      <pubDate>Tue, 12 Aug 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/interview_at_goto_chicago/</guid>
      <description>&lt;p&gt;At &lt;a href=&#34;http://gotocon.com/chicago-2014/&#34;&gt;GOTO Chicago&lt;/a&gt;, I was given the chance to chat a bit about the presentation I was giving,
which happens to be the same one I&amp;rsquo;m giving at a number of conferences this year (although of course I&amp;rsquo;m evolving it as I go along).&lt;/p&gt;

&lt;p&gt;The presentation leaves very little time for anything other than coding, as it&amp;rsquo;s quite challenging to create a full app in 50
minutes, so it was great to have the chance to talk about the motivations for the demo&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;640&#34; height=&#34;385&#34; src=&#34;http://www.youtube.com/embed/sZee7lRAUF4&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;
  

&lt;p&gt;The video of the actual talk is also available now:&lt;/p&gt;

&lt;div class=&#34;embed video-player&#34;&gt;
&lt;iframe class=&#34;youtube-player&#34; type=&#34;text/html&#34; width=&#34;640&#34; height=&#34;385&#34; src=&#34;http://www.youtube.com/embed/kmVnhyWqozA&#34; allowfullscreen frameborder=&#34;0&#34;&gt;
&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;At the beginning it doesn&amp;rsquo;t clearly show the screen, but it does improve.  You can see an earlier version from the
&lt;a href=&#34;http://www.infoq.com/presentations/demo-java-javascript-mongodb#anch110035&#34;&gt;Joy of Coding&lt;/a&gt; as well,
so if something&amp;rsquo;s not clear on one of the videos, hopefully it&amp;rsquo;s better in the other.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/trishagee/cafelito/tree/goto-chicago&#34;&gt;code for the Chicago version is on Github&lt;/a&gt;,
and if you look through the history you can see how it builds up, the same as it does in the demo.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
