<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Performance on Trisha Gee </title>
    <link>https://trishagee.github.io/tags/performance/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Fri, 03 Jun 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Applying Java 8 Idioms to Existing Code</title>
      <link>https://trishagee.github.io/presentation/refactoring_to_java_8/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/refactoring_to_java_8/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Understand how to improve performance with your Java code using Java 8 language features.&lt;/li&gt;
&lt;li&gt;Learn hands on techniques to discover and implement common Java 8 refactorings.&lt;/li&gt;
&lt;li&gt;Understand when you should and should not apply key refactorings in Java 8.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;abstract:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;While we’re drawing ever closer to Java 9, and even hearing about features in Java 10, many of us are still working with an older version. Even if your project has technically adopted Java 8, and even if you’re using it when coding new features, it’s likely that the majority of your code base is still not making the most of what’s available in Java 8 - features like Lambda Expressions, the Streams API, and new Date/Time. And this is a shame, since Java 8 provides not only nicer syntax for developers, but (usually) better application performance.&lt;/p&gt;

&lt;p&gt;In this presentation, Trisha will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight the performance benefits of using Java 8 - after all, you’ll probably have to persuade &amp;ldquo;The Management&amp;rdquo; that tampering with
existing code is worthwhile&lt;/li&gt;
&lt;li&gt;Demonstrate how to identify areas of code that can be updated to use Java 8 features, and how to pick which changes will give you the
most benefit&lt;/li&gt;
&lt;li&gt;Demonstrate how to automatically refactor your code to make use of features like lambdas and streams&lt;/li&gt;
&lt;li&gt;Cover some of the pros and cons of using the new features - including suggestions of when refactoring may NOT be the best idea.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-talk:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;The talk&lt;/h2&gt;

&lt;p&gt;Most recent version, containing performance analysis, is on the
&lt;a href=&#34;https://www.infoq.com/presentations/java8-lambda-streams&#34;&gt;InfoQ website&lt;/a&gt;, and InfoQ also has a nice summary of the &lt;a href=&#34;https://www.infoq.com/articles/qcon-new-york-2016#_Toc456084721&#34;&gt;points covered in
the talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first appearance was at &lt;a href=&#34;https://www.youtube.com/watch?v=dlzMV83RTtw&#34;&gt;DevoxxUK&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/xPhKtRN9aOsHZd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;You can purchase a more in-depth tutorial on
&lt;a href=&#34;http://www.informit.com/store/refactoring-to-modern-java-livelessons-video-training-9780134653594&#34;&gt;informIT&lt;/a&gt;, and is also available via
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/refactoring-to-modern/9780134653617/&#34;&gt;Safari Books Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The IntelliJ-specific features of some of the refactoring shown are covered in my
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;h2 id=&#34;background:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Article: &lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features You Won&amp;rsquo;t Be Able to Live Without&lt;/a&gt;&lt;br /&gt;
Video and Research: &lt;a href=&#34;https://trishagee.github.io/presentation/java8_in_anger/&#34;&gt;Building a Java 8 Application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;code:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The project we&amp;rsquo;re refactoring is &lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt;. You can see the &amp;ldquo;after&amp;rdquo; of the chosen refactorings on the
 &lt;a href=&#34;https://github.com/trishagee/morphia/tree/r2j8&#34;&gt;r2j8&lt;/a&gt; branch.&lt;/p&gt;

&lt;p&gt;The performance tests that were written and run specifically for this talk are in the &lt;a href=&#34;https://github.com/trishagee/j8-morphia-perf-tests&#34;&gt;j8-morphia-perf-tests repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;performance:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Performance&lt;/h2&gt;

&lt;h3 id=&#34;lambda-expressions:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Lambda Expressions&lt;/h3&gt;

&lt;p&gt;Video: &lt;a href=&#34;http://medianetwork.oracle.com/video/player/2623576348001&#34;&gt;Lambda Performance&lt;/a&gt; and &lt;a href=&#34;http://www.oracle
.com/technetwork/java/jvmls2013kuksen-2014088.pdf&#34;&gt;talk slides&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood&#34;&gt;Java 8 Lambdas - A Peek Under the Hood&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href=&#34;https://youtu.be/MLksirK9nnE&#34;&gt;Lambdas in Java: A Peek under the Hood - Brian Goetz&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;streams:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Streams&lt;/h4&gt;

&lt;p&gt;Video: &lt;a href=&#34;https://www.infoq.com/presentations/java8-stream-performance&#34;&gt;Let’s Get to the Rapids: Java 8 Stream Performance&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://jaxenter
.com/java-performance-tutorial-how-fast-are-the-java-8-streams-118830.html&#34;&gt;Java performance tutorial: How fast are the Java 8 streams? - Angelika Langer&lt;/a&gt; Notable Quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, the for-loop is faster that the sequential stream operation, but the difference on an ArrayList is not nearly as significant as
it was on an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will find that there is no measurable difference any more between for-loop and sequential stream if the functionality is heavily cpu
 bound.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The point to take home is that sequential streams are no faster than loops. If you use sequential streams then you don’t do it for
performance reasons; you do it because you like the functional programming style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reality check via our benchmark yields a ratio (sequential / parallel) of only 1.6 instead of 2.0, which illustrates the amount of
overhead that is involved in going parallel and how (well or poorly) it is overcompensated (on this particular platform).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this in mind it is fair to say that the performance model of streams is not a trivial one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;you need to benchmark a lot in order to find out for a given context whether going parallel is worth doing or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The realisation is: Yes, parallel stream operations are easy to use and often they run faster than sequential operations, but don’t
expect miracles. Also, don’t guess; instead, benchmark a lot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.takipi
.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/&#34;&gt;Benchmark: How Misusing Streams Can Make Your Code 5 Times Slower&lt;/a&gt; -
interesting comparison of different iteration styles.  Also shows that things like boxing might add more cost than streams (but that you
don&amp;rsquo;t realise you&amp;rsquo;re boxing)&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance/&#34;&gt;Stream Performance&lt;/a&gt; - some interesting benchmarks based on Angelika Langer&amp;rsquo;s
article&lt;br /&gt;
Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance-your-ideas/&#34;&gt;Follow up on Stream Performance&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;date-and-time:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Date and Time&lt;/h3&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://java-performance.info/jsr-310-java-8-datetime-library-performance-well-joda-time-2-3-j-u-calendar/&#34;&gt;JSR 310 – Java 8 Date/Time library performance (as well as Joda Time 2.3 and j.u.Calendar)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;benchmarking:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;Benchmarking&lt;/h3&gt;

&lt;p&gt;I used a bunch of techniques to produce the benchmarks on the talk.  I&amp;rsquo;d like to summarise them more thoroughly when I get a chance, but
for now here&amp;rsquo;s my background reading:&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&#34;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tool: &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;&lt;br /&gt;
Tool: &lt;a href=&#34;https://github.com/artyushov/idea-jmh-plugin&#34;&gt;IntelliJ JMH Plugin&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;http://java-performance.info/jmh/&#34;&gt;Introduction to JMH&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;best-practice:1d92c1fb153457538bc0d5b3070a1686&#34;&gt;&amp;ldquo;Best Practice&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I dislike the term &amp;ldquo;Best Practice&amp;rdquo; as it implies a &amp;ldquo;one size fits all&amp;rdquo; approach, and I believe that our job is to
make difficult decisions based on various pros and cons and differing situations.  However, here I will collect
resources that may help us make some of those decisions&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://martinfowler.com/articles/refactoring-pipelines.html&#34;&gt;Refactoring with Loops and Collection Pipelines&lt;/a&gt; -
Martin Fowler&lt;br /&gt;
Slides: &lt;a href=&#34;http://martinfowler.com/articles/workflowsOfRefactoring/&#34;&gt;Workflows of Refactoring&lt;/a&gt; - Martin Fowler&lt;br /&gt;
Book: &lt;a href=&#34;https://www.amazon.com/gp/product/0201485672/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201485672&amp;amp;linkId=11d0b95e050a492112eeac6fb6b2bcb0&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; - Martin Fowler&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.joda.org/2014/11/optional-in-java-se-8.html&#34;&gt;Using Optional in Java SE 8&lt;/a&gt; - Stephen Colebourne&lt;br /&gt;
Article: &lt;a href=&#34;http://zeroturnaround.com/rebellabs/java-8-best-practices-cheat-sheet/&#34;&gt;Java 8 Best Practices Cheat Sheet&lt;/a&gt; - ZeroTurnaround&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Performance Links</title>
      <link>https://trishagee.github.io/resources/performance_resources/</link>
      <pubDate>Mon, 22 Oct 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/resources/performance_resources/</guid>
      <description>&lt;p&gt;A hastily thrown-together list of some of the places to get more information on how to write performant code.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kodewerk.com/&#34;&gt;Java Performance Tuning Course&lt;/a&gt; (&lt;a href=&#34;http://kirk.blog-city.com/&#34;&gt;Kirk Pepperdine&lt;/a&gt;,
Java Champion)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaperformancetuning.com/&#34;&gt;Java Performance Tuning&lt;/a&gt; (Kirk and Jack Shirazi)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.codingthearchitecture.com/tags/nonfunctionalrequirements/&#34;&gt;Non Functional Requirements&lt;/a&gt; (&lt;a href=&#34;http://simonbrown.je/&#34;&gt;Simon Brown&lt;/a&gt;, Coding the Architecture)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yow.eventer.com/YOW-2011-1004/Tackling-the-Folklore-Surrounding-High-Performance-Computing-by-Martin-Thompson-1026&#34;&gt;Performance Myths&lt;/a&gt; (&lt;a href=&#34;http://mechanical-sympathy.blogspot.co.uk/&#34;&gt;Martin Thompson&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/Understanding-Java-Garbage-Collection&#34;&gt;Understanding Java Garbage Collection&lt;/a&gt; (&lt;a
href=&#34;https://twitter.com/giltene&#34;&gt;Gil Tene&lt;/a&gt;, Azul)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.azulsystems.com/jHiccup&#34;&gt;JHiccup&lt;/a&gt; for testing how long your system takes to do nothing (also Azul)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vanillajava.blogspot.co.uk/2012/02/high-performance-libraries-in-java.html&#34;&gt;Vanilla Java - Core Java for simpler,
faster applications&lt;/a&gt; (Peter Lawrey)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jclarity.com/friends/&#34;&gt;JClarity Performance Community&lt;/a&gt; (Ben, Martijn,
Kirk et al)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bad-concurrency.blogspot.co.uk/2012/10/talk-from-jax-london.html&#34;&gt;We Don&amp;rsquo;t Need No Stinkin&amp;rsquo; Locks&lt;/a&gt; (&lt;a
href=&#34;http://bad-concurrency.blogspot.co.uk/&#34;&gt;Mike Barker&lt;/a&gt;, LMAX)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Christmas decorations teach me a lesson about troubleshooting</title>
      <link>https://trishagee.github.io/post/christmas_decorations_teach_me_a_lesson_about_troubleshooting/</link>
      <pubDate>Tue, 17 Jan 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/christmas_decorations_teach_me_a_lesson_about_troubleshooting/</guid>
      <description>&lt;p&gt;And now, after an absence of several weeks, you get to see how long it takes me to write some of these posts.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-_IL9JCpG-YI/TxUujcWyp3I/AAAAAAAAIvg/uMQCtOKGPcs/s1600/DSC_0037.JPG&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;267&#34; src=&#34;http://2.bp.blogspot.com/-_IL9JCpG-YI/TxUujcWyp3I/AAAAAAAAIvg/uMQCtOKGPcs/s400/DSC_0037.JPG&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;I was putting up the Christmas decorations one Saturday when my worst fear was realised&lt;sup&gt;1&lt;/sup&gt; - one of my three strings of lights was not working.&lt;br /&gt;&lt;br /&gt;The first two went up fine. &amp;nbsp;The third lit up when I plugged it in, and in less than a second went out. &amp;nbsp;Curses. &amp;nbsp;This is not what I wanted, this was supposed to be a short exercise in making my tiny little flat look festive.&lt;br /&gt;&lt;br /&gt;So I set about the tedious task of starting from the end closest to the plug and replacing every bulb, one by one, with a spare one to see if it magically lit up again. &amp;nbsp;When it doesn&amp;rsquo;t, you take the spare back out and replace it with the original bulb. &amp;nbsp;I remember my parents going through this ritual every Christmas, the tediousness of this activity is more memorable than the fleeting joy of shinies.&lt;br /&gt;&lt;br /&gt;While I was doing this, my mind was back on the job I&amp;rsquo;d been doing at work the previous week - battling an Internet Explorer 7 performance problem. &amp;nbsp;We have automated performance tests which give us an indication of the load time for our application in Chrome and IE, and some time in the previous couple of weeks our IE performance had significantly degraded in the development code. &amp;nbsp;Due to a number of too-boring-to-explain-here circumstances, the last known good revision was four days and nearly 250 revisions earlier than the first revision that showed the performance problem.&lt;br /&gt;&lt;br /&gt;Since we couldn&amp;rsquo;t see anything to indicate it was an environmental problem, the logical next step was to pinpoint the revision which caused the problem, so we could either fix it or get performance gains from somewhere else in the system.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-gnC5YOnp9-8/TxUy6Y0I72I/AAAAAAAAIvo/bDlg30_CMvA/s1600/revisions1.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://3.bp.blogspot.com/-gnC5YOnp9-8/TxUy6Y0I72I/AAAAAAAAIvo/bDlg30_CMvA/s320/revisions1.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The most obvious way to do this, given there were no obvious suspects, is with a binary search of the revisions. &amp;nbsp;Our last known good revision was 081, our first poor performing one was 240. &amp;nbsp;So the thing to do is to check revision 160, see if it falls on the poor or good performance side.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-NyxMETVmxrM/TxUy6uuKWuI/AAAAAAAAIvs/HG9HdBMMZfE/s1600/revisions2.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://2.bp.blogspot.com/-NyxMETVmxrM/TxUy6uuKWuI/AAAAAAAAIvs/HG9HdBMMZfE/s320/revisions2.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;If 160 proves to be a poor performer, check revision 120&amp;hellip;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-LEjXqVBWAxM/TxUy7Ipt3UI/AAAAAAAAIv4/U4gq2gIrgzs/s1600/revisions3.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://4.bp.blogspot.com/-LEjXqVBWAxM/TxUy7Ipt3UI/AAAAAAAAIv4/U4gq2gIrgzs/s320/revisions3.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;hellip;if 160 is fine, test revision 200&amp;hellip;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-a4pDFa23AS8/TxUy8AZZL6I/AAAAAAAAIv8/YGX5b314ZPA/s1600/revisions4.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://3.bp.blogspot.com/-a4pDFa23AS8/TxUy8AZZL6I/AAAAAAAAIv8/YGX5b314ZPA/s320/revisions4.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;hellip;and keep splitting the revisions by half until you find the suspect.&lt;br /&gt;&lt;br /&gt;So of course that&amp;rsquo;s what I want to do with my stupid Christmas lights. &amp;nbsp;I do not want to sequentially check each light bulb, that has a worst-case number-of-bulbs-tried = n, where n is the number of bulbs (probably a couple of hundred, although it felt like several thousand). &amp;nbsp;So, in computer speak, O(n). &amp;nbsp;The binary search algorithm is O(log n). &amp;nbsp;At university, this Big Oh had no context for me. &amp;nbsp;But when you&amp;rsquo;ve taken 10 minutes to get a quarter of the way through your Christmas lights, and you diagnosed your IE performance problems&amp;hellip; well, actually it took days. &amp;nbsp;But the point is, a binary search for the missing bulb would definitely have been a Good Thing.&lt;br /&gt;&lt;br /&gt;I know you&amp;rsquo;re dying to know if I tracked down the problem in Internet Explorer - I did. &amp;nbsp;What&amp;rsquo;s the worst case when you&amp;rsquo;re doing a binary search? &amp;nbsp;It&amp;rsquo;s when the thing you&amp;rsquo;re looking for is veeeery close to either your start point or your end point. &lt;br /&gt;&lt;br /&gt;The revision number I was after was number 237. &amp;nbsp;Sigh.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-TKU7fyVqnxs/TxUzePYv0eI/AAAAAAAAIwI/ewwyYBPE8no/s1600/revisions5.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;88&#34; src=&#34;http://3.bp.blogspot.com/-TKU7fyVqnxs/TxUzePYv0eI/AAAAAAAAIwI/ewwyYBPE8no/s320/revisions5.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;And my Christmas tree lights? &amp;nbsp;Well, through the boredom I remembered that modern lights are in sections, so they have a sort of built-in binary search - well, limited segments will go dark if a single bulb is out - which allows you to narrow down your problem area. &amp;nbsp;Since the whole string was out, I figured something else was probably wrong.&lt;br /&gt;&lt;br /&gt;Turned out the plug had come out of the socket.&lt;br /&gt;&lt;br /&gt;So:&lt;br /&gt;&lt;b&gt;Lesson 1&lt;/b&gt;: Theoretical computer science does have a place when you care about how long something takes. &amp;nbsp;When it&amp;rsquo;s you feeling the pain, you&amp;rsquo;ll do anything to make it stop.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Lesson 2&lt;/b&gt;: When diagnosing a problem you will always biased towards what you think it is, in the face of actual evidence. &amp;nbsp;I was afraid I would have to search the whole set of lights for a blown bulb, so that&amp;rsquo;s the problem I was looking for when the lights failed. &amp;nbsp;In actual fact it was a problem with a much simpler solution.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;sup&gt;1&lt;/sup&gt; - OK, &amp;ldquo;worst fear&amp;rdquo; in this very limited context only - it&amp;rsquo;s not like I lie awake at night in July afraid that one of the bulbs on my Christmas lights has blown.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
