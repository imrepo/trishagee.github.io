<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Java on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/java/index.xml/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Thu, 29 Jan 2015 00:00:00 UTC</updated>
    
    <item>
      <title>The State of Java</title>
      <link>http://trishagee.github.io/post/svq_state_of_java_update/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/svq_state_of_java_update/</guid>
      <description>

&lt;p&gt;I think living in a beautiful city in a fantastic climate has its advantages.  Not just the obvious ones, but we
find people unusually keen to come and visit us on the pretence of presenting at the Sevilla Java User Group (and please,
DO come and present at our JUG, we &lt;em&gt;love&lt;/em&gt; visitors).&lt;/p&gt;

&lt;p&gt;This week we were really lucky, we had &lt;a href=&#34;https://twitter.com/gsaab&#34;&gt;Georges Saab&lt;/a&gt; and Aurelio Garcia-Ribeyro giving us
an update on where Java is now and where it looks like it&amp;rsquo;s going in the future.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m just starting to use Java 8 in real life, so this could not have been better timed - I got to ask the guys a bunch
of questions about the intentions behind some of the Java 8 features, and the current vision for the future.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/44036521&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt;&lt;i&gt; &lt;a href=&#34;//www.slideshare.net/trishagee/2015-java-update-and-roadmap-jug-sevilla&#34; title=&#34;2015 Java update and roadmap, JUG sevilla&#34; target=&#34;_blank&#34;&gt;2015 Java update and roadmap, JUG sevilla&lt;/a&gt; from Georges Saab and Aurelio Garcia-Ribeyro &lt;/i&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;My notes from the session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;Lambdas&lt;/a&gt; could be just a syntax change,
but they could be more than that - they could impact the language, the libraries
and the JVM. They could have a positive impact on performance, and this work can continue to go on through small
updates to Java that don&amp;rsquo;t impact the syntax.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt; are a pipeline of operations, made possible/easier/more readable by lambdas. The aim is to make operations
on collections easier and more readable.&lt;/li&gt;
&lt;li&gt;In the Old World Order, you had to care about &lt;em&gt;how&lt;/em&gt; to perform certain operations. With streams, you don&amp;rsquo;t need to
tell the computer exactly how it&amp;rsquo;s done, you can simply say what operations you want performed. This makes it easier
for developers&lt;/li&gt;
&lt;li&gt;Streams will take all the operations you pass in and perform them in a single pass of the data, so you don&amp;rsquo;t have
to write multiple loops to perform multiple operations on the same data structure, or tie your brain in knots figuring
out how to do it in one loop. There are also no intermediate data structures when you use streams.&lt;/li&gt;
&lt;li&gt;The implementation
can be optimised under the covers (e.g. not performing the &lt;code&gt;sort&lt;/code&gt; operation if the data is already ordered correctly),
and the developer doesn&amp;rsquo;t have to worry about it. Java can introduce further optimisations in later releases without
changing the API or impacting the code a developer has already written.&lt;/li&gt;
&lt;li&gt;These new features in Java have a focus on readability, since code is much more often read than written.&lt;/li&gt;
&lt;li&gt;The operations are easier to parallelise, because the developer is no longer dictating the &lt;em&gt;how&lt;/em&gt; - multiple &lt;code&gt;for&lt;/code&gt; loops
might not be easy to parallelise, but a series of operations can be.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&#34;&gt;Default methods&lt;/a&gt; and
new support for &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html#static&#34;&gt;static methods on interfaces&lt;/a&gt; are interesting.
I&amp;rsquo;d forgotten you could put static methods on interfaces and I&amp;rsquo;m going to sneak them into my latest project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html&#34;&gt;Nashorn&lt;/a&gt; is here to replace Rhino. Personally I haven&amp;rsquo;t worked in the sort of environment that would need server-side
JavaScript so this whole area has passed me by somewhat, but seems it might be interesting for Node.js or creating
a &lt;a href=&#34;http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&#34;&gt;REPL&lt;/a&gt;
in JavaScript that you want to run on the JVM.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://blogs.oracle.com/java-platform-group/entry/java_8_s_new_type&#34;&gt;additional annotation support in Java 8&lt;/a&gt;
will be useful for &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/index.html&#34;&gt;Java EE&lt;/a&gt;.  As this is something I&amp;rsquo;m currently playing
with (specifically web sockets) I&amp;rsquo;m interested in this, but it seems like it will be a while before this filters into
the Java EE that&amp;rsquo;s used on a daily basis.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html&#34;&gt;Mission Control and Flight Recorder&lt;/a&gt; - look interesting.  Feel like I should play with them.&lt;/li&gt;
&lt;li&gt;Many people are skipping straight from Java 6 to 8 - the new language features and improved performance are major driving
factors&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.java.com/en/download/faq/java_7.xml&#34;&gt;End of public updates of Java 7 in April&lt;/a&gt;. Having libraries that, um&amp;hellip; &lt;em&gt;encourage&lt;/em&gt;&amp;hellip; adoption of the latest version of
Java makes life a lot easier for those who develop the Java language, as they can concentrate on moving the language
forward and not be tied down supporting old versions.&lt;/li&gt;
&lt;li&gt;Either this is the first time I&amp;rsquo;ve heard of &lt;a href=&#34;http://www.oracle.com/technetwork/java/javadb/overview/index.html&#34;&gt;JavaDB&lt;/a&gt;,
or my memory has completely discarded it. I had no idea what it was.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk9/&#34;&gt;Java 9&lt;/a&gt; is well under way, check out the JEPs.&lt;/li&gt;
&lt;li&gt;(This is the &lt;a href=&#34;http://openjdk.java.net/jeps/1&#34;&gt;JEP process&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/&#34;&gt;Jigsaw&lt;/a&gt; was explained, and actually I could see myself using it for the project I&amp;rsquo;m working on right now. I had a look
to see if I could use it via the OpenJDK, but it looks like the groundwork is there, but not the actual modules themselves.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/tech/g1-intro-jsp-135488.html&#34;&gt;G1 Garbage Collector&lt;/a&gt; is &amp;ldquo;&amp;hellip;the go forward GC&amp;rdquo;, it&amp;rsquo;s the one that&amp;rsquo;s being actively worked on.&lt;/li&gt;
&lt;li&gt;This is the first I&amp;rsquo;ve heard of &lt;a href=&#34;http://openjdk.java.net/jeps/193&#34;&gt;Enhanced Volatiles&lt;/a&gt;, I&amp;rsquo;m so behind the times!&lt;/li&gt;
&lt;li&gt;Access to internal packages is going away in Java 9. So
&lt;a href=&#34;http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html&#34;&gt;don&amp;rsquo;t use any &lt;code&gt;sun.*&lt;/code&gt; packages&lt;/a&gt;.
Use &lt;a href=&#34;http://java.dzone.com/articles/jdeps-jdk-8-command-line&#34;&gt;jdeps&lt;/a&gt; to identify any
dependencies in your code that need to change.&lt;/li&gt;
&lt;li&gt;&amp;hellip;and, looking further ahead than Java 9, we have &lt;a href=&#34;http://openjdk.java.net/jeps/169&#34;&gt;value types&lt;/a&gt; and
&lt;a href=&#34;http://openjdk.java.net/projects/valhalla/&#34;&gt;Project Valhalla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;a &lt;a href=&#34;http://openjdk.java.net/projects/kulla/&#34;&gt;REPL for Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;possibly a &lt;a href=&#34;http://openjdk.java.net/jeps/198&#34;&gt;lightweight JSON API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and &lt;a href=&#34;http://cr.openjdk.java.net/~psandoz/varhandles/jvmls14-varHandles.pdf&#34;&gt;VarHandles&lt;/a&gt; were also mentioned.&lt;/li&gt;
&lt;li&gt;Finally, the guys mentioned a &lt;a href=&#34;http://youtu.be/2y5Pv4yN0b0&#34;&gt;talk by Brian Goetz called &amp;ldquo;Stewardship: the Sobering Parts&amp;rdquo;&lt;/a&gt;, which has gone onto my
to-watch list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_0&#34;&gt;Ideas&lt;/h4&gt;

&lt;p&gt;It became clear throughout the talk there are plenty of ideas that we could explore in later presentations.  If you want to see
any of the following, add a comment or ping me or &lt;a href=&#34;https://twitter.com/israkaos&#34;&gt;IsraKaos&lt;/a&gt; on twitter or Meetup and we&amp;rsquo;ll try and schedule it.&lt;/p&gt;

&lt;p&gt;Similarly, if you can present on any of these topics and want to come to a beautiful, sunny city with amazing food to
do so, drop me a line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The OpenJDK&lt;/li&gt;
&lt;li&gt;The JCP, the purpose, the processes, the people&lt;/li&gt;
&lt;li&gt;Adopt a JSR, Adopt OpenJDK&lt;/li&gt;
&lt;li&gt;New Date/Time (JSR310)&lt;/li&gt;
&lt;li&gt;JavaFX&lt;/li&gt;
&lt;li&gt;Code optimisation vs Data optimisation (I honestly don&amp;rsquo;t know what this means, but I wrote it down in my notes)&lt;/li&gt;
&lt;li&gt;Java EE&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Further Reading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I really liked &lt;a href=&#34;http://www.amazon.com/gp/product/1449370772/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1449370772&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=GGWNXKE672H3G2FY&#34;&gt;Richard Warburton&amp;rsquo;s Lambdas and Streams&lt;/a&gt; book&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1617291994/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1617291994&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=KDGWBWOK2S6FVS6F&#34;&gt;Java 8 in Action&lt;/a&gt; has details on other Java 8 features like Date and Time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0321927761/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321927761&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=7VJH32FI5ZVEDOMW&#34;&gt;Java 8 for the Really Impatient&lt;/a&gt; covers JavaFX too, and highlights some Java 7 features you might like&lt;/li&gt;
&lt;li&gt;Brian Goetz did a great talk last year, &lt;a href=&#34;https://www.youtube.com/watch?v=MLksirK9nnE&#34;&gt;&amp;ldquo;Lambdas in Java: A peek under the hood&amp;rdquo;&lt;/a&gt;. I had to watch it twice before even half of the info sank in, but it&amp;rsquo;s really interesting.&lt;/li&gt;
&lt;li&gt;Stephen Colebourne, the guy behind Joda time and the new Date and Time API, has &lt;a href=&#34;http://vimeo.com/87157763&#34;&gt;this talk about the new API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk9/&#34;&gt;Java 9 OpenJDK page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Workshop: AngularJS, HTML5, Groovy, Java and MongoDB</title>
      <link>http://trishagee.github.io/resources/angular_java_groovy_mongodb_workshop/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/resources/angular_java_groovy_mongodb_workshop/</guid>
      <description>

&lt;p&gt;Setup required for the AngularJS/HTML5/Groovy/Java/MongoDB tutorial for QCon London 2015.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Who is this for?&lt;/h2&gt;

&lt;p&gt;This workshop is aimed at Java developers who want to learn more about how
to rapidly prototype applications using web front-end technologies with JVM back-end technologies. The workshop may be
suitable for developers who don&amp;rsquo;t normally use Java as their primary language,
but this is &lt;em&gt;not&lt;/em&gt; an introduction to Java and familiarity with server-side development of some kind is assumed.&lt;/p&gt;

&lt;p&gt;A basic understanding of HTML and JavaScript is expected, but previous experience of Groovy or MongoDB is &lt;em&gt;not&lt;/em&gt; required.&lt;/p&gt;

&lt;p&gt;The workshop is not suitable for people who have no programming experience.&lt;/p&gt;

&lt;p&gt;This is a hands-on workshop, bring a laptop set up according to the following instructions - you will be writing code!&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I am assuming you already have a version of the Java SDK downloaded. For this workshop, Java 7 or above should work, but
I recommend you &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;download the latest version of Java 8&lt;/a&gt; if you&amp;rsquo;re not already using it.&lt;/p&gt;

&lt;p&gt;Create a new work area for this tutorial. For the rest of these instructions I&amp;rsquo;ll refer to it as &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt;.  I&amp;rsquo;ve put
 mine in &lt;code&gt;~/Projects/workshops/qcon2015&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Installing MongoDB&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m going to be using MongoDB 2.8, but version 2.6 will be fine too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.org/downloads&#34;&gt;Download MongoDB&lt;/a&gt; for your operating system and unzip/install it.  Unless you prefer to put it
somewhere else, I suggest you unzip it to &lt;code&gt;&amp;lt;location&amp;gt;/mongodb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we have to create the directory for the data to go into. Create a &lt;code&gt;data&lt;/code&gt; directory in &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt;, so that you
have a folder at &lt;code&gt;&amp;lt;location&amp;gt;/data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From the command line, start MongoDB to make sure everything is working.  From the &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt; directory:&lt;/p&gt;

&lt;h5 id=&#34;toc_3&#34;&gt;Linux/OSX&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;./mongodb/bin/mongod --dbpath data
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_4&#34;&gt;Windows:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;monogdb\bin\mongod.exe --dbpath data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
MongoDB should be running on localhost and port 27017&lt;/p&gt;

&lt;p&gt;Connect to the shell to make sure it&amp;rsquo;s working:&lt;/p&gt;

&lt;h5 id=&#34;toc_5&#34;&gt;Linux/OSX&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;./mongodb/bin/mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_6&#34;&gt;Windows&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;monogdb\bin\mongo.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
You should see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~\Projects\workshops\qcon2015&amp;gt;monogdb\bin\mongo.exe
MongoDB shell version: 2.8.0-rc5
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type &amp;quot;help&amp;quot;.
For more comprehensive documentation, see
        http://docs.mongodb.org/
Questions? Try the support group
        http://groups.google.com/group/mongodb-user
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Creating your project&lt;/h2&gt;

&lt;p&gt;Clone &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;the Cafelito project&lt;/a&gt; into &lt;code&gt;&amp;lt;location&amp;gt;/cafelito&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In a terminal/command line, navigate to this location, and run:&lt;/p&gt;

&lt;h5 id=&#34;toc_8&#34;&gt;Linux/OSX&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;./gradlew check
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_9&#34;&gt;Windows&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;gradlew.bat check
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
This should download all the required dependencies.&lt;/p&gt;

&lt;p&gt;Open in your favourite IDE and import this directory as a new project. I&amp;rsquo;ll be using
&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA 14&lt;/a&gt; and showing a number of its tricks. If you&amp;rsquo;re using IntelliJ IDEA and you
import this project as a Gradle project, you don&amp;rsquo;t even need to do the above step, IntelliJ will download and import
the dependencies for you.&lt;/p&gt;

&lt;p&gt;Feel free to use Eclipse or
Netbeans (or whatever your favourite IDE is) but I&amp;rsquo;m out of practice using those IDEs and might not be able to help you out as much.&lt;/p&gt;

&lt;h2 id=&#34;toc_10&#34;&gt;And now&amp;hellip;&lt;/h2&gt;

&lt;p&gt;You should be ready to begin: you have a working instance of MongoDB, a skeleton project that we&amp;rsquo;ll be working with, and all the
dependencies should have been downloaded.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS, HTML5, Groovy, Java and MongoDB All Together - What Could Possibly Go Wrong??</title>
      <link>http://trishagee.github.io/presentation/angularjs_html5_groovy_java_mongodb_wcpgw/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/angularjs_html5_groovy_java_mongodb_wcpgw/</guid>
      <description>

&lt;p&gt;This year I&amp;rsquo;ve been giving an evolving live demonstration of coding a Fully Buzz Word Compliant,
mobile-friendly web application.  The aim of the demo is to show, via a real-world application rather than snippets or a toy example,
where these popular technologies sit in your architecture, and how they interact with each other.&lt;/p&gt;

&lt;p&gt;The exact code I present has changed a bit over time, the session I did for hack.summit() is the most recent:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/VyEdy-l5608&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
 

&lt;p&gt;The code is &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;available on GitHub&lt;/a&gt;.  You&amp;rsquo;ll see there are a number of different branches for the
different versions I&amp;rsquo;ve presented. The current one is the NoSQL Matters version.  With all the branches,
the commits correspond to the user stories in &lt;a href=&#34;http://www.slideshare.net/trishagee/i-want-coffeejavaone&#34;&gt;the slides&lt;/a&gt;,
so you can get a feel for how the code builds up throughout the demo.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also presented the talk as a series of &lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=/zztT3fScng&amp;offerid=145238.10000553&amp;type=3&amp;subid=0&#34;&gt;short, follow-along lessons&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=/zztT3fScng&amp;offerid=145238.10000553&amp;type=3&amp;subid=0&#34; target=&#34;_blank&#34;&gt;&lt;IMG border=0 src=&#34;http://www.informit.com/ShowCover.aspx?isbn=9780134070865&amp;type=d&#34; &gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the demo I don&amp;rsquo;t get much of a chance to go through the Groovy script I use to import data into MongoDB,
so I have a &lt;a href=&#34;/post/groovy_import_to_mongodb/&#34;&gt;whole blog post just on that subject&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk has been videoed several times -
some older versions use a different library to talk to MongoDB and (I hope) you&amp;rsquo;ll see that the most recent code is even simpler than
these initial demos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MRrSAkEAnZQ&#34;&gt;vJUG, September 2014&lt;/a&gt; (uses Morphia, but the Java driver for &lt;code&gt;getNearest&lt;/code&gt;,
and a slightly different way of calling the method to get my nearest coffee shop)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/presentation/interview_at_goto_chicago/&#34;&gt;GOTO Chicago, May 2014&lt;/a&gt; (there&amp;rsquo;s an interview where I explain the motivation behind the
presentation, and the video uses MongoJack instead of Morphia &amp;amp; shows an even earlier version of the find-my-coffee UI)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/demo-java-javascript-mongodb&#34;&gt;Joy of Coding, March 2014&lt;/a&gt; (only the second time I presented this
demo, shows the initial technology stack (including MongoJack) and UI).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(For a full list of this and all my presentations, see &lt;a href=&#34;presentation/public_appearances/&#34;&gt;Public Appearances&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;These are the main resources I used in creating this talk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0596805829/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596805829&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=GAJBJ3MFBCQJ2N53&#34;&gt;REST in Practice&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0596805829&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important;margin:0px!important;&#34; /&gt; - Fantastic book to get your head into the right place for RESTy web services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=i9MHigUZKEM&#34;&gt;AngularJS in 60 mins&lt;/a&gt; - a very useful introduction to building simple AngularJS apps&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/geertjan/entry/angularjs_meets_java_ee_7&#34;&gt;AngularJS meets JavaEE&lt;/a&gt; - specifically walks through connecting an
AngularJS app to a JavaEE back end using NetBeans, but the principals here are the ones I used in the cafelito application&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://angular-ui.github.io/bootstrap/&#34;&gt;UI Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dropwizard.io/&#34;&gt;Dropwizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;: remember MongoDB has &lt;a href=&#34;https://university.mongodb.com/&#34;&gt;free online courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mongodb/morphia/&#34;&gt;Morphia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt;: I liked both &lt;a href=&#34;http://www.amazon.com/gp/product/1935182447/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182447&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=ZRWVYOCX5XYURUFM&#34;&gt;Groovy in Action&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1935182447&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
and &lt;a href=&#34;http://www.amazon.com/gp/product/1935182943/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182943&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=AD26ZYRKRBBF3DHC&#34;&gt;Making Java Groovy&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1935182943&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and I&amp;rsquo;ve written about &lt;a href=&#34;/tags/spock/&#34;&gt;Spock&lt;/a&gt; before&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt;: there&amp;rsquo;s a free community version of the IDE, but it&amp;rsquo;s not very expensive to upgrade to
the full version and it will save you so much time and effort.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And remember, the &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;application code is available here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with MongoDB and Java</title>
      <link>http://trishagee.github.io/post/getting_started_with_mongodb_and_java/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/getting_started_with_mongodb_and_java/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve been missing an introduction to using MongoDB from Java for a little while now - there&amp;rsquo;s plenty of information in &lt;a href=&#34;http://docs.mongodb.org/ecosystem/drivers/java/&#34;&gt;the
documentation&lt;/a&gt;, but we were lacking a step-by-step guide to getting started as a Java
developer.&lt;/p&gt;

&lt;p&gt;I sought to rectify this with a couple of blog posts for the MongoDB official blog: the first, an introduction to using MongoDB from
Java, including a non-comprehensive list of some of the libraries you can use; the second, an introductory guide to simple CRUD
operations using the Java driver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mongodb.org/post/94065240033/getting-started-with-mongodb-and-java-part-i&#34;&gt;Getting Started with MongoDB and Java, Part 1&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mongodb.org/post/94724924068/getting-started-with-mongodb-and-java-part-ii&#34;&gt;Getting Started with MongoDB and Java, Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is very much aimed at Java/JVM developers who are new to MongoDB, and want to get a feel for how you use it.&lt;/p&gt;

&lt;p&gt;These guides are for the current (2.x) driver. When we release 3.x, we&amp;rsquo;ll release updated guides as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sevilla Java User Group Java 8 Launch Party</title>
      <link>http://trishagee.github.io/post/svq_java8_launch_party/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/svq_java8_launch_party/</guid>
      <description>&lt;p&gt;Last night at the Sevilla JUG we officially celebrated the launch of &lt;a href=&#34;http://docs.oracle.com/javase/8/&#34;&gt;Java 8&lt;/a&gt; - yay!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/Bt48HX7IQAAQBQq.jpg:large&#34; alt=&#34;Partay&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled by the picture, people had more fun than it looks.  Honest.&lt;/p&gt;

&lt;p&gt;For anyone who missed the session, or who was there and wants access to the materials, here they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/lambda-streams-java-8&#34;&gt;The Main Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trishagee/happy-mappy&#34;&gt;Trisha&amp;rsquo;s real-life lambda code&lt;/a&gt; (the class we were looking at was &lt;code&gt;TweetDecorator&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Finally, we used the &lt;a href=&#34;http://www.slideshare.net/SimonRitter/javase8-55thingsv2-sritter&#34;&gt;slide deck&lt;/a&gt; of another of Simon&amp;rsquo;s
presentations, &lt;a href=&#34;https://www.youtube.com/watch?v=rtAredKhyac&#34;&gt;55 New Features in Java SE 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the last link is to a video from &lt;a href=&#34;http://www.meetup.com/virtualJUG/&#34;&gt;vJUG&lt;/a&gt;, the Virtual Java User Group,
which is a great source of presentations from international speakers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fiesta de lanzamiento de Java 8</title>
      <link>http://trishagee.github.io/es/post/svq_java8_launch_party/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/es/post/svq_java8_launch_party/</guid>
      <description>&lt;p&gt;Anoche, a la Sevilla JUG, hemos celebrado el lanzamiento de &lt;a href=&#34;http://docs.oracle.com/javase/8/&#34;&gt;Java 8&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/Bt48HX7IQAAQBQq.jpg:large&#34; alt=&#34;Partay&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Si te perdiste el sesion, o si quieres leer/mirar los materiales, estan aqui:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/lambda-streams-java-8&#34;&gt;The Main Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trishagee/happy-mappy&#34;&gt;Trisha&amp;rsquo;s real-life lambda code&lt;/a&gt; (&lt;code&gt;TweetDecorator&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Y usamos el &lt;a href=&#34;http://www.slideshare.net/SimonRitter/javase8-55thingsv2-sritter&#34;&gt;slide deck&lt;/a&gt; de Simon Ritter, de esta
presentation: &lt;a href=&#34;https://www.youtube.com/watch?v=rtAredKhyac&#34;&gt;55 New Features in Java SE 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Nighthacking at Sevilla Java User Group</title>
      <link>http://trishagee.github.io/post/nighthacking_jug_sevilla/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/nighthacking_jug_sevilla/</guid>
      <description>&lt;p&gt;Last Saturday &lt;a href=&#34;http://steveonjava.com/&#34;&gt;Mr Stephen Chin&lt;/a&gt; came to Sevilla on his crazy European tour to show us Lego and Robots.  This was our largest turnout yet
for a &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Java User Group&lt;/a&gt; event in Sevilla, which surprised me as it was on a weekend,
and the weekend before the spectacle that is &lt;a href=&#34;http://en.wikipedia.org/wiki/Holy_Week_in_Seville&#34;&gt;Semana
Santa&lt;/a&gt; &lt;a href=&#34;http://youtu.be/I5rnDZGNJW8&#34;&gt;in Sevilla&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is also the first event that we&amp;rsquo;ve had videoed (apologies for the horrible focus at times on the video,
I&amp;rsquo;m just learning and used to relying heavily on auto-focus).&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/q3OKs08X3oo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks very much to Stephen for visiting, and thank you to those who came, you&amp;rsquo;re making me re-think the idea of running events at
weekends.&lt;/p&gt;

&lt;p&gt;Also there are &lt;a href=&#34;http://www.meetup.com/SVQJUG/photos/all_photos/?photoAlbumId=21306622&#34;&gt;photos on Meetup&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>In my day...</title>
      <link>http://trishagee.github.io/post/in_my_day/</link>
      <pubDate>Mon, 03 Mar 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/in_my_day/</guid>
      <description>&lt;p&gt;Web development has changed a &lt;i&gt;lot&lt;/i&gt;.&lt;br /&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I was aware that there have been many changes in the last few years, and I’ve seen maturity come to web platforms in the form of standardisation and common reusable libraries and frameworks - and I don’t mean reusable in the way we used to “reuse” stuff by nicking it off other people’s websites when we saw something cool.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I used to be a web developer. &amp;nbsp;Sort of. &amp;nbsp;Some times I’ve been on the bleeding edge, and others… I remember using JavaScript to call back-end services with an XML payload before people were using the term AJAX, but I also remember working on an enterprise um… “classic”… JSP application only “recently” - in fact that was probably the last job where I did anything that looked like web development.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So this blog post is going to chart the progress of web development through my own experience.&amp;nbsp; Of course, this doesn’t by any means cover the whole spectrum, but I think my experience has been not unusual for a Java programming working through the noughties.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Over the course of my career I moved further away from the UI, because certainly early on the money and status was in “back end”, whatever that means, and not “front end”. &amp;nbsp;Which is ridiculous, really, especially as back then you couldn’t really follow best practices and clean code and test first and all that awesome stuff when doing front end development because none of the browsers played by the rules and frankly if you got it working at all you were a bloody genius. &amp;nbsp;And that’s not even considering the fact that as a “front end” developer you should be thinking about actual real human beings who use your product, and actual real human beings are messy things and understanding them is not (we’re told) traditionally a domain that we developers are naturally proficient in.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Anyway, I digress. &amp;nbsp;This was supposed to be a history lesson. &amp;nbsp;Or a nostalgia trip. &amp;nbsp;Or possibly Ranty Trish waving her walking stick in the air and shouting “You kids don’t know how good you’ve got it these days”. &amp;nbsp;If nothing else, I hope that it makes other “back end” developers like myself appreciate how much things have moved on.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Let’s go back to the olden days, before I’d even graduated: picture a time before smart phones - before phones were even common (I was horribly mocked at university for being poncy enough to have a mobile), before we knew if all this work we were doing to combat the millennium bug was going to stop the end of the world. &amp;nbsp;I was doing my first summer internship at &lt;a href=&#34;http://corporate.ford.com/&#34;&gt;Ford&lt;/a&gt;, and a contractor from Logica (who don&amp;rsquo;t seem to exist any more??) told me that if I was messing around with web pages and HTML (my friends and I had geocities-and-equivalent sites) I should look at this JavaScript thing to make my pages “dynamic”. &amp;nbsp;I didn’t have to just use GIFs to bring my page to life, I could move stuff around on the page. &amp;nbsp;I think I wrote a “you are in a crowded room”-type adventure game, because my background was BASIC and that’s what you do.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Actually I haven’t even mentioned that we were creating these websites to stay in touch with each other. &amp;nbsp;We’d discovered guest books, and used them to write comments and share stories since we’d all moved out of our home town to go to different universities. &amp;nbsp;Man, why didn’t I invent Facebook back then? &amp;nbsp;That’s what we needed.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Anyway.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;A year later, I was back at Ford doing my &lt;a href=&#34;http://en.wikipedia.org/wiki/Sandwich_degree&#34;&gt;sandwich year-in-industry&lt;/a&gt;. &amp;nbsp;The first project I worked during this time was a web-based reporting tool that needed to dynamically display hierarchical data. &amp;nbsp;We chose JavaScript trees to render this data - my year of messing around with my website paid off, and I was able to use my “cutting edge” Javascript skills in a real production environment. &amp;nbsp;Yay? &amp;nbsp;The back end was CGI - I think I was writing in Perl, but don’t tell anyone that. &amp;nbsp;I was learning Java at university, but this was a new language and I don’t think Ford was using it yet.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The next project was a very ambitious one - be the first car manufacturer to &lt;a href=&#34;http://www.brandrepublic.com/news/11990/Ford-Vauxhall-cut-online-car-prices/?HAYILC=RELATED&#34;&gt;sell new cars on the web&lt;/a&gt;. &amp;nbsp;Ford was well ahead of their time - the millennium bug had not killed us all, but people were barely buying books online, never mind spending tens of thousands of pounds on a car they’d never driven. &amp;nbsp;But it wasn’t just ahead of its time from a business point of view, technically it was very advanced too - we used lots of “DHTML” (as we were now calling it), a new-fangled technology called ASP, and we were writing modular, reusable &lt;a href=&#34;http://www.microsoft.com/com/default.mspx&#34;&gt;COM&lt;/a&gt;ponents. &amp;nbsp;We used XSLT to parse the XML from the COM objects, and the ASP figured out whether you were Netscape or Internet Explorer (Firefox wasn’t even a gleam in the inventor’s eye, and forget Chrome, I think we using &lt;a href=&#34;http://www.altavista.com/&#34;&gt;Alta Vista&lt;/a&gt; (whaaaat? AltaVista got bought by Yahoo??) not some new-fangled search engine beginning with G) so it could use the right XSLT to turn the XML into HTML that was readable by the browser you were using. &amp;nbsp;My job was to get the DHTML pages rendering and animating correctly in both IE4 and Netscape 4. &amp;nbsp;That was a lot of fun for me, but also very challenging.&amp;nbsp; And imagine my shock when a few months later I tested the site from the university UNIX machines to find that Netscape rendered it completely differently under UNIX.&amp;nbsp; I learnt a lesson about how important it was to test on different platforms.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;We had some smart Microsoft people helping us out with this project, and, because it was 2000 and the &lt;a href=&#34;http://en.wikipedia.org/wiki/Dot-com_bubble&#34;&gt;dot com crash&lt;/a&gt;&amp;nbsp;hadn’t happened just yet, we also had a lot of young, overpaid, overconfident contractors who believed anything was possible. &amp;nbsp;I learnt a lot during this time, not just about the technology, but also about different approaches to shaping your IT career. &amp;nbsp;And about how much you could earn before you were 25. &amp;nbsp;I was definitely going to be a programmer when I left university the next year.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Yeah, so… I graduated in 2001. &amp;nbsp;If you were around then, you’ll remember that getting a job was a bit more difficult than I had anticipated, especially as these young, overpaid contractors were now desperately grabbing anything they could find. &amp;nbsp;But that’s a story for another day.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I didn’t go back to Ford straight away, I’d “been there and done that”. &amp;nbsp;I worked on the website for &lt;a href=&#34;http://commonpurpose.org.uk/&#34;&gt;Common Purpose&lt;/a&gt;. &amp;nbsp;On the first day, they sat me down with &lt;a href=&#34;http://www.amazon.com/gp/product/1861003625/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1861003625&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&#34;&gt;a book on JSP and Servlets&lt;/a&gt;, and that was my reading material for the next few weeks. &amp;nbsp;If I’d been fresh out of university where we’d been doing Applets, and where I’d written a Swing app on the side for my Dad’s school, this would have been a big mindset change for me. &amp;nbsp;But having worked on the ASPs it wasn’t such a big shift. &amp;nbsp;I did, however, like how JSPs and servlets made the separation between the view and all-of-the-other-logic-stuff a bit clearer - back in ASP-land we’d settled on a convention of dealing with the form data from the previous page in the first part of the ASP, and rendering the new page in the second part. &amp;nbsp;To this day I still don’t know what we should have been doing instead. &amp;nbsp;But in JSP-land it only took me&amp;hellip; I dunno, about 6 months I think, to get the website up and running. &amp;nbsp;The most difficult section was &lt;a href=&#34;http://web.archive.org/web/20021001132257/http://www.commonpurpose.org.uk/home/apply-online.vdf&#34;&gt;registrations&lt;/a&gt;. &amp;nbsp;And yes, I was a graduate, and yes, I was new, but that was a good turnaround for a web application “in those days”.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;In my spare time I used what I’d learnt on &lt;a href=&#34;http://blews-ltb.co.uk/knot.asp&#34;&gt;the blews website&lt;/a&gt;. &amp;nbsp;I even had a section where people could log in and &lt;a href=&#34;http://web.archive.org/web/20050322033948/http://www.blews-ltb.co.uk/photographs/photo.jsp?section=20&#34;&gt;comment on photos&lt;/a&gt;&amp;nbsp;- we had whole conversations on this website. &amp;nbsp;It was a way for me and my friends to stay in touch. &amp;nbsp;If I’d cracked the photo-uploading instead of it being a manual process for me, I would have invented Facebook. &amp;nbsp;If only I’d known….&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The work dried up and there was nothing else for a graduate in the early noughties, so I went back to Ford. &amp;nbsp;My first role back I picked the same technologies we’d been using before - XML, XSLT, only this time we were using JSPs instead of ASP. &amp;nbsp;Our project had a very tight budget and we’d worked out that using open source Java technologies and running the application on one of the many UNIX machines lying around the place was a lot cheaper than the Microsoft solution. &amp;nbsp;I think we were the first team in Ford Europe to pick Java at a time when the recommended approach was Microsoft. &amp;nbsp;We delivered on time and under budget, and Java was the way forward for the department from then on. &amp;nbsp;But on this project I met a guy who would impact my career probably more than he even realises, a guy I’d work with again later. &amp;nbsp;He told me that in Java we no longer used Vector by default, but ArrayList (whaaat? What’s an &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html&#34;&gt;ArrayList&lt;/a&gt;? I had no idea what the differences were between Java 1.1, which we’d learnt at university, and Java 1.2, which was now standard). &amp;nbsp;And questioned my choice of XML/XSL. &amp;nbsp;Although I’d been learning new technologies and growing, he was the one who made it clear to me that I needed to keep myself ahead of the curve with the technologies I was using, or planned to use, if I wanted to stay relevant and make my life easier.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;On the next project I worked with a genius guy who was definitely keeping ahead of the curve - he was using JavaScript to send small XML payloads to the server (which was coded in Java), and rendering the response in place on the page instead of reloading the whole thing. &amp;nbsp;Mind. &amp;nbsp;Blown. &amp;nbsp;I didn’t even hear the term &lt;a href=&#34;http://en.wikipedia.org/wiki/Ajax_(programming)&#34;&gt;Ajax&lt;/a&gt;&amp;nbsp;until a year or more later. &amp;nbsp;We were fortunate in that this was once again an internal application, so we controlled the browser. &amp;nbsp;This was back in the days when you wanted your users to be on IE5, as this was the only browser that supported this functionality.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The next few projects/jobs I worked on were all more pedestrian variations on the JSP theme - first I learnt &lt;a href=&#34;https://struts.apache.org/release/1.3.x/userGuide/release-notes-1_1.html&#34;&gt;Struts&lt;/a&gt;, which at least made us realise there was a model, a view, and a controller. &amp;nbsp;Then at &lt;a href=&#34;http://web.archive.org/web/20050211061038/http://www.touchclarity.co.uk/&#34;&gt;Touch Clarity&lt;/a&gt; I learnt about &lt;a href=&#34;https://spring.io/blog/2004/03/24/spring-framework-1-0-final-released&#34;&gt;Spring MVC&lt;/a&gt;, which actually put the validation errors next to the boxes which cause the error - by default, without you having to mess around. &amp;nbsp;Spring was a revelation too, a framework that really tried not to get in your way. &amp;nbsp;It was also frustrating because you needed to understand its lifecycle, but it did so much heavy lifting for you, it sped up standard CRUD-app web development enormously.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;A couple of years passed, during which time I was still working on a web application (for an investment bank) but I can’t for the life of me remember what technologies we used (other than Java). &amp;nbsp;I know it was hard to test and I know the tricky stuff was “back end” not “front end”.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;In the next project where I had any control of the technology, I picked Spring since I’d had such a good experience previously. &amp;nbsp;It took 4 developers a couple of months or so to develop an admin application for a trading app. &amp;nbsp;Given the previous timescales I’d worked with, this seemed pretty good. &amp;nbsp;Until a few months later and two other guys on the project produced an admin app for our bank users in a matter of weeks. &amp;nbsp;I can’t remember what they used, maybe &lt;a href=&#34;http://grails.org/&#34;&gt;Grails&lt;/a&gt;? &amp;nbsp;But it was another demonstration of how I really should have been researching the field instead of simply sticking with what I knew, especially when I knew my knowledge was a couple of years out of date.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Fast forward to &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt;, and we were using &lt;a href=&#34;http://en.wikipedia.org/wiki/Google_Web_Toolkit&#34;&gt;GWT&lt;/a&gt;, pre-2.0 - I think this probably feels natural if you’ve been a Swing or AWT developer, but I’m still not convinced it’s a sound web platform (although I know it has improved). &amp;nbsp;It was great because cross-browser was no longer an issue, but it was bad because it separates you from the underlying HTML, which means you can &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2011/01/gwt-why-verticalpanel-is-evil.html&#34;&gt;seriously mess up without realising&lt;/a&gt;. &amp;nbsp;It’s also hard to use CSS correctly when you don’t have access to all the HTML components.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So we come to more-or-less the present day, as it should be fairly obvious that during the time I’ve been working on the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver&#34;&gt;MongoDB Java Driver&lt;/a&gt;&amp;nbsp;I haven’t done a lot of GUI development. I’m lucky because attending lots of conferences means I see a lot more of the current-trending technologies, but up until a couple of weeks ago I hadn’t had a chance to play with any of them.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So now I’ve been trying &lt;a href=&#34;http://angular.js/&#34;&gt;Angular.js&lt;/a&gt;, &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;, and &lt;a href=&#34;http://angular-ui.github.io/bootstrap/&#34;&gt;UI Bootstrap&lt;/a&gt;. &amp;nbsp;My goodness. &amp;nbsp;It’s a whole &amp;lsquo;nother world. &amp;nbsp;I’m seeing at conferences and user groups that developers are increasingly polyglot, so maybe there’s no such thing as “just” a Java developer any more, but if you are “just” a Java developer, I think it could be… interesting… to get your head around some of the techniques. &amp;nbsp;Since we don’t have closures, our callbacks are ugly and we tend not to program that way. &amp;nbsp;Async is not something that comes naturally in a Java environment, I believe, although after working that way at LMAX I’m personally sold on it. &amp;nbsp;Old-world JavaScript developers like I am/was might also find it hard to understand you can have clean, testable JavaScript code which Just Works. &amp;nbsp;It didn’t even occur to me to worry about browser compatibility, and my app not only worked on my phone as well as my laptop, but looked really phone-ish and awesome with very minimal effort.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I’m currently on a plane on the way to QCon London where I’m &lt;a href=&#34;http://qconlondon.com/london-2014/presentation/HTML5,%20Angular.js,%20Groovy,%20Java,%20MongoDB%20all%20together%20-%20what%20could%20possibly%20go%20wrong?&#34;&gt;going to demo&lt;/a&gt; this Brave New World of web development (together with a nice Java back end to prove how awesome Java is to work with and, of course, a MongoDB database). &amp;nbsp;So it is not my intention in this post to explore what this new world looks like. &amp;nbsp;But I have seen the Present, and it’s a lot better than the Past. &amp;nbsp;Kids These Days don’t know how good they’ve got it - they’ve never had to struggle, to fight the browser, to hand-craft their JavaScript like we have, or had to work with raw, low-level JSPs and Servlets.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Now things are easier. &amp;nbsp;There are standards, there are libraries, there are best practices and YouTube videos showing you &lt;a href=&#34;http://www.youtube.com/watch?v=i9MHigUZKEM&#34;&gt;how to create apps in 60 minutes&lt;/a&gt;&amp;nbsp;(back in My Day I had to borrow someone else’s browser to use the Internet, and I debated for years the value of spending my own actual money on a Javascript actual paper actual book, which I could not afford). &amp;nbsp;Now, you can get something quite pretty and functionally interesting, working in a lot less time than I realised. &amp;nbsp;But that doesn’t mean the Kids These Days have it easier - it means there is so much more potential. &amp;nbsp;Instead of beating your head against trying to get a specific version of IE to do what you want, instead of having to write separate pages for different browsers (although maybe that still goes on), you can be exploring so much further into the possible, try things that no-one else has done yet. &amp;nbsp;It opens up so many interesting possibilities for apps on all platforms.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Exciting times.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;p1&#34;&gt;So next time someone asks me “What is the de facto front-end framework for Java?” I’m going to say HTML5, CSS and JavaScript.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to MongoDB and Big Data</title>
      <link>http://trishagee.github.io/post/introduction_to_mongodb_and_big_data/</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/introduction_to_mongodb_and_big_data/</guid>
      <description>&lt;p&gt;I wrote an article for the latest edition of Java Magazine which is an introduction to MongoDB for Java developers, and a nod to why it&amp;rsquo;s good in the &amp;ldquo;Big Data&amp;rdquo; space.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tbody&gt;&lt;tr style=&#34;background-color: #d2d2d2; height: 30px;&#34;&gt;&lt;td&gt;&lt;img align=&#34;left&#34; alt=&#34;www.oracle.com/javamagazine&#34; class=&#34;navlogo&#34; src=&#34;http://images-cdn.dashdigital.com/javamagazine/include/icons/navbar_logo.gif?lm=1390425195000&#34; height=&#34;28&#34; /&gt;&lt;/td&gt;&lt;td align=&#34;right&#34; style=&#34;color: #666666; font-family: tahoma, sans-serif; font-size: 11px; font-weight: bold; line-height: 15px; padding-right: 5px;&#34;&gt;&lt;span id=&#34;top_right_text&#34;&gt;Look inside &amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;background-color: white;&#34;&gt;&lt;td align=&#34;center&#34; colspan=&#34;2&#34; style=&#34;padding: 10px 0px;&#34;&gt;&lt;a href=&#34;http://www.oraclejavamagazine-digital.com/javamagazine/jan_feb_2014?pg=52&#34; onclick=&#34;window.open(&#39;http://www.oraclejavamagazine-digital.com/javamagazine/jan_feb_2014?pg=52&#39;,&#39;sharewidget&#39;,&#39;toolbar=no,menubar=no,resizable=yes,scrollbars=yes,left=0,top=0,width=&#39;+(screen.width-10)+&#39;,height=&#39;+(screen.height-10)+&#39;&#39;);return false;&#34; target=&#34;_blank&#34; title=&#34;View Magazine&#34;&gt;&lt;img alt=&#34;51&#34; border=&#34;0&#34; src=&#34;http://images-cdn.dashdigital.com/javamagazine/jan_feb_2014/data/imgpages/smtn/0052_vyvpwu.gif?lm=1390425195000&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;background-color: #d2d2d2; height: 30px;&#34;&gt;&lt;td align=&#34;center&#34; colspan=&#34;2&#34; style=&#34;color: #666666; font-family: tahoma, sans-serif; font-size: 11px; font-weight: bold; line-height: 15px;&#34;&gt;&lt;span id=&#34;bottom_text&#34;&gt;MongoDB and Big Data&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spock: Data Driven Testing</title>
      <link>http://trishagee.github.io/post/spock_data_driven_testing/</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/spock_data_driven_testing/</guid>
      <description>&lt;p&gt;In the last two articles on Spock I&amp;rsquo;ve covered &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-is-awesome-seriously-simplified.html&#34;&gt;mocking&lt;/a&gt; and &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-passes-next-test-painless-stubbing.html&#34;&gt;stubbing&lt;/a&gt;.  And I was pretty sold on Spock just based on that.  But for a database driver, there&amp;rsquo;s a killer feature: &amp;nbsp;&lt;a href=&#34;http://docs.spockframework.org/en/latest/data_driven_testing.html&#34;&gt;Data Driven Testing&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;All developers have a tendency to think of and test the happy path.  Not least of all because that&amp;rsquo;s usually the path in the User Story - &amp;ldquo;As a customer I want to withdraw money and have the correct amount in my hand&amp;rdquo;.  We tend not to ask &amp;ldquo;what happens if they ask to withdraw money when the cash machine has no cash?&amp;rdquo; or &amp;ldquo;what happens when their account balance is zero?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;With any luck you&amp;rsquo;ll have a test suite covering your happy paths, and probably at least twice as many grumpy paths.  If you&amp;rsquo;re like me, and you like one test to test one thing (and who doesn&amp;rsquo;t?), sometimes your test classes can get quite long as you test various edge cases.  Or, much worse (and I&amp;rsquo;ve done this too) you use a calculation remarkably like the one you&amp;rsquo;re testing to generate test data.  You run your test in a loop with the calculation and lo!  The test passes.  Woohoo?&lt;br /&gt;&lt;br /&gt;Not that long ago I went through a process of re-writing a lot of unit tests that I had written a year or two before - we were about to do a big refactor of the code that generated some important numbers, and we wanted our tests to tell us we hadn&amp;rsquo;t broken anything with the refactor. The only problem was, the tests used a calculation rather similar to the production calculation, and borrowed some constants to create the expected number. &amp;nbsp;I ended up running the tests to find the numbers the test was generating as expected values, and hardcoding those values into the test. It felt dirty, but it was necessary - I wanted to make sure the refactoring didn&amp;rsquo;t change the expected numbers as well as the ones generated by the real code. &amp;nbsp;This is not a process I want to go through ever again.&lt;br /&gt;&lt;br /&gt;When you&amp;rsquo;re testing these sorts of things, you try and think of a few representative cases, code them into your tests, and hope that you&amp;rsquo;ve covered the main areas.  What would be far nicer is if you could shove a whole load of different data into your system-under-test and make sure the results look sane.&lt;br /&gt;&lt;br /&gt;An example from the Java driver is that we had tests that were checking the parsing of the URI - you can initialise your MongoDB settings simply using a String containing the URI.&lt;br /&gt;&lt;br /&gt;The old tests looked like:&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/8056046.js&#34;&gt;&lt;/script&gt; (See &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/master/src/test/com/mongodb/MongoClientURITest.java&#34;&gt;MongoClientURITest&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;Using Spock&amp;rsquo;s data driven testing, we changed this to:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/8056095.js&#34;&gt;&lt;/script&gt; (See &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/3.0.x/driver/src/test/unit/org/mongodb/MongoClientURISpecification.groovy&#34;&gt;MongoClientURISpecification&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;Instead of having a separate test for every type of URL that needs parsing, you have a single test and each line in the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;where:&lt;/span&gt; section is a new combination of input URL and expected outputs.  Each one of those lines used to be a test.  In fact, some of them probably weren&amp;rsquo;t tests as the ugliness and overhead of adding another copy-paste test seemed like overkill.  But here, in Spock, it&amp;rsquo;s just a case of adding one more line with a new input and set of outputs.&lt;br /&gt;&lt;br /&gt;The major benefit here, to me, is that it&amp;rsquo;s dead easy to add another test for a &amp;ldquo;what if?&amp;rdquo; that occurs to the developer.  You don&amp;rsquo;t have to have yet another test method that someone else is going to wonder &amp;ldquo;what the hell are we testing this for?&amp;rdquo;.  You just add another line which documents another set of expected outputs given the new input.&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s easy, it&amp;rsquo;s neat, it&amp;rsquo;s succinct.&lt;br /&gt;&lt;br /&gt;One of the major benefits of this to our team is that we don&amp;rsquo;t argue any more about whether a single test is testing too much.  In the past, we had tests like:&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/8056136.js&#34;&gt;&lt;/script&gt; And I can see why we have all those assertions in the same test, because technically these are all the same concept - make sure that each type of WriteConcern creates the correct command document.  I believe these should be one test per line - because each line in the test is testing a different input and output, and I would want to document that in the test name (&amp;ldquo;fsync write concern should have fsync flag in getLastError command&amp;rdquo;, &amp;ldquo;journalled write concern should set j flag to true in getLastError command&amp;rdquo; etc).  Also don&amp;rsquo;t forget that in JUnit, if the first assert fails, the rest of the test is not run.  Therefore you have no idea if this is a failure that affects all write concerns, or just the first one.  You lose the coverage provided by the later asserts.&lt;br /&gt;&lt;br /&gt;But the argument against my viewpoint is then we&amp;rsquo;d have seven different one-line tests.  What a waste of space.&lt;br /&gt;&lt;br /&gt;You could argue for days about the best way to do it, or that this test is a sign of some other smell that needs addressing.  But if you&amp;rsquo;re in a real world project and your aim is to both improve your test coverage and improve the tests themselves, these arguments are getting in the way of progress.  The nice thing about Spock is that you can take these tests that test too much, and turn them into something a bit prettier:&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/8056166.js&#34;&gt;&lt;/script&gt; You might be thinking, what&amp;rsquo;s the advantage over the JUnit way?  Isn&amp;rsquo;t that the same thing but Groovier?  But there&amp;rsquo;s one important difference - all the lines under &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;where:&lt;/span&gt; get run, regardless of whether the test before it passes or fails.  This basically is seven different tests, but takes up the same space as one.&lt;br /&gt;&lt;br /&gt;That&amp;rsquo;s great, but if just one of these lines fails, how do you know which one it was if all seven tests are masquerading as one?  That&amp;rsquo;s where the awesome &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;@Unroll&lt;/span&gt; annotation comes in.  This reports the passing or failing of each line as if it were a separate test.  By default, when you run an unrolled test it will get reported as something like:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-zFO5Jwl5upA/UrRgIlxq3SI/AAAAAAAAMBQ/c6WG-FhP_P4/s1600/Unroll1.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-zFO5Jwl5upA/UrRgIlxq3SI/AAAAAAAAMBQ/c6WG-FhP_P4/s1600/Unroll1.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;But in the test above we put some magic keywords into the test name: &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;&amp;lsquo;&lt;b&gt;#wc&lt;/b&gt; should return getlasterror document &lt;b&gt;#commandDocument&lt;/b&gt;&amp;lsquo;&lt;/span&gt; - note that these values with &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;#&lt;/span&gt; in front are the same headings from the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;where:&lt;/span&gt; section. They&amp;rsquo;ll get replaced by the value being run in the current test:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-2KnezQJM7R4/UrRgyNH_SHI/AAAAAAAAMBY/5TEwt2o691E/s1600/Unroll2.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-2KnezQJM7R4/UrRgyNH_SHI/AAAAAAAAMBY/5TEwt2o691E/s1600/Unroll2.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Yeah, it can be a bit of a mouthful if the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;toString&lt;/span&gt; is hefty, but it does give you an idea of what was being tested, and it&amp;rsquo;s prettier if the inputs have nice succinct string values:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-E7X8nOwjOQI/UrRiGPse7cI/AAAAAAAAMBk/7Y1-MvPvUxk/s1600/Unroll3.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-E7X8nOwjOQI/UrRiGPse7cI/AAAAAAAAMBk/7Y1-MvPvUxk/s1600/Unroll3.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This, combined with Spock&amp;rsquo;s awesome &lt;a href=&#34;http://hamletdarcy.blogspot.com.es/2009/05/new-power-assertions-in-groovy.html&#34;&gt;power assert&lt;/a&gt;&amp;nbsp;makes it dead simple to see what went wrong when one of these tests fails. &amp;nbsp;Let&amp;rsquo;s take the example of (somehow) the incorrect host being returned for one of the input URIs:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-Uoemw3QA594/UrRiQoYr_II/AAAAAAAAMBs/wJQBQa8XhOM/s1600/Unroll4.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-Uoemw3QA594/UrRiQoYr_II/AAAAAAAAMBs/wJQBQa8XhOM/s1600/Unroll4.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Data driven testing might lead one to over-test the simple things, but the cost of adding another &amp;ldquo;what if?&amp;rdquo; is so low - just another line - and the additional safety you get from trying a different input is rather nice. &amp;nbsp;We&amp;rsquo;ve been using them for parsers and simple generators, where you want to throw in a bunch of inputs to a single method and see what you get out.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m totally sold on this feature, particularly for our type of application (the Java driver does a lot of taking stuff in one shape and turning it into something else). &amp;nbsp;Just in case you want a final example, here&amp;rsquo;s a final one.&lt;br /&gt;&lt;br /&gt;The old way:&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/8057097.js&#34;&gt;&lt;/script&gt; &amp;hellip;and in Spock:&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/8057129.js&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The New 3.0 Java Driver for MongoDB</title>
      <link>http://trishagee.github.io/resources/the_new_30_java_driver_for_mongodb/</link>
      <pubDate>Mon, 09 Sep 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/resources/the_new_30_java_driver_for_mongodb/</guid>
      <description>

&lt;p&gt;Information related to the currently-ongoing effort to redesign the Java driver for MongoDB.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Links to more detailed information&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mongodb.org/post/58136652766/the-mongodb-java-driver-3-0&#34;&gt;Introduction to the changes in 3.0&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://blog.mongodb.org/post/59769560940/the-mongodb-java-driver-3-0-whats-changing&#34;&gt;How to get started with the 3.0
not-production-ready snapshot&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Presentations&lt;/h2&gt;

&lt;p&gt;Presentation from GeeCON about the design of the new MongoDB driver.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe frameborder=&#34;0&#34; height=&#34;400&#34; marginheight=&#34;0&#34; marginwidth=&#34;0&#34; scrolling=&#34;no&#34;
src=&#34;http://www.slideshare.net/slideshow/embed_code/26024765&#34; width=&#34;476&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Also available in Chinese:
&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;356&#34; marginheight=&#34;0&#34; marginwidth=&#34;0&#34; mozallowfullscreen=&#34;&#34; scrolling=&#34;no&#34; src=&#34;http://www.slideshare.net/slideshow/embed_code/24790295&#34; style=&#34;border-width: 1px 1px 0; border: 1px solid #CCC; margin-bottom: 5px;&#34; webkitallowfullscreen=&#34;&#34; width=&#34;427&#34;&gt; &lt;/iframe&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get started with the new MongoDB Java Driver</title>
      <link>http://trishagee.github.io/post/how_to_get_started_with_the_new_mongodb_java_driver/</link>
      <pubDate>Sat, 31 Aug 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/how_to_get_started_with_the_new_mongodb_java_driver/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://blog.mongodb.org/post/59769560940/the-mongodb-java-driver-3-0-whats-changing&#34;&gt;second in my short series of blogs&lt;/a&gt; about the new Java driver is now available for your perusal. &amp;nbsp;In it, there&amp;rsquo;s some guidance on how to get started using the new driver, whether you want to use the new (unfinished) API, the existing &amp;ldquo;classic&amp;rdquo; API, or a blend of both.&lt;br /&gt;&lt;br /&gt;The post also shows that &lt;a href=&#34;http://www.gradle.org/&#34;&gt;Gradle&lt;/a&gt; is prettier than &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;. &amp;nbsp;Sorry Maven.&lt;br /&gt;&lt;br /&gt;If you are going to play with the new driver, please read all the caveats carefully. &amp;nbsp;I know it looks a bit like the warnings on your prescription medicine, but it serves the same purpose. &amp;nbsp;Short version: the driver is not finished yet, and should not be used in production.&lt;br /&gt;&lt;br /&gt;We really want to hear your experiences with the driver - it is an open source project and &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; is very much driven by the community, we want to hear from you. &amp;nbsp;But only if you say nice things. &amp;nbsp;No, seriously, please tell us if you have problems, if functionality is missing, if your tests fail if you start to use it, etc etc etc.&lt;br /&gt;&lt;br /&gt;Go play.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The 3.0 Java Driver - Design Goals</title>
      <link>http://trishagee.github.io/post/the_30_java_driver__design_goals/</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/the_30_java_driver__design_goals/</guid>
      <description>&lt;p&gt;I feel slightly like a traitor to my own blog, as I&amp;rsquo;ve written a blog post for Somewhere Else. &amp;nbsp;I&amp;rsquo;ve written about the &lt;a href=&#34;http://blog.mongodb.org/post/58136652766/the-mongodb-java-driver-3-0&#34;&gt;design goals for the 3.0 MongoDB Java Driver&lt;/a&gt; in the official MongoDB blog (seems sensible, right?). &amp;nbsp;I&amp;rsquo;m not sure how I feel about cross-posting the entire contents, so I&amp;rsquo;m just linking you to them instead.&lt;br /&gt;&lt;br /&gt;Anyone who&amp;rsquo;s been to my Backwards Compatibility presentation this year might notice something familiar about the content. &amp;nbsp;The talk covers the design goals of the new driver, and this blog post will let you read them in your own time rather than having me fire them at you at 100mph.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spock passes the next test - Painless Stubbing</title>
      <link>http://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing/</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-is-awesome-seriously-simplified.html&#34;&gt;last post&lt;/a&gt; I talked about our need for some improved testing tools, our choice of &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt; as something to spike, and how mocking looks in Spock.&lt;br /&gt;&lt;br /&gt;As that blog got rather long, I saved the next installment for a separate post.&lt;br /&gt;&lt;br /&gt;Today I want to look at stubbing.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Stubbing&lt;/b&gt;&lt;br /&gt;Mocking is great for checking &lt;i&gt;outputs&lt;/i&gt; - in the example in the last post, we&amp;rsquo;re checking that the process of encoding an array calls the right things on the way out, if you like - that the right stuff gets poked onto the &lt;code&gt;bsonWriter&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;Stubbing is great for faking your &lt;i&gt;inputs&lt;/i&gt; (I don&amp;rsquo;t know why this difference never occurred to me before, but&amp;nbsp;&lt;a href=&#34;http://www.devoxx.com/display/UK13/I+hate+writing+unit+tests%2C+how+come+everybody+else+enjoys+it&#34;&gt;Colin&amp;rsquo;s talk at Devoxx UK&lt;/a&gt;&amp;nbsp;made this really clear to me). &lt;br /&gt;&lt;br /&gt;One of the things we need to do in the compatibility layer of the new driver is to wrap all the new style Exceptions that can be thrown by the new architecture layer and turn them into old-style Exceptions, for backwards compatibility purposes. &amp;nbsp;Sometimes testing the exceptional cases is&amp;hellip; challenging. &amp;nbsp;So I opted to do this with Spock.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/5935645.js&#34;&gt;&lt;/script&gt;So here we can use a real &lt;code&gt;DB&lt;/code&gt; class, but with a mock &lt;code&gt;Mongo&lt;/code&gt; that will return us a &amp;ldquo;mock&amp;rdquo; &lt;code&gt;Session&lt;/code&gt;. &amp;nbsp;It&amp;rsquo;s not actually a mock though, it&amp;rsquo;s more of a stub because we want to tell it how to behave when it&amp;rsquo;s called - in this test, we want to force it to throw an &lt;code&gt;org.mongodb.MongoException&lt;/code&gt; whenever &lt;code&gt;execute&lt;/code&gt; is called. &amp;nbsp;It doesn&amp;rsquo;t matter to us what get passed in to the execute method (that&amp;rsquo;s what the underscore means on line 16), what matters is that when it gets called it throws the correct type of Exception.&lt;br /&gt;&lt;br /&gt;Like before, the &lt;code&gt;when&lt;/code&gt;: section shows the bit we&amp;rsquo;re actually trying to test. In this case, we want to call &lt;code&gt;rename&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;Then finally the &lt;code&gt;then:&lt;/code&gt; section asserts that we received the correct sort of Exception. &amp;nbsp;It&amp;rsquo;s not enormously clear, although I&amp;rsquo;ve kept the full namespace in to try and clarify, but the aim is that any &lt;code&gt;&lt;b&gt;org&lt;/b&gt;.mongodb.MongoException&lt;/code&gt; that gets thrown by the new architecture gets turned into the appropriate &lt;code&gt;&lt;b&gt;com&lt;/b&gt;.mongodb.MongoException&lt;/code&gt;. &amp;nbsp;We&amp;rsquo;re sort of &amp;ldquo;lucky&amp;rdquo; because the old code is in the wrong package structure, and in the new architecture we&amp;rsquo;ve got a chance to fix this and put stuff into the right place.&lt;br /&gt;&lt;br /&gt;Once I&amp;rsquo;d tracked down all the places Exceptions can escape and started writing these sorts of tests to exercise those code paths, not only did I feel more secure that we wouldn&amp;rsquo;t break backwards compatibility by leaking the wrong Exceptions, but we also found our test coverage went up - and more importantly, in the &lt;i&gt;un&lt;/i&gt;happy paths, which are often harder to test.&lt;br /&gt;&lt;br /&gt;I mentioned in the last post that we already did some simple stubbing to help us test the data driver. Why not just keep using that approach?  &lt;br /&gt;&lt;br /&gt;Well, these stubs end up looking like this:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/5935655.js&#34;&gt;&lt;/script&gt;Ick.&lt;br /&gt;&lt;br /&gt;And you end up extending them so you can just override the method you&amp;rsquo;re interested in (particularly in the case of forcing a method to throw an exception). &amp;nbsp;Most irritatingly to me, these stubs live away from the actual tests, so you can&amp;rsquo;t easily see what the expected behaviour is. &amp;nbsp;In the Spock test, the expected stubbed behaviour is defined on line 16, the call that will provoke it is on line 19 and the code that checks the expectation is on line 22. &amp;nbsp;It&amp;rsquo;s all within even the smallest monitor&amp;rsquo;s window.&lt;br /&gt;&lt;br /&gt;So stubbing in Spock is painless. &amp;nbsp;Next:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://mechanitis.blogspot.com.es/2013/12/spock-data-driven-testing.html&#34;&gt;Data Driven Testing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spock is awesome! Seriously Simplified Mocking</title>
      <link>http://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking/</guid>
      <description>&lt;p&gt;We&amp;rsquo;re constantly fighting a battle when developing the new MongoDB Java driver between using tools that will do heavy lifting for us and minimising the dependencies a user has to download in order to use our driver. &amp;nbsp;Ideally, we want the number of dependencies to be zero.&lt;br /&gt;&lt;br /&gt;This is not going to be the case when it comes to testing, however. &amp;nbsp;At the very least, we&amp;rsquo;re going to use JUnit or TestNG (we used testng in the previous version, we&amp;rsquo;ve switched to JUnit for 3.0). &amp;nbsp;Up until recently, we worked hard to eliminate the need for a mocking framework - the driver is not a large application with interacting services, most stuff can be tested either as an integration test or with very simple stubs.&lt;br /&gt;&lt;br /&gt;Recently I was working on the serialisation layer - we&amp;rsquo;re making quite big changes to the model for encoding and decoding between &lt;a href=&#34;http://bsonspec.org/&#34;&gt;BSON&lt;/a&gt; and Java, we&amp;rsquo;re hoping this will simplify our lives but also make things a lot easier for the ODMs (Object-Document Mappers) and third party libraries. &amp;nbsp;At this level, it makes a lot of sense to introduce mocks - I want to ensure particular methods are called on the writer, for example, I don&amp;rsquo;t want to check actual byte values, that&amp;rsquo;s not going to be very helpful for documentation (although there is a level where that is a sensible thing to do).&lt;br /&gt;&lt;br /&gt;We started using &lt;a href=&#34;http://jmock.codehaus.org/&#34;&gt;JMock&lt;/a&gt; to begin with, it&amp;rsquo;s what I&amp;rsquo;ve been using for a while, and it gave us what we wanted - a simple mocking framework (I tried &lt;a href=&#34;https://code.google.com/p/mockito/&#34;&gt;Mockito&lt;/a&gt; too, but I&amp;rsquo;m not so used to the failure messages, so I found it really hard to figure out what was wrong when a test failed). &lt;br /&gt;&lt;br /&gt;I knew from my spies at LMAX that there&amp;rsquo;s some &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt; test framework called &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt; that is awesome, apparently, but I&amp;nbsp;immediately&amp;nbsp;discarded it - I feel very strongly that tests are documentation, and since the users of the Java driver are largely Java developers, I felt like introducing tests in a different language was an added complexity we didn&amp;rsquo;t need.&lt;br /&gt;&lt;br /&gt;Then I went to GeeCON, and my ex-colleague &lt;a href=&#34;https://twitter.com/IsraKaos&#34;&gt;Israel&lt;/a&gt; forced me to go to &lt;a href=&#34;http://geecon.org/speakers/ken-sipe&#34;&gt;the talk on Spock&lt;/a&gt;. &amp;nbsp;And I realised just how wrong I had been. &amp;nbsp;Far from adding complexity, here was a lovely, descriptive way of writing tests. &amp;nbsp;It&amp;rsquo;s flexible, and yet structured enough get you thinking in a way that should create good tests.&lt;br /&gt;&lt;br /&gt;Since we&amp;rsquo;re already using &lt;a href=&#34;http://www.gradle.org/&#34;&gt;gradle&lt;/a&gt;, which is Groovy as well, we decided it was worth a spike to see if Spock would give us any benefits.&lt;br /&gt;&lt;br /&gt;During the spike I converted a selection of our tests to Spock tests to see what it looks like on a &lt;i&gt;real&lt;/i&gt; codebase. &amp;nbsp;I had very specific things I wanted to try out:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Mocking&lt;/li&gt;&lt;li&gt;Stubbing&lt;/li&gt;&lt;li&gt;Data driven testing&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;In the talk I also saw useful annotation like&amp;nbsp;&lt;code&gt;@Requires&lt;/code&gt;, which I&amp;rsquo;m pretty sure we&amp;rsquo;re going to use, but I don&amp;rsquo;t think it&amp;rsquo;s made it into a build yet.&lt;br /&gt;&lt;br /&gt;So, get this, I&amp;rsquo;m going to write a blog post with Actual Code in. &amp;nbsp;Yeah, I know, you all thought I was just a poncy evangelist these days and didn&amp;rsquo;t do any real coding any more.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;First up, Mocking&lt;/b&gt;&lt;br /&gt;So, as I said, I have a number of tests checking that encoding of Java objects works the way we expect. &amp;nbsp; The easiest way to test this is to mock our &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/3.0.x/bson/src/main/org/bson/BSONWriter.java&#34;&gt;BSONWriter&lt;/a&gt; class to ensure that the right interactions are happening against it. &amp;nbsp;This is a nice way to check that when you give an encoder a particular set of data, it gets serialised in the way BSON expects. These tests ended up looking something like this:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/5728846.js&#34;&gt;&lt;/script&gt;&lt;/div&gt;(Yeah, I&amp;rsquo;m still learning Spanish).&lt;br /&gt;&lt;br /&gt;So that&amp;rsquo;s quite nice, my test checks that given a List of Strings, they get serialised correctly. &amp;nbsp;What&amp;rsquo;s not great is some of the setup overhead:&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/5728883.js&#34;&gt;&lt;/script&gt;Obviously some of the things there are going to be ringing some people&amp;rsquo;s alarm bells, but let&amp;rsquo;s assume for a minute that all decisions were taken carefully and that pros and cons were weighed accordingly.&lt;br /&gt;&lt;br /&gt;So:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Mocking concrete classes is not pretty in JMock, just look at that &lt;code&gt;setUp&lt;/code&gt; method.&lt;/li&gt;&lt;li&gt;We&amp;rsquo;re using the &lt;code&gt;JUnitRuleMockery&lt;/code&gt;, which appears to be Best Practice (and means you&amp;rsquo;re less likely to forget the&amp;nbsp;&lt;code&gt;@RunWith(JMock.class)&lt;/code&gt; annotation), but checkstyle hates it - Public Fields Are Bad as we all know.&lt;/li&gt;&lt;/ul&gt;But it&amp;rsquo;s fine, a small amount of boilerplate for all our tests that involve mocking is an OK price to pay to have some nice tests.&lt;br /&gt;&lt;br /&gt;I converted this test to a Spock test. &amp;nbsp;Groovy purists will notice that it&amp;rsquo;s still very Java-y, and that&amp;rsquo;s intentional - I want these tests, at least at this stage while we&amp;rsquo;re getting used to it, to be familiar to Java programmers, our main audience.&lt;br /&gt;&lt;br /&gt;&lt;script src=&#34;https://gist.github.com/trishagee/5728962.js&#34;&gt;&lt;/script&gt; Some initial observations:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;It&amp;rsquo;s a really simple thing, but I like having the&amp;nbsp;&lt;code&gt;@Subject&lt;/code&gt; annotation on the thing you&amp;rsquo;re testing. &amp;nbsp;In theory it should be obvious which of your fields or variables is the subject under test, but in practice that&amp;rsquo;s not always true.&lt;/li&gt;&lt;li&gt;Although it freaks me out as someone who&amp;rsquo;s been doing Java for the last 15 years, I really like the String for method name - although in this case it&amp;rsquo;s the same as the JMock/JUnit equivalent, it gives a lot more flexibility for describing the purpose of this test.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Mocking is painless, with a simple call to &lt;code&gt;Mock()&lt;/code&gt;, even though we&amp;rsquo;re still mocking concrete classes (this is done simply by adding &lt;a href=&#34;http://cglib.sourceforge.net/&#34;&gt;cglib&lt;/a&gt; and &lt;a href=&#34;https://code.google.com/p/objenesis/&#34;&gt;obgenesis&lt;/a&gt; to the dependencies).&lt;/li&gt;&lt;li&gt;I &lt;i&gt;love&lt;/i&gt;&amp;nbsp;that the phases of Spock (&lt;code&gt;setup: when: then:&lt;/code&gt;) document the different parts of the test while also being the useful magic keywords which tell Spock how to run the test. &amp;nbsp;I know other frameworks provide this, but we&amp;rsquo;ve been working with JUnit and I&amp;rsquo;ve been in the habit of commenting my steps with &lt;code&gt;//given //when //then&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Thanks to Groovy, creation of lists is less boiler plate (line 9). &amp;nbsp;Not a big deal, but just makes it easier to read.&lt;/li&gt;&lt;li&gt;I&amp;rsquo;ve got very used to the way expectations are set up in JMock, but I have to say that &lt;code&gt;1 * bsonWriter.blahblahblah()&lt;/code&gt; is much more readable. &amp;nbsp;&lt;/li&gt;&lt;li&gt;I love that everything after &lt;code&gt;then:&lt;/code&gt; is an assertion, I think it makes it really clear what you expect to happen after you invoke the thing you&amp;rsquo;re testing.&lt;/li&gt;&lt;/ul&gt;So mocking is awesome. &amp;nbsp;What&amp;rsquo;s next?&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-passes-next-test-painless-stubbing.html&#34;&gt;Painless Stubbing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://mechanitis.blogspot.com.es/2013/12/spock-data-driven-testing.html&#34;&gt;Data Driven Testing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
