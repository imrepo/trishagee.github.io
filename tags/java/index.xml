<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Java on Trisha Gee </title>
    <link>https://trishagee.github.io/tags/java/index.xml/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Mon, 03 Apr 2017 00:00:00 UTC</updated>
    
    <item>
      <title>Anticipating Java 9 - Functionality and Tooling</title>
      <link>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</guid>
      <description>

&lt;p&gt;Looking ahead to what functionality is available in Java 9, and IntelliJ IDEA&amp;rsquo;s support (current and future) for it.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Seems like we’ve been waiting for Java 9 for eternity.  We’ve been hearing all about Jigsaw since Java 7, so we’ll be forgiven for thinking that’s the most interesting thing about the next Java release.  What we should be wondering is, will Java 9 it change the way we develop, like Java 8 did?  Will my tools break when I try to use it? Is it worth playing with it before it comes out, or should I just wait until everything stabilises?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this talk, Trisha will take a look at some of the features in Java 9, including modularity, the REPL, and the nice new Collections features.  Trisha will demonstrate, via live coding, these features in IntelliJ IDEA, and talk a bit about the current and future support for Java 9 in IntelliJ IDEA.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Video&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eDV1JUMqMDU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/ePGXu8U5H0CSh&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;See also &lt;a href=&#34;/presentation/real_world_java_9&#34;&gt;Real World Java 9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;Download the latest Java JDK here&lt;/a&gt; (the
talk uses build 161).&lt;/p&gt;

&lt;p&gt;At the time of writing, &lt;a href=&#34;https://blog.jetbrains.com/idea/2017/03/support-for-java-9-modules-in-intellij-idea-2017-1/&#34;&gt;IntelliJ IDEA 2017.1&lt;/a&gt; comes with
basic support for jigsaw. This support will continue to evolve, so keep an eye
on the &lt;a href=&#34;https://blog.jetbrains.com/idea/&#34;&gt;IntelliJ blog&lt;/a&gt; for further updates.&lt;/p&gt;

&lt;p&gt;The Jigsaw code I used was from a workshop by Brian Goetz.  But to start playing with Jigsaw, take a look at
the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Getting Started tutorial&lt;/a&gt;.  I used the &lt;a href=&#34;https://java.net/downloads/adoptopenjdk/REPL_Tutorial.pdf&#34;&gt;Java REPL
Tutorial&lt;/a&gt; to help me get started with JShell.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Help &amp;amp; Feedback&lt;/h2&gt;

&lt;p&gt;Get help and more information on JDK 9 from the
&lt;a href=&#34;https://community.oracle.com/community/java/java_desktop/java-se-early-access&#34;&gt;Oracle Community feedback forum&lt;/a&gt;. If you find a genuine
bug in the JDK, &lt;a href=&#34;http://bugreport.java.com/&#34;&gt;report it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can report bugs and request features for IntelliJ IDEA in
&lt;a href=&#34;https://youtrack.jetbrains.com/issues/idea/&#34;&gt;YouTrack&lt;/a&gt;. Some Java 9 tickets you may be interested in:&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161611&#34;&gt;IDEA-161611: Java REPL support for Java 9&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-154240&#34;&gt;IDEA-154240: IDEA should work with JDK module system&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161641&#34;&gt;IDEA-161641: Produce JLink Artefacts&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;More information&lt;/h2&gt;

&lt;p&gt;Joseph Darcy&amp;rsquo;s talk on
&lt;a href=&#34;https://youtu.be/vKYzmIi_1LM&#34;&gt;JDK 9 Language, Tooling and Library Features&lt;/a&gt; from JavaOne is a good summary of what&amp;rsquo;s coming (&lt;a href=&#34;https://blogs.oracle.com/darcy/resource/JavaOne/J1_2016-jdk9-lang-tools-libs.pdf&#34;&gt;slides
also available&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://static.rainfocus.com/oracle/oraclecode17/sess/1485992822413001Yd6N/PF/Cool%20in%20Java%208,%20and%20new%20in%20Java%209.pdf&#34;&gt;What is cool in Java 8 and new in 9&lt;/a&gt;(Slides: Java 9 content starts at Slide 40)&lt;/p&gt;

&lt;p&gt;The OpenJDK wiki provides &lt;a href=&#34;https://wiki.openjdk.java.net/display/Adoption/JDK+9+Outreach&#34;&gt;guidance on running your code with Java 9&lt;/a&gt;, and a
&lt;a href=&#34;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&#34;&gt;list of libraries and frameworks who are currently testing against Java 9&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Real World Java 9</title>
      <link>https://trishagee.github.io/presentation/real_world_java_9/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/real_world_java_9/</guid>
      <description>

&lt;p&gt;How is Java 9 going to change the way developers work?&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The feature we always hear about whenever Java 9 is in the news is Jigsaw,
modularity.  But this doesn&amp;rsquo;t scratch the
same developer itch that Java 8&amp;rsquo;s lambdas and streams did, and we&amp;rsquo;re left
with a vague sensation that the next version might not be that interesting.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Java 9 actually has a lot of great additions and changes to make development
 a bit nicer.  These features can&amp;rsquo;t be lumped under an umbrella term like
 Java 8&amp;rsquo;s lambdas and streams, the changes are scattered throughout the APIs and language features that we regularly use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this presentation Trisha will show, via live coding:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;How we can use the new Flow API to utilise Reactive Programming&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How the improvements to the Streams API make it easier to control
real-time streaming data&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How to the Collections convenience methods simplify code&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Along the way we&amp;rsquo;ll bump into other Java 9 features, including some of the
additions to interfaces and changes to deprecation.  We’ll see that once you
start using Java 9, you can&amp;rsquo;t go back to Before.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;##Video
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/GkP83hvdeMk&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/CFW6Y9uyF181yV&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;The code for this presentation was originally created to demonstrate Java 8 code in
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 in Anger&lt;/a&gt;, take a look at the videos there to see more background on the application and how it used Java 8 Streams and Lambda Expressions for the core business logic. The code and the presentation
evolved &lt;a href=&#34;https://youtu.be/sKozumGWAOo&#34;&gt;to include some Java 9 features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have another Java 9 talk based off this code, &lt;a href=&#34;/presentation/java_9_are_we_there_yet&#34;&gt;Anticipating Java 9 - Functionality and Tooling&lt;/a&gt;, which demos more individual Java 9 features and talks specifically about IntelliJ IDEA&amp;rsquo;s support for it.&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trishagee/sense-nine&#34;&gt;https://github.com/trishagee/sense-nine&lt;/a&gt;.
The full application with all Java 9 code is currently under the
&lt;em&gt;working-system&lt;/em&gt; branch, the presentation builds off the code in &lt;em&gt;start_point&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Original Java 8 code comes from &lt;a href=&#34;https://github.com/trishagee/sense&#34;&gt;https://github.com/trishagee/sense&lt;/a&gt;, the &lt;em&gt;master&lt;/em&gt; branch has the most up-to-date final working Java 8 application.  JUnit 5 tests come from the &lt;em&gt;junit-5&lt;/em&gt; branch. Java 8 and 9 features live side-by-side in &lt;em&gt;yow-brisbane&lt;/em&gt;. That app was built with Java build 9-ea+146, but does not work with build 9-ea+156&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;IntelliJ IDEA&lt;/h3&gt;

&lt;p&gt;The earlier version of this talk runs on IntelliJ IDEA 2017.1, which supports
Jigsaw much better than earlier versions.  However, I&amp;rsquo;m currently using
&lt;a href=&#34;https://www.jetbrains.com/idea/nextversion/&#34;&gt;2017.2 EAP&lt;/a&gt; as later versions
of Java 9 do not play nicely with earlier versions of IntelliJ.  The current
combo I have working is Java 9 build 9-ea+166 and
IntelliJ IDEA Build #IU-172.2103.15.&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Java 9&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk9/&#34;&gt;JDK 9 Project Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;Download JDK 9 EA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.rainfocus.com/oracle/oraclecode17/sess/1485992822413001Yd6N/PF/Cool%20in%20Java%208,%20and%20new%20in%20Java%209.pdf&#34;&gt;What is cool in Java 8 and new in 9&lt;/a&gt;(Slides: Java 9 content starts at Slide 40)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/ultimate-guide-to-java-9/&#34;&gt;The Ultimate Guide to Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-i/&#34;&gt;Inside Java 9 – Version Schema, Multi-Release JARs, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-ii/&#34;&gt;Inside Java 9 – Performance, Compiler, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://download.java.net/java/jdk9/docs/index.html&#34;&gt;Java Platform Standard Edition 9 Early Access Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/overview-summary.html&#34;&gt;Java 9 Javadoc&lt;/a&gt; (note the new search feature!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;Jigsaw&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/&#34;&gt;Project Jigsaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Quick Start Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/spec/sotms/&#34;&gt;The State of the Module System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mreinhold.org/blog/jigsaw-module-system&#34;&gt;Project Jigsaw: The module system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/Latest-Project-Jigsaw-Usage-Tutorial&#34;&gt;Programming with Modularity and Project Jigsaw. A Tutorial Using the Latest Early Access Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2015/11/first-steps-with-java9-jigsaw-part-1&#34;&gt;First steps with Java 9 and Project Jigsaw – Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2015/12/first-steps-with-java9-jigsaw-part-2/&#34;&gt;First steps with Java 9 and Project Jigsaw – Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jdeps.html&#34;&gt;Jdeps Tool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joda.org/2017/04/java-se-9-jpms-modules-are-not-artifacts.html?m=1&#34;&gt;Java SE 9 - JPMS modules are not artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/czhSo8rotC4&#34;&gt;Migrating to Modules&lt;/a&gt; (video) Highly recommended.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Reactive Programming and RxJava&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;Reactive Streams API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reactive-streams.org/announce-1.0.0#implementations&#34;&gt;Reactive Streams Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.oracle.com/docs/DOC-1006738&#34;&gt;Reactive Programming with JDK 9 Flow API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxJava/wiki&#34;&gt;RxJava Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/rxjava2-by-example&#34;&gt;RXJava2 by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vogella.com/tutorials/RxJava/article.html&#34;&gt;RxJava 2.0 - Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/rxjava-for-easy-concurrency-and-backpressure&#34;&gt;RxJava for easy concurrency and backpressure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.danlew.net/2016/06/13/multicasting-in-rxjava/&#34;&gt;Multicasting in RxJava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/streams-jdk&#34;&gt;Reactive Streams, j.u.concurrent, &amp;amp; beyond!&lt;/a&gt; (video)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/blog/2016/04/19/understanding-reactive-types&#34;&gt;Understanding Reactive Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/rolandkuhn/reactive-streams&#34;&gt;Reactive Streams: Handling Data-Flow the Reactive Way&lt;/a&gt;(slides)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/reactor-by-example/&#34;&gt;Reactor by Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Multi-Release JAR Files&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/238&#34;&gt;JEP 238&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-i/#multireleasejars&#34;&gt;Simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thoughtfulsoftware.wordpress.com/2016/08/22/java-9-multi-release-jar-files-part-ii/&#34;&gt;Multi-release JAR files tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;Stack-Walking API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/259&#34;&gt;JEP 259&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/deep-dive-into-java-9s-stack-walking-api/&#34;&gt;Deep Dive into the Stack-Walking API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3188289/core-java/java-9s-other-new-enhancements-part-5-stack-walking-api.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 5: Stack-Walking API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Process API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/102&#34;&gt;JEP 102&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3176874/java-language/java-9s-other-new-enhancements-part-3.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 3: The Process API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iteratrlearning.com/java/2017/03/12/java9-process-api.html&#34;&gt;Java 9 Process API: The Shape of Things to Come&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;REPL&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/kulla/&#34;&gt;REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/&#34;&gt;Java 9 REPL – Getting started guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_12&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/gof-design-patterns-using-java-02&#34;&gt;GoF - Adapter Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Code Review Matters and Manners</title>
      <link>https://trishagee.github.io/presentation/code_review_matters_and_manners/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/code_review_matters_and_manners/</guid>
      <description>

&lt;p&gt;Content and resources for the Code Review Matters and Manners talk, including links to additional information and
supporting material.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;A code review is basically a technical discussion which should lead to improvements in the code and/or sharing
knowledge in a team. As with any conversation, it should have substance and form.&lt;/p&gt;

&lt;p&gt;What’s involved in a good code review? What kind of problems do we want to spot and address? Trisha Gee will talk
about things a reviewer may consider when looking at changes:  what potential issues to look for; why certain
patterns may be harmful; and, of course, what NOT to look at.&lt;/p&gt;

&lt;p&gt;But when it comes to commenting on someone’s work, it may be hard to find the right words to convey a useful message
without offending the authors - after all, this is something that they worked hard on. Maria Khalusova will share
some observations, thoughts and practical tricks on how to give and receive feedback without turning a code review
into a battlefield.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/182087729&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/7wG1iGAnGsQ4F6&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;More Information&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Books&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;What to Look for in a Code Review&lt;/a&gt; - Trisha Gee (free!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=4f2f97b38b1e19961a4425340aef003b&#34;&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0735619670&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Steve McConnell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=86afa947570d6d5c8d03f7c4d495c449&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0132350882&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Robert C. Martin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/&#34;&gt;What to look for in a Code Review&lt;/a&gt;, the article that started all of this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/03/what-to-look-for-in-a-code-review-tests/&#34;&gt;What to look for in a Code Review: Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/06/what-to-look-for-in-a-code-review-performance/&#34;&gt;What to look for in a Code Review: Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/20/what-to-look-for-in-a-code-review-data-structures/&#34;&gt;What to look for in a Code Review: Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/31/what-to-look-for-in-a-code-review-solid-principles-2/&#34;&gt;What to look for in a Code Review: SOLID Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/05/what-to-look-for-in-a-code-review-security/&#34;&gt;What to look for in a Code Review: Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/19/what-to-look-for-in-a-code-review-upsource-quick-wins/&#34;&gt;What to look for in a Code Review: Upsource Quick Wins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2016/08/03/what-to-look-for-in-java-8-code/&#34;&gt;What to look for in: Java 8 code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/code-reviews-just-do-it/&#34;&gt;Code Reviews: Just Do It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.fullstory.com/what-we-learned-from-google-code-reviews-arent-just-for-catching-bugs-b125a13aa292#.mktgod79l&#34;&gt;What we learned from Google: code reviews aren’t just for catching bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infragistics.com/community/blogs/erikdietrich/archive/2016/06/29/the-human-cost-of-tech-debt.aspx&#34;&gt;The Human Cost of Tech Debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2016/06/21/pick-battles-software-team/&#34;&gt;How to Pick Your Battles on a Software Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;And, of course&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can &lt;a href=&#34;https://www.jetbrains.com/upsource/&#34;&gt;download Upsource&lt;/a&gt;, it&amp;rsquo;s free for up to 10 users.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Applying Java 8 Idioms to Existing Code</title>
      <link>https://trishagee.github.io/presentation/refactoring_to_java_8/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/refactoring_to_java_8/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Understand how to improve performance with your Java code using Java 8 language features.&lt;/li&gt;
&lt;li&gt;Learn hands on techniques to discover and implement common Java 8 refactorings.&lt;/li&gt;
&lt;li&gt;Understand when you should and should not apply key refactorings in Java 8.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;While we’re drawing ever closer to Java 9, and even hearing about features in Java 10, many of us are still working with an older version. Even if your project has technically adopted Java 8, and even if you’re using it when coding new features, it’s likely that the majority of your code base is still not making the most of what’s available in Java 8 - features like Lambda Expressions, the Streams API, and new Date/Time. And this is a shame, since Java 8 provides not only nicer syntax for developers, but (usually) better application performance.&lt;/p&gt;

&lt;p&gt;In this presentation, Trisha will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight the performance benefits of using Java 8 - after all, you’ll probably have to persuade &amp;ldquo;The Management&amp;rdquo; that tampering with
existing code is worthwhile&lt;/li&gt;
&lt;li&gt;Demonstrate how to identify areas of code that can be updated to use Java 8 features, and how to pick which changes will give you the
most benefit&lt;/li&gt;
&lt;li&gt;Demonstrate how to automatically refactor your code to make use of features like lambdas and streams&lt;/li&gt;
&lt;li&gt;Cover some of the pros and cons of using the new features - including suggestions of when refactoring may NOT be the best idea.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;p&gt;Most recent version, containing performance analysis, is on the
&lt;a href=&#34;https://www.infoq.com/presentations/java8-lambda-streams&#34;&gt;InfoQ website&lt;/a&gt;, and InfoQ also has a nice summary of the &lt;a href=&#34;https://www.infoq.com/articles/qcon-new-york-2016#_Toc456084721&#34;&gt;points covered in
the talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first appearance was at &lt;a href=&#34;https://www.youtube.com/watch?v=dlzMV83RTtw&#34;&gt;DevoxxUK&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/xPhKtRN9aOsHZd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;You can purchase a more in-depth tutorial on
&lt;a href=&#34;http://www.informit.com/store/refactoring-to-modern-java-livelessons-video-training-9780134653594&#34;&gt;informIT&lt;/a&gt;, and is also available via
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/refactoring-to-modern/9780134653617/&#34;&gt;Safari Books Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The IntelliJ-specific features of some of the refactoring shown are covered in my
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Article: &lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features You Won&amp;rsquo;t Be Able to Live Without&lt;/a&gt;&lt;br /&gt;
Video and Research: &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Building a Java 8 Application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The project we&amp;rsquo;re refactoring is &lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt;. You can see the &amp;ldquo;after&amp;rdquo; of the chosen refactorings on the
 &lt;a href=&#34;https://github.com/trishagee/morphia/tree/r2j8&#34;&gt;r2j8&lt;/a&gt; branch.&lt;/p&gt;

&lt;p&gt;The performance tests that were written and run specifically for this talk are in the &lt;a href=&#34;https://github.com/trishagee/j8-morphia-perf-tests&#34;&gt;j8-morphia-perf-tests repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Performance&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Lambda Expressions&lt;/h3&gt;

&lt;p&gt;Video: &lt;a href=&#34;http://medianetwork.oracle.com/video/player/2623576348001&#34;&gt;Lambda Performance&lt;/a&gt; and &lt;a href=&#34;http://www.oracle
.com/technetwork/java/jvmls2013kuksen-2014088.pdf&#34;&gt;talk slides&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood&#34;&gt;Java 8 Lambdas - A Peek Under the Hood&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href=&#34;https://youtu.be/MLksirK9nnE&#34;&gt;Lambdas in Java: A Peek under the Hood - Brian Goetz&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Streams&lt;/h4&gt;

&lt;p&gt;Video: &lt;a href=&#34;https://www.infoq.com/presentations/java8-stream-performance&#34;&gt;Let’s Get to the Rapids: Java 8 Stream Performance&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://jaxenter
.com/java-performance-tutorial-how-fast-are-the-java-8-streams-118830.html&#34;&gt;Java performance tutorial: How fast are the Java 8 streams? - Angelika Langer&lt;/a&gt; Notable Quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, the for-loop is faster that the sequential stream operation, but the difference on an ArrayList is not nearly as significant as
it was on an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will find that there is no measurable difference any more between for-loop and sequential stream if the functionality is heavily cpu
 bound.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The point to take home is that sequential streams are no faster than loops. If you use sequential streams then you don’t do it for
performance reasons; you do it because you like the functional programming style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reality check via our benchmark yields a ratio (sequential / parallel) of only 1.6 instead of 2.0, which illustrates the amount of
overhead that is involved in going parallel and how (well or poorly) it is overcompensated (on this particular platform).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this in mind it is fair to say that the performance model of streams is not a trivial one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;you need to benchmark a lot in order to find out for a given context whether going parallel is worth doing or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The realisation is: Yes, parallel stream operations are easy to use and often they run faster than sequential operations, but don’t
expect miracles. Also, don’t guess; instead, benchmark a lot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.takipi
.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/&#34;&gt;Benchmark: How Misusing Streams Can Make Your Code 5 Times Slower&lt;/a&gt; -
interesting comparison of different iteration styles.  Also shows that things like boxing might add more cost than streams (but that you
don&amp;rsquo;t realise you&amp;rsquo;re boxing)&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance/&#34;&gt;Stream Performance&lt;/a&gt; - some interesting benchmarks based on Angelika Langer&amp;rsquo;s
article&lt;br /&gt;
Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance-your-ideas/&#34;&gt;Follow up on Stream Performance&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Date and Time&lt;/h3&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://java-performance.info/jsr-310-java-8-datetime-library-performance-well-joda-time-2-3-j-u-calendar/&#34;&gt;JSR 310 – Java 8 Date/Time library performance (as well as Joda Time 2.3 and j.u.Calendar)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Benchmarking&lt;/h3&gt;

&lt;p&gt;I used a bunch of techniques to produce the benchmarks on the talk.  I&amp;rsquo;d like to summarise them more thoroughly when I get a chance, but
for now here&amp;rsquo;s my background reading:&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&#34;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tool: &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;&lt;br /&gt;
Tool: &lt;a href=&#34;https://github.com/artyushov/idea-jmh-plugin&#34;&gt;IntelliJ JMH Plugin&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;http://java-performance.info/jmh/&#34;&gt;Introduction to JMH&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;&amp;ldquo;Best Practice&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I dislike the term &amp;ldquo;Best Practice&amp;rdquo; as it implies a &amp;ldquo;one size fits all&amp;rdquo; approach, and I believe that our job is to
make difficult decisions based on various pros and cons and differing situations.  However, here I will collect
resources that may help us make some of those decisions&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://martinfowler.com/articles/refactoring-pipelines.html&#34;&gt;Refactoring with Loops and Collection Pipelines&lt;/a&gt; -
Martin Fowler&lt;br /&gt;
Slides: &lt;a href=&#34;http://martinfowler.com/articles/workflowsOfRefactoring/&#34;&gt;Workflows of Refactoring&lt;/a&gt; - Martin Fowler&lt;br /&gt;
Book: &lt;a href=&#34;https://www.amazon.com/gp/product/0201485672/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201485672&amp;amp;linkId=11d0b95e050a492112eeac6fb6b2bcb0&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; - Martin Fowler&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.joda.org/2014/11/optional-in-java-se-8.html&#34;&gt;Using Optional in Java SE 8&lt;/a&gt; - Stephen Colebourne&lt;br /&gt;
Article: &lt;a href=&#34;http://zeroturnaround.com/rebellabs/java-8-best-practices-cheat-sheet/&#34;&gt;Java 8 Best Practices Cheat Sheet&lt;/a&gt; - ZeroTurnaround&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 3 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session3/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session3/</guid>
      <description>&lt;p&gt;Last night was the final get-together to discuss the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt;. Any
event hosted in August in a city that is regularly over 40&amp;deg;C is going to face challenges, so it was great that
we had attendees from earlier sessions plus new people too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/java8mooc/lesson3.jpg&#34; alt=&#34;Woohoo lambdas!&#34; title=&#34;Woohoo lambdas!&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The aim of this session was to talk about Lesson 3, but also to wrap up the course as a whole: to talk about what we
liked and what we would have improved (about both the course itself and our user group events).&lt;/p&gt;

&lt;p&gt;As in the previous &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;/post/java_8_mooc_session2&#34;&gt;posts&lt;/a&gt;, let&amp;rsquo;s outline our
discussion areas:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findAny--&#34;&gt;findAny()&lt;/a&gt;
vs &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findFirst--&#34;&gt;findFirst()&lt;/a&gt;&lt;/strong&gt;: Why do we
need both of these methods, and when would you use them?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;findFirst()&lt;/code&gt; is the deterministic version, which will return you the first element in the Stream (according to
encounter order - see the section on
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;Ordering in the documentation&lt;/a&gt;).
So, regardless of whether you run the operation in parallel or serial, if you&amp;rsquo;re looking for &amp;ldquo;A&amp;rdquo; and use &lt;code&gt;findFirst&lt;/code&gt;
with this list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;rsquo;ll get the element at index 3 - the first &amp;ldquo;A&amp;rdquo; in the list.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;findAny()&lt;/code&gt; is non-deterministic, so will return you any element that matches your criteria - it could return the
element at index 3, or the one at position 6. Realistically, if the stream is on an ordered collection like a list,
when you run &lt;code&gt;findAny&lt;/code&gt; on a sequential stream, I expect it will return the same result as &lt;code&gt;findFirst&lt;/code&gt;.  The real
use-case for &lt;code&gt;findAny&lt;/code&gt; is when you&amp;rsquo;re running this on a parallel stream. Let&amp;rsquo;s take the above list, and assume that
when you run this on a parallel stream it&amp;rsquo;s processed by two separate threads:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;,    // processed by thread 1 
 &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]     // processed by thread 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible that thread 2 finds its &amp;ldquo;A&amp;rdquo; (the one at position 6) before thread 1 finds the one at position 3, so
this will be value that&amp;rsquo;s returned. By configuring the Stream to return any one of the values that matches the
criteria, you can potentially execute the operation faster when running in parallel.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;findAny&lt;/code&gt; is (potentially) faster in parallel and (probably) returns the same value as &lt;code&gt;findFirst&lt;/code&gt; when running in
serial, why not use that all the time?  Well, there are times when you really do want the first item. If you have a
list of DVDs ordered by year the film was released, and you want to find the original &amp;ldquo;King Kong&amp;rdquo; (for
example), you&amp;rsquo;ll want &lt;code&gt;findFirst&lt;/code&gt; to find the one released in 1933, not the one that was released in 1976 or the
one from 2005.&lt;/p&gt;

&lt;p&gt;Plus, &lt;code&gt;findFirst&lt;/code&gt; is not always going to be slower than &lt;code&gt;findAny&lt;/code&gt;, even in parallel.  Going back to our list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trying to &lt;code&gt;findFirst&lt;/code&gt; or &lt;code&gt;findAny&lt;/code&gt; for &amp;ldquo;H&amp;rdquo; could be the same performance for both methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collectors&lt;/strong&gt;: Maybe it&amp;rsquo;s just me who doesn&amp;rsquo;t really see the big picture for collectors.  I&amp;rsquo;m perfectly content with
the built in collectors like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toList())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toSet())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s easy to see what they do, and work out when you need to use them.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also very happy to have discovered &lt;code&gt;joining&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.joining(&amp;quot;,&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a super-useful way to create Comma Separated Values (CSVs) that I use in my
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where things get a bit murky for me is where we start chaining up collectors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.mapping(...).combiner().andThen(...).apply(...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(it should be obvious from my lack of clear example that I&amp;rsquo;m not 100% certain under which circumstances these are
useful).&lt;/p&gt;

&lt;p&gt;As a group, we think the chained collectors are kinda ugly - not because we&amp;rsquo;re against chaining (we like Streams),
but maybe because it&amp;rsquo;s another chain inside a param to a chain.&lt;/p&gt;

&lt;p&gt;We think this is an area where some good, solid examples and a bit of daily use will make it much clearer to
developers. We hope.&lt;/p&gt;

&lt;p&gt;Related to this, the course didn&amp;rsquo;t go into creating your own collectors at all. My personal (under-informed) opinion
is that I guess most developers should be able to use either the out-of-the-box collectors (&lt;code&gt;toList&lt;/code&gt; etc) or use the
collector chaining to build what they need. If you need a custom collector, perhaps you haven&amp;rsquo;t considered everything
that&amp;rsquo;s already available to you. But as a group, we decided we would have liked to see this topic anyway so that we
could get a deeper understanding of what collectors are and how they work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercises for lesson 3:&lt;/strong&gt; Well. What can we say? I really hope there are people reading this who haven&amp;rsquo;t finished
the course yet, because the Sevilla Java User group would like to say to you: don&amp;rsquo;t despair, the lesson 3 exercises
are &lt;em&gt;substantially&lt;/em&gt; harder than those for lessons 1 and 2. Honestly, the whole group considered it less of a learning
curve and more of a massive cliff to climb.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://herbookthoughts.reads-it.com/wp-content/uploads/2014/06/d6a1143f571184db25f94613edd43b40af6d3a629221aba00d9efdcfef5efd84.jpg&#34; alt=&#34;I have no idea what I am doing&#34; title=&#34;I have no idea 
what I am doing&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I mean, it was great to have something so challenging to end on, but it probably would have been less ego-destroying
if we could have got up to that level gradually instead of having it sprung on us.&lt;/p&gt;

&lt;p&gt;The good thing about Part 2 of the lesson 3 exercises was that we had three very different answers to discuss
in the group. None of us were super happy with any of them, but we could see definite pros and cons of each approach,
and that&amp;rsquo;s something you really want to learn in a course like this.&lt;/p&gt;

&lt;p&gt;It was also really great to have a rough performance test to run on your own computer, so that you could really see
the impact of your choices on the performance of the stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more info&lt;/strong&gt;&lt;br /&gt;
I&amp;rsquo;m going to add a shameless plug to a friend&amp;rsquo;s book here. I&amp;rsquo;ve been reading a lot about Java 8 for this course, for
my &lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;, and to generally get up to speed. My favourite book for getting to
grips with lambdas and streams
is &lt;a href=&#34;http://www.amazon.com/gp/product/B00J3B3J3C/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00J3B3J3C&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=IX6U2YT4FADY4JY6&#34;&gt;Java 8 Lambdas: Pragmatic Functional Programming&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=B00J3B3J3C&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
by &lt;a href=&#34;https://twitter.com/RichardWarburto&#34;&gt;Richard Warburton&lt;/a&gt;. This book also contains more info about collectors too,
so maybe some of our questions around how to use these in more complex situation are answered in here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Summary&lt;/strong&gt;&lt;br /&gt;
We really enjoyed the MOOC, and the sessions to get together to discuss it. We particularly liked that the meetups
were a safe place to ask questions and discuss alternative solutions, and that we weren&amp;rsquo;t expected to be genius-level
experts in order to participate fully.&lt;/p&gt;

&lt;p&gt;If/when Oracle re-runs the MOOC, if you didn&amp;rsquo;t get a chance to take part this time I highly recommend signing up.
And if you can find (or run) a local meetup to discuss it, it makes the experience much more fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 2 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session2/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session2/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;last week&lt;/a&gt;, the &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Sevilla Java User Group&lt;/a&gt;
is working towards completing the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt; on
lambdas and streams. We&amp;rsquo;re running &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223677436/&#34;&gt;three sessions&lt;/a&gt;
to share knowledge between people who are doing the course.&lt;/p&gt;

&lt;p&gt;The second week&amp;rsquo;s lesson was about
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt; - how you can use the
new stream API to transform data. There was also a whole section on
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;, which initially seemed like
rather a lot, but it turns out that &lt;code&gt;Optional&lt;/code&gt; can do rather more than I originally thought.&lt;/p&gt;

&lt;p&gt;In the meetup session, we talked about:&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;&lt;/strong&gt;: we were pretty
comfortable,
I think, with using &lt;code&gt;Optional&lt;/code&gt; to
prevent a &lt;code&gt;NullPointerException&lt;/code&gt;. What we weren&amp;rsquo;t so clear on were the examples of
&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; - if you were getting your &lt;code&gt;Optional&lt;/code&gt; values from a stream, why wouldn&amp;rsquo;t you do the map and the
filter on the stream first? For example, why do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s -&amp;gt; s.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when you could map and filter in the stream to get the first non-empty value? That certainly seems like an
interesting question in relation to streams.&lt;/p&gt;

&lt;p&gt;I can see &lt;code&gt;Optional&lt;/code&gt; being more useful when other APIs fully
support Java 8 and return &lt;code&gt;Optional&lt;/code&gt; values, then you can perform additional operations on return values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That terminal operation&amp;rsquo;s not actually terminal??&lt;/strong&gt;: We ran into this a couple of times in our examples in the
session, one example is the code above (let&amp;rsquo;s copy it down here so we can look at it more closely):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isn&amp;rsquo;t &lt;code&gt;findFirst()&lt;/code&gt; a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps&#34;&gt;terminal operation&lt;/a&gt;? How
can you carry on doing more operations on that?&lt;/p&gt;

&lt;p&gt;The answer is, of course, that the return type of the terminal operation can also lead to further operations.  The
above is actually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Optional&amp;lt;String&amp;gt; result = list.stream()
                              .findFirst();
result.map(String::trim)
      .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
      .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our terminal operation returns an optional, which allows you to do further operations. Another example of this
confusion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .collect(toList())
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;collect()&lt;/code&gt; is a terminal operation, but it returns a list, which also allows &lt;code&gt;forEach()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; results = list.stream()
                           .map(String::toLowerCase)
                           .collect(toList());
results.forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So be aware that just because it&amp;rsquo;s called a terminal operation, doesn&amp;rsquo;t mean you can&amp;rsquo;t perform other operations on
the returned value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel/sequential/parallel&lt;/strong&gt;: there had been a question in the previous week about why you could write code like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .parallel()
    .map(String::trim)
    .sequential()
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .parallel()
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and whether that would let you dictate which sections of the stream were parallel and which were to be processed in
serial.  Lesson two set the lesson straight, declaring &amp;ldquo;the last operator wins&amp;rdquo; - meaning &lt;em&gt;all&lt;/em&gt; of the above code will
be run as a parallel stream. I can&amp;rsquo;t find any documentation for this, I&amp;rsquo;ll edit this post if I locate it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#unordered--&#34;&gt;Unordered&lt;/a&gt;&lt;/strong&gt;: &amp;ldquo;Why
would you ever want your stream to be unordered?&amp;rdquo; - the answer is that &lt;code&gt;unordered()&lt;/code&gt; &lt;a href=&#34;http://stackoverflow.com/a/21350234/653519&#34;&gt;doesn&amp;rsquo;t turn
your sorted collection into one with no order&lt;/a&gt;, it just says that when
this code is executed, the order of elements doesn&amp;rsquo;t matter.  This might make processing faster on a parallel stream,
but as a group we figured it would probably be pointless on a sequential stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficiency optimisations and order of stream operations&lt;/strong&gt;: We had a &lt;em&gt;long&lt;/em&gt; conversation about the order in which you
perform
operations in a stream. The MOOC (in fact, most documentation around Streams) tells us that a) streams are
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;lazy&lt;/a&gt;, and
not evaluated until a terminal operator is encountered and b) this enables optimisation of the operations in the
stream.  That lead to a discussion about the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The filter operation should result in less items to process in the stream. Given that the &lt;code&gt;map()&lt;/code&gt; operation doesn&amp;rsquo;t
change anything that &lt;code&gt;filter()&lt;/code&gt; relies on, will this code be optimised somehow under the covers so that the filter
is actually executed first? Or are optimisations still going to respect the order of operations on a stream?&lt;/p&gt;

&lt;p&gt;Our case is actually a very specific case, because a) the &lt;code&gt;map()&lt;/code&gt; returns the same type as the params passed in (i.e.
it doesn&amp;rsquo;t map a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;) and b) the &lt;code&gt;map()&lt;/code&gt; doesn&amp;rsquo;t change the characteristic the &lt;code&gt;filter()&lt;/code&gt; is
looking at (i.e. length). But generally speaking, you can&amp;rsquo;t expect these conditions to be true - in fact I bet in a
large number of cases they are &lt;em&gt;not&lt;/em&gt; true. So pipeline operations are &lt;a href=&#34;http://stackoverflow.com/a/22056258/653519&#34;&gt;performed in the order in which they are
written&lt;/a&gt;, meaning that our &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; will not be re-ordered into
a more efficient order.&lt;/p&gt;

&lt;p&gt;A good rule of thumb seems to be to do filtering as early in the stream as possible - that way you can potentially
cut down the number of items you process in each step of the stream. Therefore our code would probably be better as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .map(String::toLowerCase)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Flat Map&lt;/strong&gt;: what&amp;hellip;?
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-&#34;&gt;&lt;code&gt;flatMap()&lt;/code&gt;&lt;/a&gt;
is one of those methods that makes total sense once you get the hang of it, and you don&amp;rsquo;t
understand why it was so confusing. But the first time you encounter it, it&amp;rsquo;s confusing - how is &lt;code&gt;flatMap()&lt;/code&gt;
different to &lt;code&gt;map()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;flatMap&lt;/code&gt; is used to squish (for example) a stream of streams into just a simple stream. It&amp;rsquo;s like turning a
2-dimensional array into a single dimension so that you can iterate over all the items without needing nested
for-loops. There&amp;rsquo;s &lt;a href=&#34;http://stackoverflow.com/a/22384132/653519&#34;&gt;an example on StackOverflow&lt;/a&gt;, and some more examples
in answer to &lt;a href=&#34;http://stackoverflow.com/questions/26684562/java-8-map-and-flatmap-methods&#34;&gt;this question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparators&lt;/strong&gt;: We&amp;rsquo;ve probably all written comparators at some point, it&amp;rsquo;s probably one of those examples where we
really did use anonymous inner classes &amp;ldquo;in the olden days&amp;rdquo; and were looking forward to replacing them with lambdas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(new Comparator&amp;lt;String&amp;gt;() {
          @Override
          public int compare(String o1, String o2) {
              return ???;
          }
      })
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sadly, using a lambda still doesn&amp;rsquo;t answer the question &amp;ldquo;do I minus o1 from o2, or o2 from o1?&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted((o1, o2) -&amp;gt; ??? )
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;rsquo;s yet another new method in Java 8 here that can save us, one that is not nearly as well publicised as it
should be. There&amp;rsquo;s a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-&#34;&gt;&lt;code&gt;Comparator.comparing()&lt;/code&gt;&lt;/a&gt;
that you can use to really easily define what to compare on. The JavaDoc and signature looks kinda confusing, but
this is one of those places where method references suddenly make loads of sense:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(comparingInt(String::length))
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Here we&amp;rsquo;re actually using the &lt;code&gt;comparingInt&lt;/code&gt; method as we&amp;rsquo;re going to compare on a primitive value). Personally this
is one of my favourite new features in Java 8.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
Join us next week for the &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223910762/&#34;&gt;last session on Java 8 - Lambdas and Streams&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 1 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session1/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session1/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Sevilla Java User Group&lt;/a&gt; is working together towards completing the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt; on
lambdas and streams. As part of this, we&amp;rsquo;re running &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223677436/&#34;&gt;three sessions&lt;/a&gt;
during the course so we can, as a group, ask  questions about the lectures, get help with the homework, and (if we&amp;rsquo;re
feeling very smart!) help people who may be struggling (or might not have watched the videos).&lt;/p&gt;

&lt;p&gt;Last night we had the first session which went really well. We had a small-ish group, about half of whom had
completed the homework and the quiz (for the first lesson) and half had not. We worked through the homework exercises
together, saw how there were multiple solutions for each problem, and explored how to balance conciseness with
longer, more descriptive code.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;First offline session for lesson 1 of the lambdas and streams mooc &lt;a href=&#34;https://twitter.com/hashtag/java8?src=hash&#34;&gt;#java8&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/40gradosAlaSombra?src=hash&#34;&gt;#40gradosAlaSombra&lt;/a&gt; &lt;a href=&#34;http://t.co/hJgPrLl3C5&#34;&gt;pic.twitter.com/hJgPrLl3C5&lt;/a&gt;&lt;/p&gt;&amp;mdash; SVQ JUG (@SVQJUG) &lt;a href=&#34;https://twitter.com/SVQJUG/status/623199430158778368&#34;&gt;July 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;On the whole people thought the videos for the course were very clear and well-explained, although we also went
through how to run the videos at 1.5 speed, as most people wanted to run through them faster! I thought the pace of the
videos was especially good for those who aren&amp;rsquo;t so comfortable with listening in English, and it&amp;rsquo;s easy to add
subtitles and speed it up if you feel comfortable with the material.&lt;/p&gt;

&lt;p&gt;The first lesson covers lambdas, and their use in some of the new Java 8 methods (specifically on collections, but
&lt;em&gt;not&lt;/em&gt; streams).&lt;/p&gt;

&lt;p&gt;The areas we discussed most, the ones that needed more clarity were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html&#34;&gt;Functional Interfaces&lt;/a&gt;:
what does &lt;a href=&#34;https://dzone.com/articles/introduction-functional-1&#34;&gt;Single Abstract Method (SAM)&lt;/a&gt; really mean? Also, we
were interested in the &amp;ldquo;exception&amp;rdquo; of methods declared on &lt;code&gt;Object&lt;/code&gt; as well as an interface (e.g. &lt;code&gt;equals()&lt;/code&gt;), but we
came
to the conclusion that it was easier to simply think of looking for only one method without any form of
implementation at all - methods defined on &lt;code&gt;Object&lt;/code&gt; must have an implementation, since &lt;code&gt;Object&lt;/code&gt; is not an
abstract class or interface.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&#34;&gt;Method References&lt;/a&gt;: we looked at
examples of the three types that aren&amp;rsquo;t constructor references, what they look like in lambda form and how they
differ. Method references are&amp;hellip; not difficult to understand, but do look a bit awkward in the code if you&amp;rsquo;re not
used to them, and can be confusing as all your types, parameters and return values disappear.&lt;/li&gt;
&lt;li&gt;Parallel execution: The first lesson talks a lot about how lambdas are here to make parallelisation and
concurrency easier for developers, so obviously there was a question about how the code in the homework examples would
be executed in a multi-CPU environment. I assumed (although I&amp;rsquo;m waiting for clarification) that methods like
&lt;code&gt;removeIf&lt;/code&gt; are not parallelised, since in the case of Streams you have to explicitly state you want to go parallel.
We also talked a bit about
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#parallel--&#34;&gt;parallel()&lt;/a&gt; and
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#parallelStream--&#34;&gt;parallelStream()&lt;/a&gt;, even
though the lesson didn&amp;rsquo;t cover Streams at all. We wanted to understand a bit more about the pros and cons of going
parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, I also snuck in some demos of &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&amp;rsquo;s&lt;/a&gt; awesomeness, including
its magical support for creating lambdas and turning things into (and from) method references.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/java8mooc/ReplaceWithMethodReferenceMac.gif&#34; alt=&#34;Converting code to Java 8&#34; title=&#34;Converting code to Java 8&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It was a great, collaborative session, with most people getting a chance to demonstrate their code (if they wanted
to!). And at the end we had solutions to the five exercise problems and had discussed all the areas people wanted
more clarity on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java at 20</title>
      <link>https://trishagee.github.io/post/java_at_20/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_at_20/</guid>
      <description>&lt;p&gt;I was asked three simple questions about my thoughts on Java turning 20, and ended up writing a
&lt;a href=&#34;https://www.voxxed.com/blog/2015/05/the-java-birthday-diaries-part-3-trisha-gee-on-ides-jigsaw-and/&#34;&gt;guest post for Voxxed&lt;/a&gt;.
 No wonder I can&amp;rsquo;t seem to find the time to write these days.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groovy vs Java</title>
      <link>https://trishagee.github.io/presentation/groovy_vs_java/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/groovy_vs_java/</guid>
      <description>&lt;p&gt;Resources for my &amp;ldquo;Is Groovy Better Than Java for Testing?&amp;rdquo; talk.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/VK2sMI5B1pY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/46936375&#34; width=&#34;476&#34; height=&#34;400&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34;&gt;&lt;/iframe&gt;
  

&lt;ul&gt;
&lt;li&gt;Blog: &lt;a href=&#34;http://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking/&#34;&gt;Mocking in Spock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href=&#34;http://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing/&#34;&gt;Stubbing in Spock&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Blog: &lt;a href=&#34;http://trishagee.github.io/post/spock_data_driven_testing/&#34;&gt;Data Driven Testing in Spock&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://spockframework.github.io/spock/docs/1.0/index.html&#34;&gt;Spock Reference Documentation&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Book: &lt;a href=&#34;https://leanpub.com/wewut&#34;&gt;Working Effectively With Unit Tests - Jay Fields&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Video: &lt;a href=&#34;https://vimeo.com/80222114&#34;&gt;Making Java Tests Groovy with Spock - Ken Sipe&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Code: &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver&#34;&gt;MongoDB Java Driver&lt;/a&gt; All examples from the talk come from the MongoDB Java driver. Some tests have been improved or dropped over time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The State of Java</title>
      <link>https://trishagee.github.io/post/svq_state_of_java_update/</link>
      <pubDate>Thu, 29 Jan 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/svq_state_of_java_update/</guid>
      <description>

&lt;p&gt;I think living in a beautiful city in a fantastic climate has its advantages.  Not just the obvious ones, but we
find people unusually keen to come and visit us on the pretence of presenting at the Sevilla Java User Group (and please,
DO come and present at our JUG, we &lt;em&gt;love&lt;/em&gt; visitors).&lt;/p&gt;

&lt;p&gt;This week we were really lucky, we had &lt;a href=&#34;https://twitter.com/gsaab&#34;&gt;Georges Saab&lt;/a&gt; and Aurelio Garcia-Ribeyro giving us
an update on where Java is now and where it looks like it&amp;rsquo;s going in the future.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m just starting to use Java 8 in real life, so this could not have been better timed - I got to ask the guys a bunch
of questions about the intentions behind some of the Java 8 features, and the current vision for the future.&lt;/p&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/44036521&#34; width=&#34;425&#34; height=&#34;355&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;
&lt;div style=&#34;margin-bottom:5px&#34;&gt;&lt;i&gt; &lt;a href=&#34;//www.slideshare.net/trishagee/2015-java-update-and-roadmap-jug-sevilla&#34; title=&#34;2015 Java update and roadmap, JUG sevilla&#34; target=&#34;_blank&#34;&gt;2015 Java update and roadmap, JUG sevilla&lt;/a&gt; from Georges Saab and Aurelio Garcia-Ribeyro &lt;/i&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;My notes from the session:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;Lambdas&lt;/a&gt; could be just a syntax change,
but they could be more than that - they could impact the language, the libraries
and the JVM. They could have a positive impact on performance, and this work can continue to go on through small
updates to Java that don&amp;rsquo;t impact the syntax.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt; are a pipeline of operations, made possible/easier/more readable by lambdas. The aim is to make operations
on collections easier and more readable.&lt;/li&gt;
&lt;li&gt;In the Old World Order, you had to care about &lt;em&gt;how&lt;/em&gt; to perform certain operations. With streams, you don&amp;rsquo;t need to
tell the computer exactly how it&amp;rsquo;s done, you can simply say what operations you want performed. This makes it easier
for developers&lt;/li&gt;
&lt;li&gt;Streams will take all the operations you pass in and perform them in a single pass of the data, so you don&amp;rsquo;t have
to write multiple loops to perform multiple operations on the same data structure, or tie your brain in knots figuring
out how to do it in one loop. There are also no intermediate data structures when you use streams.&lt;/li&gt;
&lt;li&gt;The implementation
can be optimised under the covers (e.g. not performing the &lt;code&gt;sort&lt;/code&gt; operation if the data is already ordered correctly),
and the developer doesn&amp;rsquo;t have to worry about it. Java can introduce further optimisations in later releases without
changing the API or impacting the code a developer has already written.&lt;/li&gt;
&lt;li&gt;These new features in Java have a focus on readability, since code is much more often read than written.&lt;/li&gt;
&lt;li&gt;The operations are easier to parallelise, because the developer is no longer dictating the &lt;em&gt;how&lt;/em&gt; - multiple &lt;code&gt;for&lt;/code&gt; loops
might not be easy to parallelise, but a series of operations can be.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html&#34;&gt;Default methods&lt;/a&gt; and
new support for &lt;a href=&#34;http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html#static&#34;&gt;static methods on interfaces&lt;/a&gt; are interesting.
I&amp;rsquo;d forgotten you could put static methods on interfaces and I&amp;rsquo;m going to sneak them into my latest project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/jf14-nashorn-2126515.html&#34;&gt;Nashorn&lt;/a&gt; is here to replace Rhino. Personally I haven&amp;rsquo;t worked in the sort of environment that would need server-side
JavaScript so this whole area has passed me by somewhat, but seems it might be interesting for Node.js or creating
a &lt;a href=&#34;http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop&#34;&gt;REPL&lt;/a&gt;
in JavaScript that you want to run on the JVM.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://blogs.oracle.com/java-platform-group/entry/java_8_s_new_type&#34;&gt;additional annotation support in Java 8&lt;/a&gt;
will be useful for &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/index.html&#34;&gt;Java EE&lt;/a&gt;.  As this is something I&amp;rsquo;m currently playing
with (specifically web sockets) I&amp;rsquo;m interested in this, but it seems like it will be a while before this filters into
the Java EE that&amp;rsquo;s used on a daily basis.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html&#34;&gt;Mission Control and Flight Recorder&lt;/a&gt; - look interesting.  Feel like I should play with them.&lt;/li&gt;
&lt;li&gt;Many people are skipping straight from Java 6 to 8 - the new language features and improved performance are major driving
factors&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.java.com/en/download/faq/java_7.xml&#34;&gt;End of public updates of Java 7 in April&lt;/a&gt;. Having libraries that, um&amp;hellip; &lt;em&gt;encourage&lt;/em&gt;&amp;hellip; adoption of the latest version of
Java makes life a lot easier for those who develop the Java language, as they can concentrate on moving the language
forward and not be tied down supporting old versions.&lt;/li&gt;
&lt;li&gt;Either this is the first time I&amp;rsquo;ve heard of &lt;a href=&#34;http://www.oracle.com/technetwork/java/javadb/overview/index.html&#34;&gt;JavaDB&lt;/a&gt;,
or my memory has completely discarded it. I had no idea what it was.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk9/&#34;&gt;Java 9&lt;/a&gt; is well under way, check out the JEPs.&lt;/li&gt;
&lt;li&gt;(This is the &lt;a href=&#34;http://openjdk.java.net/jeps/1&#34;&gt;JEP process&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/&#34;&gt;Jigsaw&lt;/a&gt; was explained, and actually I could see myself using it for the project I&amp;rsquo;m working on right now. I had a look
to see if I could use it via the OpenJDK, but it looks like the groundwork is there, but not the actual modules themselves.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/tech/g1-intro-jsp-135488.html&#34;&gt;G1 Garbage Collector&lt;/a&gt; is &amp;ldquo;&amp;hellip;the go forward GC&amp;rdquo;, it&amp;rsquo;s the one that&amp;rsquo;s being actively worked on.&lt;/li&gt;
&lt;li&gt;This is the first I&amp;rsquo;ve heard of &lt;a href=&#34;http://openjdk.java.net/jeps/193&#34;&gt;Enhanced Volatiles&lt;/a&gt;, I&amp;rsquo;m so behind the times!&lt;/li&gt;
&lt;li&gt;Access to internal packages is going away in Java 9. So
&lt;a href=&#34;http://www.oracle.com/technetwork/java/faq-sun-packages-142232.html&#34;&gt;don&amp;rsquo;t use any &lt;code&gt;sun.*&lt;/code&gt; packages&lt;/a&gt;.
Use &lt;a href=&#34;http://java.dzone.com/articles/jdeps-jdk-8-command-line&#34;&gt;jdeps&lt;/a&gt; to identify any
dependencies in your code that need to change.&lt;/li&gt;
&lt;li&gt;&amp;hellip;and, looking further ahead than Java 9, we have &lt;a href=&#34;http://openjdk.java.net/jeps/169&#34;&gt;value types&lt;/a&gt; and
&lt;a href=&#34;http://openjdk.java.net/projects/valhalla/&#34;&gt;Project Valhalla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;a &lt;a href=&#34;http://openjdk.java.net/projects/kulla/&#34;&gt;REPL for Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;possibly a &lt;a href=&#34;http://openjdk.java.net/jeps/198&#34;&gt;lightweight JSON API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and &lt;a href=&#34;http://cr.openjdk.java.net/~psandoz/varhandles/jvmls14-varHandles.pdf&#34;&gt;VarHandles&lt;/a&gt; were also mentioned.&lt;/li&gt;
&lt;li&gt;Finally, the guys mentioned a &lt;a href=&#34;http://youtu.be/2y5Pv4yN0b0&#34;&gt;talk by Brian Goetz called &amp;ldquo;Stewardship: the Sobering Parts&amp;rdquo;&lt;/a&gt;, which has gone onto my
to-watch list.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_0&#34;&gt;Ideas&lt;/h4&gt;

&lt;p&gt;It became clear throughout the talk there are plenty of ideas that we could explore in later presentations.  If you want to see
any of the following, add a comment or ping me or &lt;a href=&#34;https://twitter.com/israkaos&#34;&gt;IsraKaos&lt;/a&gt; on twitter or Meetup and we&amp;rsquo;ll try and schedule it.&lt;/p&gt;

&lt;p&gt;Similarly, if you can present on any of these topics and want to come to a beautiful, sunny city with amazing food to
do so, drop me a line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The OpenJDK&lt;/li&gt;
&lt;li&gt;The JCP, the purpose, the processes, the people&lt;/li&gt;
&lt;li&gt;Adopt a JSR, Adopt OpenJDK&lt;/li&gt;
&lt;li&gt;New Date/Time (JSR310)&lt;/li&gt;
&lt;li&gt;JavaFX&lt;/li&gt;
&lt;li&gt;Code optimisation vs Data optimisation (I honestly don&amp;rsquo;t know what this means, but I wrote it down in my notes)&lt;/li&gt;
&lt;li&gt;Java EE&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;toc_1&#34;&gt;Further Reading&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;I really liked &lt;a href=&#34;http://www.amazon.com/gp/product/1449370772/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1449370772&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=GGWNXKE672H3G2FY&#34;&gt;Richard Warburton&amp;rsquo;s Lambdas and Streams&lt;/a&gt; book&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1617291994/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1617291994&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=KDGWBWOK2S6FVS6F&#34;&gt;Java 8 in Action&lt;/a&gt; has details on other Java 8 features like Date and Time&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0321927761/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321927761&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&amp;amp;linkId=7VJH32FI5ZVEDOMW&#34;&gt;Java 8 for the Really Impatient&lt;/a&gt; covers JavaFX too, and highlights some Java 7 features you might like&lt;/li&gt;
&lt;li&gt;Brian Goetz did a great talk last year, &lt;a href=&#34;https://www.youtube.com/watch?v=MLksirK9nnE&#34;&gt;&amp;ldquo;Lambdas in Java: A peek under the hood&amp;rdquo;&lt;/a&gt;. I had to watch it twice before even half of the info sank in, but it&amp;rsquo;s really interesting.&lt;/li&gt;
&lt;li&gt;Stephen Colebourne, the guy behind Joda time and the new Date and Time API, has &lt;a href=&#34;http://vimeo.com/87157763&#34;&gt;this talk about the new API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk9/&#34;&gt;Java 9 OpenJDK page&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Workshop: AngularJS, HTML5, Groovy, Java and MongoDB</title>
      <link>https://trishagee.github.io/resources/angular_java_groovy_mongodb_workshop/</link>
      <pubDate>Mon, 19 Jan 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/resources/angular_java_groovy_mongodb_workshop/</guid>
      <description>

&lt;p&gt;Setup required for the &lt;a href=&#34;http://qconlondon.com/tutorial/html5-angularjs-groovy-java-and-mongodb-all-together&#34;&gt;AngularJS/HTML5/Groovy/Java/MongoDB tutorial&lt;/a&gt; for QCon London 2015.
Sign up with code SPEAKGEE100 for £100 off the price!&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Who is this for?&lt;/h2&gt;

&lt;p&gt;This workshop is aimed at Java developers who want to learn more about how
to rapidly prototype applications using web front-end technologies with JVM back-end technologies. The workshop may be
suitable for developers who don&amp;rsquo;t normally use Java as their primary language,
but this is &lt;em&gt;not&lt;/em&gt; an introduction to Java and familiarity with server-side development of some kind is assumed.&lt;/p&gt;

&lt;p&gt;A basic understanding of HTML and JavaScript is expected, but previous experience of Groovy or MongoDB is &lt;em&gt;not&lt;/em&gt; required.&lt;/p&gt;

&lt;p&gt;The workshop is not suitable for people who have no programming experience.&lt;/p&gt;

&lt;p&gt;This is a hands-on workshop, bring a laptop set up according to the following instructions - you will be writing code!&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Overview&lt;/h2&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/klw9pIuTICM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;I&amp;rsquo;ve created my very first screencast! This video takes you through all the steps you need to go through in order to be
setup for the workshop.&lt;/p&gt;

&lt;p&gt;The setup instructions below are the same process, so you can copy &amp;amp; paste where appropriate.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;I am assuming you already have a version of the Java SDK downloaded. For this workshop, Java 7 or above should work, but
I recommend you &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;download the latest version of Java 8&lt;/a&gt; if you&amp;rsquo;re not already using it.&lt;/p&gt;

&lt;p&gt;Create a new work area for this tutorial. For the rest of these instructions I&amp;rsquo;ll refer to it as &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt;.  I&amp;rsquo;ve put
 mine in &lt;code&gt;~/Projects/workshops/qcon2015&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Installing MongoDB&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m going to be using &lt;a href=&#34;http://www.mongodb.org/downloads&#34;&gt;MongoDB 3.0.0-rc8&lt;/a&gt;, but version 2.6 will be fine too.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.mongodb.org/downloads&#34;&gt;Download MongoDB&lt;/a&gt; for your operating system and unzip/install it.  Unless you prefer to put it
somewhere else, I suggest you unzip it to &lt;code&gt;&amp;lt;location&amp;gt;/mongodb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we have to create the directory for the data to go into. Create a &lt;code&gt;data&lt;/code&gt; directory in &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt;, so that you
have a folder at &lt;code&gt;&amp;lt;location&amp;gt;/data&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From the command line, start MongoDB to make sure everything is working.  From the &lt;code&gt;&amp;lt;location&amp;gt;&lt;/code&gt; directory:&lt;/p&gt;

&lt;h5 id=&#34;toc_4&#34;&gt;Linux/OSX&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;./mongodb/bin/mongod --dbpath data
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_5&#34;&gt;Windows:&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;monogdb\bin\mongod.exe --dbpath data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
MongoDB should be running on localhost and port 27017&lt;/p&gt;

&lt;p&gt;Connect to the shell to make sure it&amp;rsquo;s working:&lt;/p&gt;

&lt;h5 id=&#34;toc_6&#34;&gt;Linux/OSX&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;./mongodb/bin/mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_7&#34;&gt;Windows&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;monogdb\bin\mongo.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
You should see something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;~\Projects\workshops\qcon2015&amp;gt;monogdb\bin\mongo.exe
MongoDB shell version: 2.8.0-rc5
connecting to: test
Welcome to the MongoDB shell.
For interactive help, type &amp;quot;help&amp;quot;.
For more comprehensive documentation, see
        http://docs.mongodb.org/
Questions? Try the support group
        http://groups.google.com/group/mongodb-user
&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Creating your project&lt;/h2&gt;

&lt;p&gt;Clone &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;the Cafelito project&lt;/a&gt; into &lt;code&gt;&amp;lt;location&amp;gt;/cafelito&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In a terminal/command line, navigate to this location, and run:&lt;/p&gt;

&lt;h5 id=&#34;toc_9&#34;&gt;Linux/OSX&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;./gradlew check
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;toc_10&#34;&gt;Windows&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;gradlew.bat check
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
This should download all the required dependencies.&lt;/p&gt;

&lt;p&gt;Open in your favourite IDE and import this directory as a new project. I&amp;rsquo;ll be using
&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA 14&lt;/a&gt; and showing a number of its tricks. If you&amp;rsquo;re using IntelliJ IDEA and you
import this project as a Gradle project, you don&amp;rsquo;t even need to do the above step, IntelliJ will download and import
the dependencies for you.&lt;/p&gt;

&lt;p&gt;Feel free to use Eclipse or
Netbeans (or whatever your favourite IDE is) but I&amp;rsquo;m out of practice using those IDEs and might not be able to help you out as much.&lt;/p&gt;

&lt;h2 id=&#34;toc_11&#34;&gt;And now&amp;hellip;&lt;/h2&gt;

&lt;p&gt;You should be ready to begin: you have a working instance of MongoDB, a skeleton project that we&amp;rsquo;ll be working with, and all the
dependencies should have been downloaded.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>AngularJS, HTML5, Groovy, Java and MongoDB All Together - What Could Possibly Go Wrong??</title>
      <link>https://trishagee.github.io/presentation/angularjs_html5_groovy_java_mongodb_wcpgw/</link>
      <pubDate>Mon, 20 Oct 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/angularjs_html5_groovy_java_mongodb_wcpgw/</guid>
      <description>

&lt;p&gt;This year I&amp;rsquo;ve been giving an evolving live demonstration of coding a Fully Buzz Word Compliant,
mobile-friendly web application.  The aim of the demo is to show, via a real-world application rather than snippets or a toy example,
where these popular technologies sit in your architecture, and how they interact with each other.&lt;/p&gt;

&lt;p&gt;The exact code I present has changed a bit over time, the session I did for hack.summit() is the most recent:&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/VyEdy-l5608&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
 

&lt;p&gt;The code is &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;available on GitHub&lt;/a&gt;.  You&amp;rsquo;ll see there are a number of different branches for the
different versions I&amp;rsquo;ve presented. The current one is the NoSQL Matters version.  With all the branches,
the commits correspond to the user stories in &lt;a href=&#34;http://www.slideshare.net/trishagee/i-want-coffeejavaone&#34;&gt;the slides&lt;/a&gt;,
so you can get a feel for how the code builds up throughout the demo.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also presented the talk as a series of &lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=/zztT3fScng&amp;offerid=145238.10000553&amp;type=3&amp;subid=0&#34;&gt;short, follow-along lessons&lt;/a&gt;. You can get 40% off the price with discount code VDEAL40.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://click.linksynergy.com/fs-bin/click?id=/zztT3fScng&amp;offerid=145238.10000553&amp;type=3&amp;subid=0&#34; target=&#34;_blank&#34;&gt;&lt;IMG border=0 src=&#34;http://www.informit.com/ShowCover.aspx?isbn=9780134070865&amp;type=d&#34; &gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the demo I don&amp;rsquo;t get much of a chance to go through the Groovy script I use to import data into MongoDB,
so I have a &lt;a href=&#34;/post/groovy_import_to_mongodb/&#34;&gt;whole blog post just on that subject&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This talk has been videoed several times -
some older versions use a different library to talk to MongoDB and (I hope) you&amp;rsquo;ll see that the most recent code is even simpler than
these initial demos.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.parleys.com/talk/html5-angularjs-groovy-java-mongodb-together-what-could-possibly-go-wrong&#34;&gt;JavaOne, October 2014&lt;/a&gt; (uses Morphia, but the Java driver for &lt;code&gt;getNearest&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MRrSAkEAnZQ&#34;&gt;vJUG, September 2014&lt;/a&gt; (the Java back end is similar to the JavaOne version, but UI for getting the nearest coffee shop is slightly different)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.oscon.com/open-source-2015/public/content/2015/05/15-html5-angularjs-groovy-java-mongodb-all-together?cmp=tw-prog-na-article-os15_1431727268&#34;&gt;OSCON, July 2014&lt;/a&gt; (uses Morphia)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/presentation/interview_at_goto_chicago/&#34;&gt;GOTO Chicago, May 2014&lt;/a&gt; (there&amp;rsquo;s an interview where I explain the motivation behind the
presentation, and the video uses MongoJack instead of Morphia &amp;amp; shows an even earlier version of the find-my-coffee UI)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/demo-java-javascript-mongodb&#34;&gt;Joy of Coding, March 2014&lt;/a&gt; (only the second time I presented this
demo, shows the initial technology stack (including MongoJack) and UI).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;(For a full list of this and all my presentations, see &lt;a href=&#34;presentation/public_appearances/&#34;&gt;Public Appearances&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Resources&lt;/h3&gt;

&lt;p&gt;These are the main resources I used in creating this talk:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/0596805829/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0596805829&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=GAJBJ3MFBCQJ2N53&#34;&gt;REST in Practice&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0596805829&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important;margin:0px!important;&#34; /&gt; - Fantastic book to get your head into the right place for RESTy web services&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.youtube.com/watch?v=i9MHigUZKEM&#34;&gt;AngularJS in 60 mins&lt;/a&gt; - a very useful introduction to building simple AngularJS apps&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blogs.oracle.com/geertjan/entry/angularjs_meets_java_ee_7&#34;&gt;AngularJS meets JavaEE&lt;/a&gt; - specifically walks through connecting an
AngularJS app to a JavaEE back end using NetBeans, but the principals here are the ones I used in the cafelito application&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://angular-ui.github.io/bootstrap/&#34;&gt;UI Bootstrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dropwizard.io/&#34;&gt;Dropwizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;: remember MongoDB has &lt;a href=&#34;https://university.mongodb.com/&#34;&gt;free online courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mongodb/morphia/&#34;&gt;Morphia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gradle.org/&#34;&gt;Gradle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt;: I liked both &lt;a href=&#34;http://www.amazon.com/gp/product/1935182447/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182447&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=ZRWVYOCX5XYURUFM&#34;&gt;Groovy in Action&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1935182447&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
and &lt;a href=&#34;http://www.amazon.com/gp/product/1935182943/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1935182943&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=AD26ZYRKRBBF3DHC&#34;&gt;Making Java Groovy&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1935182943&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and I&amp;rsquo;ve written about &lt;a href=&#34;/tags/spock/&#34;&gt;Spock&lt;/a&gt; before&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ&lt;/a&gt;: there&amp;rsquo;s a free community version of the IDE, but it&amp;rsquo;s not very expensive to upgrade to
the full version and it will save you so much time and effort.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And remember, the &lt;a href=&#34;https://github.com/trishagee/cafelito&#34;&gt;application code is available here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with MongoDB and Java</title>
      <link>https://trishagee.github.io/post/getting_started_with_mongodb_and_java/</link>
      <pubDate>Thu, 14 Aug 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/getting_started_with_mongodb_and_java/</guid>
      <description>&lt;p&gt;We&amp;rsquo;ve been missing an introduction to using MongoDB from Java for a little while now - there&amp;rsquo;s plenty of information in &lt;a href=&#34;http://docs.mongodb.org/ecosystem/drivers/java/&#34;&gt;the
documentation&lt;/a&gt;, but we were lacking a step-by-step guide to getting started as a Java
developer.&lt;/p&gt;

&lt;p&gt;I sought to rectify this with a couple of blog posts for the MongoDB official blog: the first, an introduction to using MongoDB from
Java, including a non-comprehensive list of some of the libraries you can use; the second, an introductory guide to simple CRUD
operations using the Java driver:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mongodb.org/post/94065240033/getting-started-with-mongodb-and-java-part-i&#34;&gt;Getting Started with MongoDB and Java, Part 1&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.mongodb.org/post/94724924068/getting-started-with-mongodb-and-java-part-ii&#34;&gt;Getting Started with MongoDB and Java, Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is very much aimed at Java/JVM developers who are new to MongoDB, and want to get a feel for how you use it.&lt;/p&gt;

&lt;p&gt;These guides are for the current (2.x) driver. When we release 3.x, we&amp;rsquo;ll release updated guides as well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sevilla Java User Group Java 8 Launch Party</title>
      <link>https://trishagee.github.io/post/svq_java8_launch_party/</link>
      <pubDate>Fri, 01 Aug 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/svq_java8_launch_party/</guid>
      <description>&lt;p&gt;Last night at the Sevilla JUG we officially celebrated the launch of &lt;a href=&#34;http://docs.oracle.com/javase/8/&#34;&gt;Java 8&lt;/a&gt; - yay!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://pbs.twimg.com/media/Bt48HX7IQAAQBQq.jpg:large&#34; alt=&#34;Partay&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t be fooled by the picture, people had more fun than it looks.  Honest.&lt;/p&gt;

&lt;p&gt;For anyone who missed the session, or who was there and wants access to the materials, here they are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoq.com/presentations/lambda-streams-java-8&#34;&gt;The Main Presentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trishagee/happy-mappy&#34;&gt;Trisha&amp;rsquo;s real-life lambda code&lt;/a&gt; (the class we were looking at was &lt;code&gt;TweetDecorator&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Finally, we used the &lt;a href=&#34;http://www.slideshare.net/SimonRitter/javase8-55thingsv2-sritter&#34;&gt;slide deck&lt;/a&gt; of another of Simon&amp;rsquo;s
presentations, &lt;a href=&#34;https://www.youtube.com/watch?v=rtAredKhyac&#34;&gt;55 New Features in Java SE 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the last link is to a video from &lt;a href=&#34;http://www.meetup.com/virtualJUG/&#34;&gt;vJUG&lt;/a&gt;, the Virtual Java User Group,
which is a great source of presentations from international speakers.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nighthacking at Sevilla Java User Group</title>
      <link>https://trishagee.github.io/post/nighthacking_jug_sevilla/</link>
      <pubDate>Wed, 23 Apr 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/nighthacking_jug_sevilla/</guid>
      <description>&lt;p&gt;Last Saturday &lt;a href=&#34;http://steveonjava.com/&#34;&gt;Mr Stephen Chin&lt;/a&gt; came to Sevilla on his crazy European tour to show us Lego and Robots.  This was our largest turnout yet
for a &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Java User Group&lt;/a&gt; event in Sevilla, which surprised me as it was on a weekend,
and the weekend before the spectacle that is &lt;a href=&#34;http://en.wikipedia.org/wiki/Holy_Week_in_Seville&#34;&gt;Semana
Santa&lt;/a&gt; &lt;a href=&#34;http://youtu.be/I5rnDZGNJW8&#34;&gt;in Sevilla&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is also the first event that we&amp;rsquo;ve had videoed (apologies for the horrible focus at times on the video,
I&amp;rsquo;m just learning and used to relying heavily on auto-focus).&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/q3OKs08X3oo&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Thanks very much to Stephen for visiting, and thank you to those who came, you&amp;rsquo;re making me re-think the idea of running events at
weekends.&lt;/p&gt;

&lt;p&gt;Also there are &lt;a href=&#34;http://www.meetup.com/SVQJUG/photos/all_photos/?photoAlbumId=21306622&#34;&gt;photos on Meetup&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
