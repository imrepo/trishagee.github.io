<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Java on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/java/index.xml</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Mon, 03 Mar 2014 00:00:00 UTC</updated>
    
    <item>
      <title>In my day...</title>
      <link>http://trishagee.github.io/post/in_my_day</link>
      <pubDate>Mon, 03 Mar 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/in_my_day</guid>
      <description>&lt;p&gt;Web development has changed a &lt;i&gt;lot&lt;/i&gt;.&lt;br /&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I was aware that there have been many changes in the last few years, and I’ve seen maturity come to web platforms in the form of standardisation and common reusable libraries and frameworks - and I don’t mean reusable in the way we used to “reuse” stuff by nicking it off other people’s websites when we saw something cool.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I used to be a web developer. &amp;nbsp;Sort of. &amp;nbsp;Some times I’ve been on the bleeding edge, and others… I remember using JavaScript to call back-end services with an XML payload before people were using the term AJAX, but I also remember working on an enterprise um… “classic”… JSP application only “recently” - in fact that was probably the last job where I did anything that looked like web development.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So this blog post is going to chart the progress of web development through my own experience.&amp;nbsp; Of course, this doesn’t by any means cover the whole spectrum, but I think my experience has been not unusual for a Java programming working through the noughties.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Over the course of my career I moved further away from the UI, because certainly early on the money and status was in “back end”, whatever that means, and not “front end”. &amp;nbsp;Which is ridiculous, really, especially as back then you couldn’t really follow best practices and clean code and test first and all that awesome stuff when doing front end development because none of the browsers played by the rules and frankly if you got it working at all you were a bloody genius. &amp;nbsp;And that’s not even considering the fact that as a “front end” developer you should be thinking about actual real human beings who use your product, and actual real human beings are messy things and understanding them is not (we’re told) traditionally a domain that we developers are naturally proficient in.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Anyway, I digress. &amp;nbsp;This was supposed to be a history lesson. &amp;nbsp;Or a nostalgia trip. &amp;nbsp;Or possibly Ranty Trish waving her walking stick in the air and shouting “You kids don’t know how good you’ve got it these days”. &amp;nbsp;If nothing else, I hope that it makes other “back end” developers like myself appreciate how much things have moved on.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Let’s go back to the olden days, before I’d even graduated: picture a time before smart phones - before phones were even common (I was horribly mocked at university for being poncy enough to have a mobile), before we knew if all this work we were doing to combat the millennium bug was going to stop the end of the world. &amp;nbsp;I was doing my first summer internship at &lt;a href=&#34;http://corporate.ford.com/&#34;&gt;Ford&lt;/a&gt;, and a contractor from Logica (who don&amp;rsquo;t seem to exist any more??) told me that if I was messing around with web pages and HTML (my friends and I had geocities-and-equivalent sites) I should look at this JavaScript thing to make my pages “dynamic”. &amp;nbsp;I didn’t have to just use GIFs to bring my page to life, I could move stuff around on the page. &amp;nbsp;I think I wrote a “you are in a crowded room”-type adventure game, because my background was BASIC and that’s what you do.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Actually I haven’t even mentioned that we were creating these websites to stay in touch with each other. &amp;nbsp;We’d discovered guest books, and used them to write comments and share stories since we’d all moved out of our home town to go to different universities. &amp;nbsp;Man, why didn’t I invent Facebook back then? &amp;nbsp;That’s what we needed.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Anyway.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;A year later, I was back at Ford doing my &lt;a href=&#34;http://en.wikipedia.org/wiki/Sandwich_degree&#34;&gt;sandwich year-in-industry&lt;/a&gt;. &amp;nbsp;The first project I worked during this time was a web-based reporting tool that needed to dynamically display hierarchical data. &amp;nbsp;We chose JavaScript trees to render this data - my year of messing around with my website paid off, and I was able to use my “cutting edge” Javascript skills in a real production environment. &amp;nbsp;Yay? &amp;nbsp;The back end was CGI - I think I was writing in Perl, but don’t tell anyone that. &amp;nbsp;I was learning Java at university, but this was a new language and I don’t think Ford was using it yet.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The next project was a very ambitious one - be the first car manufacturer to &lt;a href=&#34;http://www.brandrepublic.com/news/11990/Ford-Vauxhall-cut-online-car-prices/?HAYILC=RELATED&#34;&gt;sell new cars on the web&lt;/a&gt;. &amp;nbsp;Ford was well ahead of their time - the millennium bug had not killed us all, but people were barely buying books online, never mind spending tens of thousands of pounds on a car they’d never driven. &amp;nbsp;But it wasn’t just ahead of its time from a business point of view, technically it was very advanced too - we used lots of “DHTML” (as we were now calling it), a new-fangled technology called ASP, and we were writing modular, reusable &lt;a href=&#34;http://www.microsoft.com/com/default.mspx&#34;&gt;COM&lt;/a&gt;ponents. &amp;nbsp;We used XSLT to parse the XML from the COM objects, and the ASP figured out whether you were Netscape or Internet Explorer (Firefox wasn’t even a gleam in the inventor’s eye, and forget Chrome, I think we using &lt;a href=&#34;http://www.altavista.com/&#34;&gt;Alta Vista&lt;/a&gt; (whaaaat? AltaVista got bought by Yahoo??) not some new-fangled search engine beginning with G) so it could use the right XSLT to turn the XML into HTML that was readable by the browser you were using. &amp;nbsp;My job was to get the DHTML pages rendering and animating correctly in both IE4 and Netscape 4. &amp;nbsp;That was a lot of fun for me, but also very challenging.&amp;nbsp; And imagine my shock when a few months later I tested the site from the university UNIX machines to find that Netscape rendered it completely differently under UNIX.&amp;nbsp; I learnt a lesson about how important it was to test on different platforms.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;We had some smart Microsoft people helping us out with this project, and, because it was 2000 and the &lt;a href=&#34;http://en.wikipedia.org/wiki/Dot-com_bubble&#34;&gt;dot com crash&lt;/a&gt;&amp;nbsp;hadn’t happened just yet, we also had a lot of young, overpaid, overconfident contractors who believed anything was possible. &amp;nbsp;I learnt a lot during this time, not just about the technology, but also about different approaches to shaping your IT career. &amp;nbsp;And about how much you could earn before you were 25. &amp;nbsp;I was definitely going to be a programmer when I left university the next year.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Yeah, so… I graduated in 2001. &amp;nbsp;If you were around then, you’ll remember that getting a job was a bit more difficult than I had anticipated, especially as these young, overpaid contractors were now desperately grabbing anything they could find. &amp;nbsp;But that’s a story for another day.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I didn’t go back to Ford straight away, I’d “been there and done that”. &amp;nbsp;I worked on the website for &lt;a href=&#34;http://commonpurpose.org.uk/&#34;&gt;Common Purpose&lt;/a&gt;. &amp;nbsp;On the first day, they sat me down with &lt;a href=&#34;http://www.amazon.com/gp/product/1861003625/ref=as_li_tf_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1861003625&amp;amp;linkCode=as2&amp;amp;tag=trissramb-20&#34;&gt;a book on JSP and Servlets&lt;/a&gt;, and that was my reading material for the next few weeks. &amp;nbsp;If I’d been fresh out of university where we’d been doing Applets, and where I’d written a Swing app on the side for my Dad’s school, this would have been a big mindset change for me. &amp;nbsp;But having worked on the ASPs it wasn’t such a big shift. &amp;nbsp;I did, however, like how JSPs and servlets made the separation between the view and all-of-the-other-logic-stuff a bit clearer - back in ASP-land we’d settled on a convention of dealing with the form data from the previous page in the first part of the ASP, and rendering the new page in the second part. &amp;nbsp;To this day I still don’t know what we should have been doing instead. &amp;nbsp;But in JSP-land it only took me&amp;hellip; I dunno, about 6 months I think, to get the website up and running. &amp;nbsp;The most difficult section was &lt;a href=&#34;http://web.archive.org/web/20021001132257/http://www.commonpurpose.org.uk/home/apply-online.vdf&#34;&gt;registrations&lt;/a&gt;. &amp;nbsp;And yes, I was a graduate, and yes, I was new, but that was a good turnaround for a web application “in those days”.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;In my spare time I used what I’d learnt on &lt;a href=&#34;http://blews-ltb.co.uk/knot.asp&#34;&gt;the blews website&lt;/a&gt;. &amp;nbsp;I even had a section where people could log in and &lt;a href=&#34;http://web.archive.org/web/20050322033948/http://www.blews-ltb.co.uk/photographs/photo.jsp?section=20&#34;&gt;comment on photos&lt;/a&gt;&amp;nbsp;- we had whole conversations on this website. &amp;nbsp;It was a way for me and my friends to stay in touch. &amp;nbsp;If I’d cracked the photo-uploading instead of it being a manual process for me, I would have invented Facebook. &amp;nbsp;If only I’d known….&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The work dried up and there was nothing else for a graduate in the early noughties, so I went back to Ford. &amp;nbsp;My first role back I picked the same technologies we’d been using before - XML, XSLT, only this time we were using JSPs instead of ASP. &amp;nbsp;Our project had a very tight budget and we’d worked out that using open source Java technologies and running the application on one of the many UNIX machines lying around the place was a lot cheaper than the Microsoft solution. &amp;nbsp;I think we were the first team in Ford Europe to pick Java at a time when the recommended approach was Microsoft. &amp;nbsp;We delivered on time and under budget, and Java was the way forward for the department from then on. &amp;nbsp;But on this project I met a guy who would impact my career probably more than he even realises, a guy I’d work with again later. &amp;nbsp;He told me that in Java we no longer used Vector by default, but ArrayList (whaaat? What’s an &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html&#34;&gt;ArrayList&lt;/a&gt;? I had no idea what the differences were between Java 1.1, which we’d learnt at university, and Java 1.2, which was now standard). &amp;nbsp;And questioned my choice of XML/XSL. &amp;nbsp;Although I’d been learning new technologies and growing, he was the one who made it clear to me that I needed to keep myself ahead of the curve with the technologies I was using, or planned to use, if I wanted to stay relevant and make my life easier.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;On the next project I worked with a genius guy who was definitely keeping ahead of the curve - he was using JavaScript to send small XML payloads to the server (which was coded in Java), and rendering the response in place on the page instead of reloading the whole thing. &amp;nbsp;Mind. &amp;nbsp;Blown. &amp;nbsp;I didn’t even hear the term &lt;a href=&#34;http://en.wikipedia.org/wiki/Ajax_(programming)&#34;&gt;Ajax&lt;/a&gt;&amp;nbsp;until a year or more later. &amp;nbsp;We were fortunate in that this was once again an internal application, so we controlled the browser. &amp;nbsp;This was back in the days when you wanted your users to be on IE5, as this was the only browser that supported this functionality.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;The next few projects/jobs I worked on were all more pedestrian variations on the JSP theme - first I learnt &lt;a href=&#34;https://struts.apache.org/release/1.3.x/userGuide/release-notes-1_1.html&#34;&gt;Struts&lt;/a&gt;, which at least made us realise there was a model, a view, and a controller. &amp;nbsp;Then at &lt;a href=&#34;http://web.archive.org/web/20050211061038/http://www.touchclarity.co.uk/&#34;&gt;Touch Clarity&lt;/a&gt; I learnt about &lt;a href=&#34;https://spring.io/blog/2004/03/24/spring-framework-1-0-final-released&#34;&gt;Spring MVC&lt;/a&gt;, which actually put the validation errors next to the boxes which cause the error - by default, without you having to mess around. &amp;nbsp;Spring was a revelation too, a framework that really tried not to get in your way. &amp;nbsp;It was also frustrating because you needed to understand its lifecycle, but it did so much heavy lifting for you, it sped up standard CRUD-app web development enormously.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;A couple of years passed, during which time I was still working on a web application (for an investment bank) but I can’t for the life of me remember what technologies we used (other than Java). &amp;nbsp;I know it was hard to test and I know the tricky stuff was “back end” not “front end”.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;In the next project where I had any control of the technology, I picked Spring since I’d had such a good experience previously. &amp;nbsp;It took 4 developers a couple of months or so to develop an admin application for a trading app. &amp;nbsp;Given the previous timescales I’d worked with, this seemed pretty good. &amp;nbsp;Until a few months later and two other guys on the project produced an admin app for our bank users in a matter of weeks. &amp;nbsp;I can’t remember what they used, maybe &lt;a href=&#34;http://grails.org/&#34;&gt;Grails&lt;/a&gt;? &amp;nbsp;But it was another demonstration of how I really should have been researching the field instead of simply sticking with what I knew, especially when I knew my knowledge was a couple of years out of date.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Fast forward to &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX&lt;/a&gt;, and we were using &lt;a href=&#34;http://en.wikipedia.org/wiki/Google_Web_Toolkit&#34;&gt;GWT&lt;/a&gt;, pre-2.0 - I think this probably feels natural if you’ve been a Swing or AWT developer, but I’m still not convinced it’s a sound web platform (although I know it has improved). &amp;nbsp;It was great because cross-browser was no longer an issue, but it was bad because it separates you from the underlying HTML, which means you can &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2011/01/gwt-why-verticalpanel-is-evil.html&#34;&gt;seriously mess up without realising&lt;/a&gt;. &amp;nbsp;It’s also hard to use CSS correctly when you don’t have access to all the HTML components.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So we come to more-or-less the present day, as it should be fairly obvious that during the time I’ve been working on the &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver&#34;&gt;MongoDB Java Driver&lt;/a&gt;&amp;nbsp;I haven’t done a lot of GUI development. I’m lucky because attending lots of conferences means I see a lot more of the current-trending technologies, but up until a couple of weeks ago I hadn’t had a chance to play with any of them.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;So now I’ve been trying &lt;a href=&#34;http://angular.js/&#34;&gt;Angular.js&lt;/a&gt;, &lt;a href=&#34;http://getbootstrap.com/&#34;&gt;Bootstrap&lt;/a&gt;, and &lt;a href=&#34;http://angular-ui.github.io/bootstrap/&#34;&gt;UI Bootstrap&lt;/a&gt;. &amp;nbsp;My goodness. &amp;nbsp;It’s a whole &amp;lsquo;nother world. &amp;nbsp;I’m seeing at conferences and user groups that developers are increasingly polyglot, so maybe there’s no such thing as “just” a Java developer any more, but if you are “just” a Java developer, I think it could be… interesting… to get your head around some of the techniques. &amp;nbsp;Since we don’t have closures, our callbacks are ugly and we tend not to program that way. &amp;nbsp;Async is not something that comes naturally in a Java environment, I believe, although after working that way at LMAX I’m personally sold on it. &amp;nbsp;Old-world JavaScript developers like I am/was might also find it hard to understand you can have clean, testable JavaScript code which Just Works. &amp;nbsp;It didn’t even occur to me to worry about browser compatibility, and my app not only worked on my phone as well as my laptop, but looked really phone-ish and awesome with very minimal effort.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;I’m currently on a plane on the way to QCon London where I’m &lt;a href=&#34;http://qconlondon.com/london-2014/presentation/HTML5,%20Angular.js,%20Groovy,%20Java,%20MongoDB%20all%20together%20-%20what%20could%20possibly%20go%20wrong?&#34;&gt;going to demo&lt;/a&gt; this Brave New World of web development (together with a nice Java back end to prove how awesome Java is to work with and, of course, a MongoDB database). &amp;nbsp;So it is not my intention in this post to explore what this new world looks like. &amp;nbsp;But I have seen the Present, and it’s a lot better than the Past. &amp;nbsp;Kids These Days don’t know how good they’ve got it - they’ve never had to struggle, to fight the browser, to hand-craft their JavaScript like we have, or had to work with raw, low-level JSPs and Servlets.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Now things are easier. &amp;nbsp;There are standards, there are libraries, there are best practices and YouTube videos showing you &lt;a href=&#34;http://www.youtube.com/watch?v=i9MHigUZKEM&#34;&gt;how to create apps in 60 minutes&lt;/a&gt;&amp;nbsp;(back in My Day I had to borrow someone else’s browser to use the Internet, and I debated for years the value of spending my own actual money on a Javascript actual paper actual book, which I could not afford). &amp;nbsp;Now, you can get something quite pretty and functionally interesting, working in a lot less time than I realised. &amp;nbsp;But that doesn’t mean the Kids These Days have it easier - it means there is so much more potential. &amp;nbsp;Instead of beating your head against trying to get a specific version of IE to do what you want, instead of having to write separate pages for different browsers (although maybe that still goes on), you can be exploring so much further into the possible, try things that no-one else has done yet. &amp;nbsp;It opens up so many interesting possibilities for apps on all platforms.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;p1&#34;&gt;Exciting times.&lt;/div&gt;&lt;div class=&#34;p2&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;p1&#34;&gt;So next time someone asks me “What is the de facto front-end framework for Java?” I’m going to say HTML5, CSS and JavaScript.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction to MongoDB and Big Data</title>
      <link>http://trishagee.github.io/post/introduction_to_mongodb_and_big_data</link>
      <pubDate>Thu, 23 Jan 2014 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/introduction_to_mongodb_and_big_data</guid>
      <description>&lt;p&gt;I wrote an article for the latest edition of Java Magazine which is an introduction to MongoDB for Java developers, and a nod to why it&amp;rsquo;s good in the &amp;ldquo;Big Data&amp;rdquo; space.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;table border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;&lt;tbody&gt;&lt;tr style=&#34;background-color: #d2d2d2; height: 30px;&#34;&gt;&lt;td&gt;&lt;img align=&#34;left&#34; alt=&#34;www.oracle.com/javamagazine&#34; class=&#34;navlogo&#34; src=&#34;http://images-cdn.dashdigital.com/javamagazine/include/icons/navbar_logo.gif?lm=1390425195000&#34; height=&#34;28&#34; /&gt;&lt;/td&gt;&lt;td align=&#34;right&#34; style=&#34;color: #666666; font-family: tahoma, sans-serif; font-size: 11px; font-weight: bold; line-height: 15px; padding-right: 5px;&#34;&gt;&lt;span id=&#34;top_right_text&#34;&gt;Look inside &amp;gt;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;background-color: white;&#34;&gt;&lt;td align=&#34;center&#34; colspan=&#34;2&#34; style=&#34;padding: 10px 0px;&#34;&gt;&lt;a href=&#34;http://www.oraclejavamagazine-digital.com/javamagazine/jan_feb_2014?pg=52&#34; onclick=&#34;window.open(&#39;http://www.oraclejavamagazine-digital.com/javamagazine/jan_feb_2014?pg=52&#39;,&#39;sharewidget&#39;,&#39;toolbar=no,menubar=no,resizable=yes,scrollbars=yes,left=0,top=0,width=&#39;+(screen.width-10)+&#39;,height=&#39;+(screen.height-10)+&#39;&#39;);return false;&#34; target=&#34;_blank&#34; title=&#34;View Magazine&#34;&gt;&lt;img alt=&#34;51&#34; border=&#34;0&#34; src=&#34;http://images-cdn.dashdigital.com/javamagazine/jan_feb_2014/data/imgpages/smtn/0052_vyvpwu.gif?lm=1390425195000&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr style=&#34;background-color: #d2d2d2; height: 30px;&#34;&gt;&lt;td align=&#34;center&#34; colspan=&#34;2&#34; style=&#34;color: #666666; font-family: tahoma, sans-serif; font-size: 11px; font-weight: bold; line-height: 15px;&#34;&gt;&lt;span id=&#34;bottom_text&#34;&gt;MongoDB and Big Data&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spock: Data Driven Testing</title>
      <link>http://trishagee.github.io/post/spock_data_driven_testing</link>
      <pubDate>Fri, 20 Dec 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/spock_data_driven_testing</guid>
      <description>&lt;p&gt;In the last two articles on Spock I&amp;rsquo;ve covered &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-is-awesome-seriously-simplified.html&#34;&gt;mocking&lt;/a&gt; and &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-passes-next-test-painless-stubbing.html&#34;&gt;stubbing&lt;/a&gt;.  And I was pretty sold on Spock just based on that.  But for a database driver, there&amp;rsquo;s a killer feature: &amp;nbsp;&lt;a href=&#34;http://docs.spockframework.org/en/latest/data_driven_testing.html&#34;&gt;Data Driven Testing&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;All developers have a tendency to think of and test the happy path.  Not least of all because that&amp;rsquo;s usually the path in the User Story - &amp;ldquo;As a customer I want to withdraw money and have the correct amount in my hand&amp;rdquo;.  We tend not to ask &amp;ldquo;what happens if they ask to withdraw money when the cash machine has no cash?&amp;rdquo; or &amp;ldquo;what happens when their account balance is zero?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;With any luck you&amp;rsquo;ll have a test suite covering your happy paths, and probably at least twice as many grumpy paths.  If you&amp;rsquo;re like me, and you like one test to test one thing (and who doesn&amp;rsquo;t?), sometimes your test classes can get quite long as you test various edge cases.  Or, much worse (and I&amp;rsquo;ve done this too) you use a calculation remarkably like the one you&amp;rsquo;re testing to generate test data.  You run your test in a loop with the calculation and lo!  The test passes.  Woohoo?&lt;br /&gt;&lt;br /&gt;Not that long ago I went through a process of re-writing a lot of unit tests that I had written a year or two before - we were about to do a big refactor of the code that generated some important numbers, and we wanted our tests to tell us we hadn&amp;rsquo;t broken anything with the refactor. The only problem was, the tests used a calculation rather similar to the production calculation, and borrowed some constants to create the expected number. &amp;nbsp;I ended up running the tests to find the numbers the test was generating as expected values, and hardcoding those values into the test. It felt dirty, but it was necessary - I wanted to make sure the refactoring didn&amp;rsquo;t change the expected numbers as well as the ones generated by the real code. &amp;nbsp;This is not a process I want to go through ever again.&lt;br /&gt;&lt;br /&gt;When you&amp;rsquo;re testing these sorts of things, you try and think of a few representative cases, code them into your tests, and hope that you&amp;rsquo;ve covered the main areas.  What would be far nicer is if you could shove a whole load of different data into your system-under-test and make sure the results look sane.&lt;br /&gt;&lt;br /&gt;An example from the Java driver is that we had tests that were checking the parsing of the URI - you can initialise your MongoDB settings simply using a String containing the URI.&lt;br /&gt;&lt;br /&gt;The old tests looked like:&lt;br /&gt; (See &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/master/src/test/com/mongodb/MongoClientURITest.java&#34;&gt;MongoClientURITest&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;Using Spock&amp;rsquo;s data driven testing, we changed this to:&lt;br /&gt;&lt;br /&gt; (See &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/3.0.x/driver/src/test/unit/org/mongodb/MongoClientURISpecification.groovy&#34;&gt;MongoClientURISpecification&lt;/a&gt;)&lt;br /&gt;&lt;br /&gt;Instead of having a separate test for every type of URL that needs parsing, you have a single test and each line in the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;where:&lt;/span&gt; section is a new combination of input URL and expected outputs.  Each one of those lines used to be a test.  In fact, some of them probably weren&amp;rsquo;t tests as the ugliness and overhead of adding another copy-paste test seemed like overkill.  But here, in Spock, it&amp;rsquo;s just a case of adding one more line with a new input and set of outputs.&lt;br /&gt;&lt;br /&gt;The major benefit here, to me, is that it&amp;rsquo;s dead easy to add another test for a &amp;ldquo;what if?&amp;rdquo; that occurs to the developer.  You don&amp;rsquo;t have to have yet another test method that someone else is going to wonder &amp;ldquo;what the hell are we testing this for?&amp;rdquo;.  You just add another line which documents another set of expected outputs given the new input.&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s easy, it&amp;rsquo;s neat, it&amp;rsquo;s succinct.&lt;br /&gt;&lt;br /&gt;One of the major benefits of this to our team is that we don&amp;rsquo;t argue any more about whether a single test is testing too much.  In the past, we had tests like:&lt;br /&gt; And I can see why we have all those assertions in the same test, because technically these are all the same concept - make sure that each type of WriteConcern creates the correct command document.  I believe these should be one test per line - because each line in the test is testing a different input and output, and I would want to document that in the test name (&amp;ldquo;fsync write concern should have fsync flag in getLastError command&amp;rdquo;, &amp;ldquo;journalled write concern should set j flag to true in getLastError command&amp;rdquo; etc).  Also don&amp;rsquo;t forget that in JUnit, if the first assert fails, the rest of the test is not run.  Therefore you have no idea if this is a failure that affects all write concerns, or just the first one.  You lose the coverage provided by the later asserts.&lt;br /&gt;&lt;br /&gt;But the argument against my viewpoint is then we&amp;rsquo;d have seven different one-line tests.  What a waste of space.&lt;br /&gt;&lt;br /&gt;You could argue for days about the best way to do it, or that this test is a sign of some other smell that needs addressing.  But if you&amp;rsquo;re in a real world project and your aim is to both improve your test coverage and improve the tests themselves, these arguments are getting in the way of progress.  The nice thing about Spock is that you can take these tests that test too much, and turn them into something a bit prettier:&lt;br /&gt; You might be thinking, what&amp;rsquo;s the advantage over the JUnit way?  Isn&amp;rsquo;t that the same thing but Groovier?  But there&amp;rsquo;s one important difference - all the lines under &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;where:&lt;/span&gt; get run, regardless of whether the test before it passes or fails.  This basically is seven different tests, but takes up the same space as one.&lt;br /&gt;&lt;br /&gt;That&amp;rsquo;s great, but if just one of these lines fails, how do you know which one it was if all seven tests are masquerading as one?  That&amp;rsquo;s where the awesome &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;@Unroll&lt;/span&gt; annotation comes in.  This reports the passing or failing of each line as if it were a separate test.  By default, when you run an unrolled test it will get reported as something like:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-zFO5Jwl5upA/UrRgIlxq3SI/AAAAAAAAMBQ/c6WG-FhP_P4/s1600/Unroll1.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-zFO5Jwl5upA/UrRgIlxq3SI/AAAAAAAAMBQ/c6WG-FhP_P4/s1600/Unroll1.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;But in the test above we put some magic keywords into the test name: &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;&amp;lsquo;&lt;b&gt;#wc&lt;/b&gt; should return getlasterror document &lt;b&gt;#commandDocument&lt;/b&gt;&amp;lsquo;&lt;/span&gt; - note that these values with &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;#&lt;/span&gt; in front are the same headings from the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;where:&lt;/span&gt; section. They&amp;rsquo;ll get replaced by the value being run in the current test:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-2KnezQJM7R4/UrRgyNH_SHI/AAAAAAAAMBY/5TEwt2o691E/s1600/Unroll2.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-2KnezQJM7R4/UrRgyNH_SHI/AAAAAAAAMBY/5TEwt2o691E/s1600/Unroll2.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Yeah, it can be a bit of a mouthful if the &lt;span style=&#34;font-family: Courier New, Courier, monospace;&#34;&gt;toString&lt;/span&gt; is hefty, but it does give you an idea of what was being tested, and it&amp;rsquo;s prettier if the inputs have nice succinct string values:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-E7X8nOwjOQI/UrRiGPse7cI/AAAAAAAAMBk/7Y1-MvPvUxk/s1600/Unroll3.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-E7X8nOwjOQI/UrRiGPse7cI/AAAAAAAAMBk/7Y1-MvPvUxk/s1600/Unroll3.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;This, combined with Spock&amp;rsquo;s awesome &lt;a href=&#34;http://hamletdarcy.blogspot.com.es/2009/05/new-power-assertions-in-groovy.html&#34;&gt;power assert&lt;/a&gt;&amp;nbsp;makes it dead simple to see what went wrong when one of these tests fails. &amp;nbsp;Let&amp;rsquo;s take the example of (somehow) the incorrect host being returned for one of the input URIs:&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-Uoemw3QA594/UrRiQoYr_II/AAAAAAAAMBs/wJQBQa8XhOM/s1600/Unroll4.tiff&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-Uoemw3QA594/UrRiQoYr_II/AAAAAAAAMBs/wJQBQa8XhOM/s1600/Unroll4.tiff&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;Data driven testing might lead one to over-test the simple things, but the cost of adding another &amp;ldquo;what if?&amp;rdquo; is so low - just another line - and the additional safety you get from trying a different input is rather nice. &amp;nbsp;We&amp;rsquo;ve been using them for parsers and simple generators, where you want to throw in a bunch of inputs to a single method and see what you get out.&lt;br /&gt;&lt;br /&gt;I&amp;rsquo;m totally sold on this feature, particularly for our type of application (the Java driver does a lot of taking stuff in one shape and turning it into something else). &amp;nbsp;Just in case you want a final example, here&amp;rsquo;s a final one.&lt;br /&gt;&lt;br /&gt;The old way:&lt;br /&gt; &amp;hellip;and in Spock:&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to get started with the new MongoDB Java Driver</title>
      <link>http://trishagee.github.io/post/how_to_get_started_with_the_new_mongodb_java_driver</link>
      <pubDate>Sat, 31 Aug 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/how_to_get_started_with_the_new_mongodb_java_driver</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://blog.mongodb.org/post/59769560940/the-mongodb-java-driver-3-0-whats-changing&#34;&gt;second in my short series of blogs&lt;/a&gt; about the new Java driver is now available for your perusal. &amp;nbsp;In it, there&amp;rsquo;s some guidance on how to get started using the new driver, whether you want to use the new (unfinished) API, the existing &amp;ldquo;classic&amp;rdquo; API, or a blend of both.&lt;br /&gt;&lt;br /&gt;The post also shows that &lt;a href=&#34;http://www.gradle.org/&#34;&gt;Gradle&lt;/a&gt; is prettier than &lt;a href=&#34;http://maven.apache.org/&#34;&gt;Maven&lt;/a&gt;. &amp;nbsp;Sorry Maven.&lt;br /&gt;&lt;br /&gt;If you are going to play with the new driver, please read all the caveats carefully. &amp;nbsp;I know it looks a bit like the warnings on your prescription medicine, but it serves the same purpose. &amp;nbsp;Short version: the driver is not finished yet, and should not be used in production.&lt;br /&gt;&lt;br /&gt;We really want to hear your experiences with the driver - it is an open source project and &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; is very much driven by the community, we want to hear from you. &amp;nbsp;But only if you say nice things. &amp;nbsp;No, seriously, please tell us if you have problems, if functionality is missing, if your tests fail if you start to use it, etc etc etc.&lt;br /&gt;&lt;br /&gt;Go play.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The 3.0 Java Driver - Design Goals</title>
      <link>http://trishagee.github.io/post/the_30_java_driver__design_goals</link>
      <pubDate>Tue, 13 Aug 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/the_30_java_driver__design_goals</guid>
      <description>&lt;p&gt;I feel slightly like a traitor to my own blog, as I&amp;rsquo;ve written a blog post for Somewhere Else. &amp;nbsp;I&amp;rsquo;ve written about the &lt;a href=&#34;http://blog.mongodb.org/post/58136652766/the-mongodb-java-driver-3-0&#34;&gt;design goals for the 3.0 MongoDB Java Driver&lt;/a&gt; in the official MongoDB blog (seems sensible, right?). &amp;nbsp;I&amp;rsquo;m not sure how I feel about cross-posting the entire contents, so I&amp;rsquo;m just linking you to them instead.&lt;br /&gt;&lt;br /&gt;Anyone who&amp;rsquo;s been to my Backwards Compatibility presentation this year might notice something familiar about the content. &amp;nbsp;The talk covers the design goals of the new driver, and this blog post will let you read them in your own time rather than having me fire them at you at 100mph.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spock passes the next test - Painless Stubbing</title>
      <link>http://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing</link>
      <pubDate>Wed, 10 Jul 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/spock_passes_the_next_test__painless_stubbing</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-is-awesome-seriously-simplified.html&#34;&gt;last post&lt;/a&gt; I talked about our need for some improved testing tools, our choice of &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt; as something to spike, and how mocking looks in Spock.&lt;br /&gt;&lt;br /&gt;As that blog got rather long, I saved the next installment for a separate post.&lt;br /&gt;&lt;br /&gt;Today I want to look at stubbing.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Stubbing&lt;/b&gt;&lt;br /&gt;Mocking is great for checking &lt;i&gt;outputs&lt;/i&gt; - in the example in the last post, we&amp;rsquo;re checking that the process of encoding an array calls the right things on the way out, if you like - that the right stuff gets poked onto the &lt;code&gt;bsonWriter&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;Stubbing is great for faking your &lt;i&gt;inputs&lt;/i&gt; (I don&amp;rsquo;t know why this difference never occurred to me before, but&amp;nbsp;&lt;a href=&#34;http://www.devoxx.com/display/UK13/I+hate+writing+unit+tests%2C+how+come+everybody+else+enjoys+it&#34;&gt;Colin&amp;rsquo;s talk at Devoxx UK&lt;/a&gt;&amp;nbsp;made this really clear to me). &lt;br /&gt;&lt;br /&gt;One of the things we need to do in the compatibility layer of the new driver is to wrap all the new style Exceptions that can be thrown by the new architecture layer and turn them into old-style Exceptions, for backwards compatibility purposes. &amp;nbsp;Sometimes testing the exceptional cases is&amp;hellip; challenging. &amp;nbsp;So I opted to do this with Spock.&lt;br /&gt;&lt;br /&gt;So here we can use a real &lt;code&gt;DB&lt;/code&gt; class, but with a mock &lt;code&gt;Mongo&lt;/code&gt; that will return us a &amp;ldquo;mock&amp;rdquo; &lt;code&gt;Session&lt;/code&gt;. &amp;nbsp;It&amp;rsquo;s not actually a mock though, it&amp;rsquo;s more of a stub because we want to tell it how to behave when it&amp;rsquo;s called - in this test, we want to force it to throw an &lt;code&gt;org.mongodb.MongoException&lt;/code&gt; whenever &lt;code&gt;execute&lt;/code&gt; is called. &amp;nbsp;It doesn&amp;rsquo;t matter to us what get passed in to the execute method (that&amp;rsquo;s what the underscore means on line 16), what matters is that when it gets called it throws the correct type of Exception.&lt;br /&gt;&lt;br /&gt;Like before, the &lt;code&gt;when&lt;/code&gt;: section shows the bit we&amp;rsquo;re actually trying to test. In this case, we want to call &lt;code&gt;rename&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;Then finally the &lt;code&gt;then:&lt;/code&gt; section asserts that we received the correct sort of Exception. &amp;nbsp;It&amp;rsquo;s not enormously clear, although I&amp;rsquo;ve kept the full namespace in to try and clarify, but the aim is that any &lt;code&gt;&lt;b&gt;org&lt;/b&gt;.mongodb.MongoException&lt;/code&gt; that gets thrown by the new architecture gets turned into the appropriate &lt;code&gt;&lt;b&gt;com&lt;/b&gt;.mongodb.MongoException&lt;/code&gt;. &amp;nbsp;We&amp;rsquo;re sort of &amp;ldquo;lucky&amp;rdquo; because the old code is in the wrong package structure, and in the new architecture we&amp;rsquo;ve got a chance to fix this and put stuff into the right place.&lt;br /&gt;&lt;br /&gt;Once I&amp;rsquo;d tracked down all the places Exceptions can escape and started writing these sorts of tests to exercise those code paths, not only did I feel more secure that we wouldn&amp;rsquo;t break backwards compatibility by leaking the wrong Exceptions, but we also found our test coverage went up - and more importantly, in the &lt;i&gt;un&lt;/i&gt;happy paths, which are often harder to test.&lt;br /&gt;&lt;br /&gt;I mentioned in the last post that we already did some simple stubbing to help us test the data driver. Why not just keep using that approach?  &lt;br /&gt;&lt;br /&gt;Well, these stubs end up looking like this:&lt;br /&gt;&lt;br /&gt;Ick.&lt;br /&gt;&lt;br /&gt;And you end up extending them so you can just override the method you&amp;rsquo;re interested in (particularly in the case of forcing a method to throw an exception). &amp;nbsp;Most irritatingly to me, these stubs live away from the actual tests, so you can&amp;rsquo;t easily see what the expected behaviour is. &amp;nbsp;In the Spock test, the expected stubbed behaviour is defined on line 16, the call that will provoke it is on line 19 and the code that checks the expectation is on line 22. &amp;nbsp;It&amp;rsquo;s all within even the smallest monitor&amp;rsquo;s window.&lt;br /&gt;&lt;br /&gt;So stubbing in Spock is painless. &amp;nbsp;Next:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://mechanitis.blogspot.com.es/2013/12/spock-data-driven-testing.html&#34;&gt;Data Driven Testing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spock is awesome! Seriously Simplified Mocking</title>
      <link>http://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/spock_is_awesome_seriously_simplified_mocking</guid>
      <description>&lt;p&gt;We&amp;rsquo;re constantly fighting a battle when developing the new MongoDB Java driver between using tools that will do heavy lifting for us and minimising the dependencies a user has to download in order to use our driver. &amp;nbsp;Ideally, we want the number of dependencies to be zero.&lt;br /&gt;&lt;br /&gt;This is not going to be the case when it comes to testing, however. &amp;nbsp;At the very least, we&amp;rsquo;re going to use JUnit or TestNG (we used testng in the previous version, we&amp;rsquo;ve switched to JUnit for 3.0). &amp;nbsp;Up until recently, we worked hard to eliminate the need for a mocking framework - the driver is not a large application with interacting services, most stuff can be tested either as an integration test or with very simple stubs.&lt;br /&gt;&lt;br /&gt;Recently I was working on the serialisation layer - we&amp;rsquo;re making quite big changes to the model for encoding and decoding between &lt;a href=&#34;http://bsonspec.org/&#34;&gt;BSON&lt;/a&gt; and Java, we&amp;rsquo;re hoping this will simplify our lives but also make things a lot easier for the ODMs (Object-Document Mappers) and third party libraries. &amp;nbsp;At this level, it makes a lot of sense to introduce mocks - I want to ensure particular methods are called on the writer, for example, I don&amp;rsquo;t want to check actual byte values, that&amp;rsquo;s not going to be very helpful for documentation (although there is a level where that is a sensible thing to do).&lt;br /&gt;&lt;br /&gt;We started using &lt;a href=&#34;http://jmock.codehaus.org/&#34;&gt;JMock&lt;/a&gt; to begin with, it&amp;rsquo;s what I&amp;rsquo;ve been using for a while, and it gave us what we wanted - a simple mocking framework (I tried &lt;a href=&#34;https://code.google.com/p/mockito/&#34;&gt;Mockito&lt;/a&gt; too, but I&amp;rsquo;m not so used to the failure messages, so I found it really hard to figure out what was wrong when a test failed). &lt;br /&gt;&lt;br /&gt;I knew from my spies at LMAX that there&amp;rsquo;s some &lt;a href=&#34;http://groovy.codehaus.org/&#34;&gt;Groovy&lt;/a&gt; test framework called &lt;a href=&#34;https://code.google.com/p/spock/&#34;&gt;Spock&lt;/a&gt; that is awesome, apparently, but I&amp;nbsp;immediately&amp;nbsp;discarded it - I feel very strongly that tests are documentation, and since the users of the Java driver are largely Java developers, I felt like introducing tests in a different language was an added complexity we didn&amp;rsquo;t need.&lt;br /&gt;&lt;br /&gt;Then I went to GeeCON, and my ex-colleague &lt;a href=&#34;https://twitter.com/IsraKaos&#34;&gt;Israel&lt;/a&gt; forced me to go to &lt;a href=&#34;http://geecon.org/speakers/ken-sipe&#34;&gt;the talk on Spock&lt;/a&gt;. &amp;nbsp;And I realised just how wrong I had been. &amp;nbsp;Far from adding complexity, here was a lovely, descriptive way of writing tests. &amp;nbsp;It&amp;rsquo;s flexible, and yet structured enough get you thinking in a way that should create good tests.&lt;br /&gt;&lt;br /&gt;Since we&amp;rsquo;re already using &lt;a href=&#34;http://www.gradle.org/&#34;&gt;gradle&lt;/a&gt;, which is Groovy as well, we decided it was worth a spike to see if Spock would give us any benefits.&lt;br /&gt;&lt;br /&gt;During the spike I converted a selection of our tests to Spock tests to see what it looks like on a &lt;i&gt;real&lt;/i&gt; codebase. &amp;nbsp;I had very specific things I wanted to try out:&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Mocking&lt;/li&gt;&lt;li&gt;Stubbing&lt;/li&gt;&lt;li&gt;Data driven testing&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;In the talk I also saw useful annotation like&amp;nbsp;&lt;code&gt;@Requires&lt;/code&gt;, which I&amp;rsquo;m pretty sure we&amp;rsquo;re going to use, but I don&amp;rsquo;t think it&amp;rsquo;s made it into a build yet.&lt;br /&gt;&lt;br /&gt;So, get this, I&amp;rsquo;m going to write a blog post with Actual Code in. &amp;nbsp;Yeah, I know, you all thought I was just a poncy evangelist these days and didn&amp;rsquo;t do any real coding any more.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;First up, Mocking&lt;/b&gt;&lt;br /&gt;So, as I said, I have a number of tests checking that encoding of Java objects works the way we expect. &amp;nbsp; The easiest way to test this is to mock our &lt;a href=&#34;https://github.com/mongodb/mongo-java-driver/blob/3.0.x/bson/src/main/org/bson/BSONWriter.java&#34;&gt;BSONWriter&lt;/a&gt; class to ensure that the right interactions are happening against it. &amp;nbsp;This is a nice way to check that when you give an encoder a particular set of data, it gets serialised in the way BSON expects. These tests ended up looking something like this:&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;(Yeah, I&amp;rsquo;m still learning Spanish).&lt;br /&gt;&lt;br /&gt;So that&amp;rsquo;s quite nice, my test checks that given a List of Strings, they get serialised correctly. &amp;nbsp;What&amp;rsquo;s not great is some of the setup overhead:&lt;br /&gt;&lt;br /&gt;Obviously some of the things there are going to be ringing some people&amp;rsquo;s alarm bells, but let&amp;rsquo;s assume for a minute that all decisions were taken carefully and that pros and cons were weighed accordingly.&lt;br /&gt;&lt;br /&gt;So:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Mocking concrete classes is not pretty in JMock, just look at that &lt;code&gt;setUp&lt;/code&gt; method.&lt;/li&gt;&lt;li&gt;We&amp;rsquo;re using the &lt;code&gt;JUnitRuleMockery&lt;/code&gt;, which appears to be Best Practice (and means you&amp;rsquo;re less likely to forget the&amp;nbsp;&lt;code&gt;@RunWith(JMock.class)&lt;/code&gt; annotation), but checkstyle hates it - Public Fields Are Bad as we all know.&lt;/li&gt;&lt;/ul&gt;But it&amp;rsquo;s fine, a small amount of boilerplate for all our tests that involve mocking is an OK price to pay to have some nice tests.&lt;br /&gt;&lt;br /&gt;I converted this test to a Spock test. &amp;nbsp;Groovy purists will notice that it&amp;rsquo;s still very Java-y, and that&amp;rsquo;s intentional - I want these tests, at least at this stage while we&amp;rsquo;re getting used to it, to be familiar to Java programmers, our main audience.&lt;br /&gt;&lt;br /&gt; Some initial observations:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;It&amp;rsquo;s a really simple thing, but I like having the&amp;nbsp;&lt;code&gt;@Subject&lt;/code&gt; annotation on the thing you&amp;rsquo;re testing. &amp;nbsp;In theory it should be obvious which of your fields or variables is the subject under test, but in practice that&amp;rsquo;s not always true.&lt;/li&gt;&lt;li&gt;Although it freaks me out as someone who&amp;rsquo;s been doing Java for the last 15 years, I really like the String for method name - although in this case it&amp;rsquo;s the same as the JMock/JUnit equivalent, it gives a lot more flexibility for describing the purpose of this test.&lt;/li&gt;&lt;/ul&gt;&lt;ul&gt;&lt;li&gt;Mocking is painless, with a simple call to &lt;code&gt;Mock()&lt;/code&gt;, even though we&amp;rsquo;re still mocking concrete classes (this is done simply by adding &lt;a href=&#34;http://cglib.sourceforge.net/&#34;&gt;cglib&lt;/a&gt; and &lt;a href=&#34;https://code.google.com/p/objenesis/&#34;&gt;obgenesis&lt;/a&gt; to the dependencies).&lt;/li&gt;&lt;li&gt;I &lt;i&gt;love&lt;/i&gt;&amp;nbsp;that the phases of Spock (&lt;code&gt;setup: when: then:&lt;/code&gt;) document the different parts of the test while also being the useful magic keywords which tell Spock how to run the test. &amp;nbsp;I know other frameworks provide this, but we&amp;rsquo;ve been working with JUnit and I&amp;rsquo;ve been in the habit of commenting my steps with &lt;code&gt;//given //when //then&lt;/code&gt;.&lt;/li&gt;&lt;li&gt;Thanks to Groovy, creation of lists is less boiler plate (line 9). &amp;nbsp;Not a big deal, but just makes it easier to read.&lt;/li&gt;&lt;li&gt;I&amp;rsquo;ve got very used to the way expectations are set up in JMock, but I have to say that &lt;code&gt;1 * bsonWriter.blahblahblah()&lt;/code&gt; is much more readable. &amp;nbsp;&lt;/li&gt;&lt;li&gt;I love that everything after &lt;code&gt;then:&lt;/code&gt; is an assertion, I think it makes it really clear what you expect to happen after you invoke the thing you&amp;rsquo;re testing.&lt;/li&gt;&lt;/ul&gt;So mocking is awesome. &amp;nbsp;What&amp;rsquo;s next?&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/07/spock-passes-next-test-painless-stubbing.html&#34;&gt;Painless Stubbing&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;http://mechanitis.blogspot.com.es/2013/12/spock-data-driven-testing.html&#34;&gt;Data Driven Testing&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How are you using MongoDB with Java?</title>
      <link>http://trishagee.github.io/post/how_are_you_using_mongodb_with_java</link>
      <pubDate>Thu, 16 May 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/how_are_you_using_mongodb_with_java</guid>
      <description>&lt;p&gt;So, like one of my presentations, I have a question for you. &amp;nbsp;Actually, I have more than one question for you. &amp;nbsp;I&amp;rsquo;m not going to bother with survey monkey or whatever, I want to share the answers so please, answers in the comments:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Are you using the Java driver for MongoDB in your application?&lt;/li&gt;&lt;li&gt;Are you using the Java driver directly, or are you using a third party library like Morphia, Spring Data, the Scala driver, your own abstraction layer, etc?&lt;/li&gt;&lt;li&gt;If you&amp;rsquo;re using a third party library, why did you choose that over using the Java driver directly?&lt;/li&gt;&lt;li&gt;If you&amp;rsquo;re using the Java driver directly, what do you like about it?&amp;nbsp;&lt;/li&gt;&lt;li&gt;If you&amp;rsquo;re using the Java driver directly, are there any areas that give you pain? &amp;nbsp;Areas for improvement?&lt;/li&gt;&lt;li&gt;Which version of Java are you using?&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;Feel free to leave additional information if you have it. &amp;nbsp;And this is a public blog, so if you&amp;rsquo;re really mean I&amp;rsquo;ll just delete your comment. &amp;nbsp;So there.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>It Depends</title>
      <link>http://trishagee.github.io/post/it_depends</link>
      <pubDate>Mon, 18 Mar 2013 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/it_depends</guid>
      <description>&lt;p&gt;Don&amp;rsquo;t you hate it when you ask a perfectly good question, and someone comes back with the answer &amp;ldquo;it depends&amp;rdquo;?&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s so frustrating to think that in a world of ones and zeros, people can&amp;rsquo;t give absolute answers and you can&amp;rsquo;t rely on &amp;ldquo;best practice&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s an answer I&amp;rsquo;ve given so many times, especially when someone asks about performance. &amp;nbsp;Well, I&amp;rsquo;ve had my&amp;nbsp;comeuppance. &amp;nbsp;The entire exercise of designing the new Java driver for &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; has been nothing but a series of questions where the answer is &amp;ldquo;it depends&amp;rdquo;:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Which Java version are our users, um, using?&lt;/li&gt;&lt;li&gt;Do people want an asynchronous driver?&lt;/li&gt;&lt;li&gt;How will they want to work with async?&lt;/li&gt;&lt;li&gt;Will they want to use async and synchronous method calls from the same application?&lt;/li&gt;&lt;li&gt;Do people typically use the Java driver directly, or do they use something that wraps it, like &lt;a href=&#34;https://code.google.com/p/morphia/&#34;&gt;Morphia&lt;/a&gt; or &lt;a href=&#34;http://www.springsource.org/spring-data&#34;&gt;Spring Data&lt;/a&gt;?&lt;/li&gt;&lt;li&gt;What&amp;rsquo;s most important for users in terms of performance? &amp;nbsp;Throughput? Latency? Consistent GC profile? Something else?&lt;/li&gt;&lt;li&gt;What sorts of operations are our users doing?&lt;/li&gt;&lt;li&gt;Do people usually update their driver and the server version at the same time?&lt;/li&gt;&lt;li&gt;Is it easier for them to update their driver version than their server version?&lt;/li&gt;&lt;li&gt;Do they use (or will they need) custom encoders and decoders?&lt;/li&gt;&lt;li&gt;When should we deprecate? &amp;nbsp;When should we remove deprecated methods?&lt;/li&gt;&lt;/ul&gt;&amp;hellip;and so on, and so forth.&lt;br /&gt;&lt;br /&gt;It&amp;rsquo;s such a change from the sort of development I&amp;rsquo;m used to: &amp;ldquo;the business&amp;rdquo; (a business analyst, a customer, a business owner) comes to you with a requirement, you ask a bunch of questions, preferably explaining the trade-offs that come with decisions or approaches, and then you and the team come up with a design and implement it. &amp;nbsp;If you&amp;rsquo;re agile, this is all done in a nice, iterative fashion, which hopefully leads to &amp;ldquo;the business&amp;rdquo; being happy, or at the very least to another series of stories/requirements to work on.&lt;br /&gt;&lt;br /&gt;The problem is that working on a library, particularly an open source library, is a completely different thing. &amp;nbsp;We don&amp;rsquo;t even know who our users are. &amp;nbsp;This statement is true for pretty much any web application, of course, but there at least you can (if you choose) use tools like analytics and &lt;a href=&#34;http://en.wikipedia.org/wiki/A/B_testing&#34;&gt;A/B testing&lt;/a&gt; to figure out what works for your users and what doesn&amp;rsquo;t.&lt;br /&gt;&lt;br /&gt;When your library is used for free by all kinds of different teams and companies, including organisations behind closed doors, you have no idea what&amp;rsquo;s being used, what works, what people like, what people don&amp;rsquo;t like. &amp;nbsp;The most visible feedback you have is when you see blog posts telling everyone how bad your product is.&lt;br /&gt;&lt;br /&gt;This makes the design exercise VERY difficult. &amp;nbsp;Take performance for example. &amp;nbsp;Having come from a high performance, low latency background, I&amp;rsquo;m desperate to have a very extensive suite of automated performance tests (and we do already have some). &amp;nbsp;But how do I design those, when I don&amp;rsquo;t know:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;What operations are typical for our users&lt;/li&gt;&lt;li&gt;Whether our users care more about latency or throughput, or mean latency vs the long tail, or GC pauses, etc&lt;/li&gt;&lt;li&gt;How much data customers tend to punt around&lt;/li&gt;&lt;li&gt;What the hardware or network topology looks like?&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;The number one lesson you learn when performance testing is to make your test environment as similar to production as possible. &amp;nbsp;How can we do that for all our customers?&lt;br /&gt;&lt;br /&gt;Well, we can&amp;rsquo;t. &amp;nbsp;Of course.&lt;br /&gt;&lt;br /&gt;What we can do is offer an easy way for our users to test it for themselves, with their own data, their own hardware, their own use-cases. &amp;nbsp;If we can provide some sort of hook into standard metrics, we could get users to plug into that and do what they needed. &amp;nbsp;In theory, as we get more examples of these standard metrics from a range of users, it will be easier for us to help them diagnose problems. &lt;br /&gt;&lt;br /&gt;What I discovered thinking about this problem is that I was asking the wrong question - it&amp;rsquo;s not &amp;ldquo;how do we test this?&amp;rdquo; but &amp;ldquo;how do we make it as easy as possible for users to test this in a production-like environment?&amp;rdquo;.&lt;br /&gt;&lt;br /&gt;My biggest headache has been backwards compatibility. &amp;nbsp;I&amp;rsquo;ve worked on plenty of systems where we&amp;rsquo;ve provided an API which has to be maintained in a friendly way for those who use it. &amp;nbsp;That&amp;rsquo;s tough enough - you have to be careful to only add methods, not to change signatures or remove them altogether. &amp;nbsp;But when your system is not simply an API to code against, but a library that runs within other people&amp;rsquo;s systems, this problem is even harder. &amp;nbsp;&lt;a href=&#34;http://qconlondon.com/london-2013/presentation/Parallel%20KEYNOTE:%208%20Lines%20of%20Code%20-%20Fleming%20Room%203rd%20Floor&#34;&gt;Greg Young talked at QCon&lt;/a&gt; about this problem from the developer&amp;rsquo;s point of view - every piece of code in your system, even if it&amp;rsquo;s a third party library, is your code. &amp;nbsp;Because you&amp;rsquo;re the one who&amp;rsquo;ll get called at three in the morning if your system falls over with a ConcurrentModificationException in some third party data structure. &lt;br /&gt;&lt;br /&gt;So as library developers, we have to not only provide excellent quality, well tested code, but we also have to let our baby go off and run in strange environments. &amp;nbsp;Ones that might not be running Oracle&amp;rsquo;s Java 1.7, ones that might contain other libraries that could clash with our own. &amp;nbsp;Have you ever looked at all the Maven dependencies in a large project? &amp;nbsp;You can end up with conflicting versions of common libraries (e.g. logging or &lt;a href=&#34;http://en.wikipedia.org/wiki/Dependency_injection&#34;&gt;DI&lt;/a&gt; frameworks) as every library you use pulls in dozens of libraries for itself.&lt;br /&gt;&lt;br /&gt;In our case then, we need to use as few dependencies as possible, and to write nice, clean, modern Java, whilst supporting older versions of Java. &amp;nbsp;What&amp;rsquo;s modern enough? &amp;nbsp;We know that some large organisations take a loooong time to upgrade to the latest versions of Java. &amp;nbsp;We currently support Java 5 and above, as 5 was a big enough change (and is old enough now) to be a good point to draw the line. &amp;nbsp;But what about Java 7, with its shiny new &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/api/java/nio/channels/package-summary.html&#34;&gt;asynchronous channels&lt;/a&gt;? &amp;nbsp;That would be awesome for a driver like ours, an application that exists solely to connect to some server somewhere. &amp;nbsp;What about Java 8, with &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/11/java-8-introduction-to-lambdas-article.html&#34;&gt;lambda goodness&lt;/a&gt; and a very appealing &lt;a href=&#34;http://cr.openjdk.java.net/~briangoetz/lambda/sotc3.html&#34;&gt;Stream interface&lt;/a&gt;, that supports (and encourages) a syntax that looks like it might work well for providing a fluent API for querying, I dunno, databases? &amp;nbsp;How do we make the most out of advances in modern Java, without alienating our existing users?&lt;br /&gt;&lt;br /&gt;And, of course, I haven&amp;rsquo;t even talked about actually changing the API. &amp;nbsp;The existing Java driver doesn&amp;rsquo;t even make use of generics. &amp;nbsp;How can we change our API to provide a more modern-looking interface, without either forcing all our users to make massive changes to their applications (and for what? &amp;nbsp;Their code already works), or adding so many new classes and methods that it becomes very difficult for new users to work out the Best Practice way of interacting with our driver?&lt;br /&gt;&lt;br /&gt;So, what can we do?&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Firstly we have to figure out which questions we have and what possible solutions exist.&lt;/li&gt;&lt;li&gt;Then we have to weigh up the pros and cons of each of the possible solutions.&lt;/li&gt;&lt;li&gt;Ideally we&amp;rsquo;d get feedback early and often from our users, from the community, about the approaches we&amp;rsquo;re taking.&lt;/li&gt;&lt;li&gt;Development would happen in parallel, in a nice, agile, way, to bring the best possible solution for everyone.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;What this all really means, though, is that the Shiny New Java Driver™ is not ready right now, and will not be ready immediately, despite the fact that we&amp;rsquo;ve already spent some time on its development, and considered all of those questions and more. &amp;nbsp;Right now, we&amp;rsquo;re starting to get feedback from the community - from users, and from committers (or people who would like to be committers). &amp;nbsp;Which means that I get to to go to more conferences and user groups, and talk about our problems when designing the new driver. &amp;nbsp;I&amp;rsquo;m hoping to get two things out of this, apart from more air miles:&lt;br /&gt;&lt;ol&gt;&lt;li&gt;Feedback from the community about our assumptions and the direction we&amp;rsquo;re taking.&lt;/li&gt;&lt;li&gt;Present to the development community some of the lessons we&amp;rsquo;ve learnt/are learning, in the hope that you can use them when approaching the design of your own applications.&lt;/li&gt;&lt;/ol&gt;&lt;div&gt;&amp;lt;gratuitous-conference-plug&amp;gt;You&amp;rsquo;ve already seen some of these &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2013/03/upcoming-events.html&#34;&gt;upcoming events&lt;/a&gt;. &amp;nbsp;But in case you haven&amp;rsquo;t, &lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/events/109032992/&#34;&gt;this Thursday I&amp;rsquo;ll be presenting at Skillsmatter&lt;/a&gt; on how we approached this design problem, and &lt;a href=&#34;http://www.devoxx.com/display/UK13/What+do+you+mean%2C+backwards+compatibility&#34;&gt;again at DevoxxUK next week&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;If you&amp;rsquo;re more interested in everything MongoDB, and want to get a much better look at what it is, how it works, how to design for it, then come to &lt;a href=&#34;http://www.10gen.com/events/mongodb-london-2013&#34;&gt;MongoDB London&lt;/a&gt;, where I am one of numerous presenters, all going into MongoDB specifics.&amp;lt;/gratuitous-conference-plug&amp;gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;So&amp;hellip; I&amp;rsquo;m afraid to say that even after this long post, even after bemoaning my own experiences of hearing &amp;ldquo;it depends&amp;rdquo;, I still don&amp;rsquo;t have an answer for you.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But maybe I do. &amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;ldquo;It Depends&amp;rdquo; means &amp;ldquo;you need to get more information in order to answer that question&amp;rdquo;. &amp;nbsp;And it&amp;rsquo;s our job as developers to ask the right questions to gather that information. &amp;nbsp;If the answer is &amp;ldquo;it depends&amp;rdquo;, you&amp;rsquo;re not asking the right question yet, or you&amp;rsquo;re not asking the right people. &amp;nbsp;So dig down, find out why you can&amp;rsquo;t answer the original question, and start iterating through your design process until you have answers that you can act upon.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Easy. &amp;nbsp;Right&amp;hellip;?&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 - Introduction to Lambdas Article</title>
      <link>http://trishagee.github.io/post/java_8__introduction_to_lambdas_article</link>
      <pubDate>Thu, 08 Nov 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/java_8__introduction_to_lambdas_article</guid>
      <description>&lt;p&gt;This month&amp;rsquo;s Java Magazine features an article by me, &lt;a href=&#34;https://twitter.com/kittylyst&#34;&gt;Ben Evans&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/karianna&#34;&gt;Martijn Verburg&lt;/a&gt; about the new &lt;a href=&#34;http://openjdk.java.net/projects/lambda/&#34;&gt;lambdas&lt;/a&gt;&amp;nbsp;coming in &lt;a href=&#34;http://jdk8.java.net/&#34;&gt;Java 8&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;The aim of the article is to give an overview to normal, human Java developers, who don&amp;rsquo;t need to know the theory behind what they are or how they work under the covers, but want to know how to use them when they get the shiny new version of Java next year (or even get ahead of the curve and &lt;a href=&#34;http://jdk8.java.net/lambda/&#34;&gt;try them now&lt;/a&gt;).&lt;br /&gt;&lt;br /&gt;&lt;table align=&#34;center&#34; border=&#34;0&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34;&gt;            &lt;tbody&gt;&lt;tr style=&#34;background-color: #d2d2d2; height: 30px;&#34;&gt;                &lt;td&gt;&lt;img align=&#34;left&#34; alt=&#34;www.oracle.com/javamagazine&#34; class=&#34;navlogo&#34; height=&#34;28&#34; src=&#34;http://images-cdn.dashdigital.com/javamagazine/include/icons/navbar_logo.gif?lm=1352311955000&#34; /&gt;                &lt;/td&gt;                &lt;td align=&#34;right&#34; style=&#34;color: #666666; font-family: tahoma, sans-serif; font-size: 11px; font-weight: bold; line-height: 15px; padding-right: 5px;&#34;&gt;&lt;span id=&#34;top_right_text&#34;&gt;Look inside &amp;gt;&lt;/span&gt;                &lt;/td&gt;             &lt;/tr&gt;&lt;tr style=&#34;background-color: white;&#34;&gt;                &lt;td align=&#34;center&#34; colspan=&#34;2&#34; style=&#34;padding: 10px 0px;&#34;&gt;&lt;a href=&#34;http://www.oraclejavamagazine-digital.com/javamagazine/20121112?pg=35&#34; onclick=&#34;window.open(&#39;http://www.oraclejavamagazine-digital.com/javamagazine/20121112?pg=35&#39;,&#39;sharewidget&#39;,&#39;toolbar=no,menubar=no,resizable=yes,scrollbars=yes,left=0,top=0,width=&#39;+(screen.width-10)+&#39;,height=&#39;+(screen.height-10)+&#39;&#39;);return false;&#34; target=&#34;_blank&#34; title=&#34;View Magazine&#34;&gt;                  &lt;img alt=&#34;34&#34; border=&#34;0&#34; src=&#34;http://images-cdn.dashdigital.com/javamagazine/20121112/data/imgpages/smtn/0035_egfgcb.gif?lm=1352311955000&#34; /&gt;                &lt;/a&gt;                &lt;/td&gt;            &lt;/tr&gt;&lt;tr style=&#34;background-color: #d2d2d2; height: 30px;&#34;&gt;                &lt;td align=&#34;center&#34; colspan=&#34;2&#34; style=&#34;color: #666666; font-family: tahoma, sans-serif; font-size: 11px; font-weight: bold; line-height: 15px;&#34;&gt;&lt;span id=&#34;bottom_text&#34;&gt;Exploring Lambda Expressions for the Java Language and the JVM&lt;/span&gt;                &lt;/td&gt;            &lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>NightHacking Tour: The LJC</title>
      <link>http://trishagee.github.io/post/nighthacking_tour_the_ljc</link>
      <pubDate>Tue, 06 Nov 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/nighthacking_tour_the_ljc</guid>
      <description>&lt;p&gt;On the same day &lt;a href=&#34;http://mechanitis.blogspot.co.uk/2012/10/interview-and-hacking-session-with.html&#34;&gt;Stephen Chin came to see me&lt;/a&gt; at the 10gen offices, we also ran a NightHacking session in the evening with the London Java Community. &amp;nbsp;Not many people turned up (maybe I need to work on my signage to the office?) but it was a great session. In fact, having less people meant we could all be involved.&lt;br /&gt;&lt;br /&gt;Expect &lt;a href=&#34;http://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt;s and &lt;a href=&#34;http://www.oracle.com/technetwork/java/javafx/overview/index.html&#34;&gt;JavaFX&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;iframe allowfullscreen=&#34;allowfullscreen&#34; frameborder=&#34;0&#34; height=&#34;315&#34; src=&#34;http://www.youtube.com/embed/f2a9XvZNq0o&#34; width=&#34;560&#34;&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interview and Hacking session with Stephen Chin</title>
      <link>http://trishagee.github.io/post/interview_and_hacking_session_with_stephen_chin</link>
      <pubDate>Wed, 31 Oct 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/interview_and_hacking_session_with_stephen_chin</guid>
      <description>&lt;p&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;iframe allowfullscreen=&#34;&#34; frameborder=&#34;0&#34; height=&#34;270&#34; src=&#34;http://www.youtube.com/embed/c5-jyvVnqT0?fs=1&#34; width=&#34;480&#34;&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;
On Monday, &lt;a href=&#34;http://steveonjava.com/&#34;&gt;Stephen Chin&lt;/a&gt; from Oracle visited me at the &lt;a href=&#34;http://www.10gen.com/&#34;&gt;10gen&lt;/a&gt; offices as part of his &lt;a href=&#34;http://steveonjava.com/nighthacking/&#34;&gt;NightHacking tour&lt;/a&gt;. &amp;nbsp;In the video we talk about my sessions at JavaOne and the &lt;a href=&#34;http://www.devoxx.com/pages/viewpage.action?pageId=6391499&#34;&gt;Agile presentation&lt;/a&gt; I&amp;rsquo;m giving at Devoxx, and I do some very basic hacking using the &lt;a href=&#34;http://www.mongodb.org/display/DOCS/Java+Tutorial&#34;&gt;MongoDB Java driver&lt;/a&gt;, attempting to showcase &lt;a href=&#34;http://www.gradle.org/&#34;&gt;gradle&lt;/a&gt; at the same time. It was a fun experience, even if it&amp;rsquo;s scary being live-streamed and recorded!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java Magazine: Intro to the Disruptor Part One</title>
      <link>http://trishagee.github.io/post/java_magazine_intro_to_the_disruptor_part_one</link>
      <pubDate>Thu, 22 Mar 2012 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/java_magazine_intro_to_the_disruptor_part_one</guid>
      <description>&lt;p&gt;This &lt;a href=&#34;http://www.oraclejavamagazine-digital.com/javamagazine/20120304/?pg=56&amp;amp;pm=1&amp;amp;u1=friend&#34;&gt;month&amp;rsquo;s Java Magazine&lt;/a&gt;&amp;nbsp;features an article by yours truly, which is yet another intro to the Disruptor. &amp;nbsp;It&amp;rsquo;s basically a summary of the stuff I&amp;rsquo;ve written in this blog, updated for version 2.7 - so the names of the classes should be up to date and the responsibilities follow the simplified pattern we use now. &amp;nbsp;If you were looking for an more recent version of my introduction blog posts, this article gives a reasonable overview.&lt;br /&gt;&lt;br /&gt;This is intended as part one of a series, as it&amp;rsquo;s a basic and high-level view&amp;nbsp;with no code examples. &amp;nbsp;In fact, it probably could be used to document the C# version as well as the Java version, although I haven&amp;rsquo;t taken a look at that for a while. &amp;nbsp;Next, I would like to give some more code examples of how you use it - as always, any suggestions welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>London Java Community Open Conference</title>
      <link>http://trishagee.github.io/post/london_java_community_open_conference</link>
      <pubDate>Mon, 28 Nov 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/london_java_community_open_conference</guid>
      <description>&lt;p&gt;Saturday was, hopefully, my last conference of the year. &amp;nbsp;My lucky readers should start to see some posts which are not simply me gushing about another opportunity to hang out with awesome people and learn about interesting &amp;ldquo;stuff&amp;rdquo;.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-pY5RNaGdzKc/TtP9CtxtxzI/AAAAAAAAIu0/JTuUubrCF6g/s1600/DSC_0035.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;214&#34; src=&#34;http://4.bp.blogspot.com/-pY5RNaGdzKc/TtP9CtxtxzI/AAAAAAAAIu0/JTuUubrCF6g/s320/DSC_0035.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Who wants to propose a session?&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;In many ways the &lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/&#34;&gt;London Java Community&lt;/a&gt; Open Conference was my favourite one so far, and not just because it&amp;rsquo;s near home and I helped to organise it. &amp;nbsp;One of the awesome things about both &lt;a href=&#34;http://mechanitis.blogspot.com/2011/10/javaone-2011-roundup.html&#34;&gt;Java One&lt;/a&gt; and &lt;a href=&#34;http://mechanitis.blogspot.com/2011/11/devoxx-story-so-far.html&#34;&gt;Devoxx&lt;/a&gt; was the opportunity to travel, to see new places and to meet people you might not meet in London. &amp;nbsp;The scale, and the opportunities to meet key players in the Java world, were the things I probably appreciated the most from both of those conferences. &amp;nbsp;And you can tell from my posts I really enjoyed them.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But the LJC conference was probably perfect as my last one for 2011:&lt;/div&gt;&lt;div&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: right; margin-left: 1em; text-align: right;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-W-M-FpMSB8o/TtP9R2P6uiI/AAAAAAAAIu8/ZXAGUEuhb7Y/s1600/DSC_0065.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;320&#34; src=&#34;http://1.bp.blogspot.com/-W-M-FpMSB8o/TtP9R2P6uiI/AAAAAAAAIu8/ZXAGUEuhb7Y/s320/DSC_0065.jpg&#34; width=&#34;214&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;&amp;ldquo;How do you spell &amp;lsquo;lightning&amp;rsquo;?&amp;rdquo;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;ul&gt;&lt;li&gt;Being on home turf with awesome people who have really helped drag me kicking and screaming into the conference scene really brought home to me what an amazing year this has been. &amp;nbsp;This time last year, I felt I barely had the credentials to be a behind-the-scenes organiser for the LJC, and I didn&amp;rsquo;t attend last year&amp;rsquo;s conference because I wasn&amp;rsquo;t sure how much I would get out of it. &amp;nbsp;This year, I&amp;rsquo;m at the conference giving two sessions, having made my international&amp;nbsp;début&amp;nbsp;already.&lt;/li&gt;&lt;li&gt;With 120 people you feel like you can talk to everyone at some point if you want to. &amp;nbsp;I don&amp;rsquo;t think I managed that, but I probably chatted in one way or another with maybe half the attendees. &amp;nbsp;The great thing about this is you see the wide variety of things people are working on - the technologies, the business problems, the team and company sizes, the methodologies. It&amp;rsquo;s eye-opening and quite exciting.&lt;/li&gt;&lt;li&gt;It seemed that a small, open conference like this drives content based on relevance. &amp;nbsp;We had no vendor pitches, although John was contractually obliged to mention Atlassian at least once every half hour (but as they paid for the beer, this was only fair). &amp;nbsp;People vote with their feet, and attend the sessions that they will get the most out of. &amp;nbsp;I liked this format a lot.&lt;/li&gt;&lt;li&gt;I presented alone for the first time, not hiding behind &lt;a href=&#34;http://mikes-tech.blogspot.com/&#34;&gt;Mike&lt;/a&gt;&amp;nbsp;or &lt;a href=&#34;http://mechanical-sympathy.blogspot.com/&#34;&gt;Martin&lt;/a&gt;. &amp;nbsp;I found this surprisingly liberating. &amp;nbsp;I love working with those guys, but without them providing a safety net I actually found my confidence increasing as I realised I was perfectly capable of answering things I would probably have let them field.&lt;/li&gt;&lt;li&gt;My second session was more workshop-like, and I wanted the audience to guide what we covered. &amp;nbsp;I thought it went really well, I loved letting the audience guide it, and I enjoyed giving it.&lt;/li&gt;&lt;li&gt;I was honoured (and terrified) to be asked to be part of a Meet the Experts panel with people who actually know what they&amp;rsquo;re talking about. &amp;nbsp;I was very very pleased to get away with not being asked any questions about being a girl or the length of my skirt. &amp;nbsp;We had a great discussion around writing high performance code, about different technologies and their applicability, and about the future of Java and JVM-based languages.&lt;/li&gt;&lt;li&gt;I loved the venue. &amp;nbsp;The rooms were a nice range of sizes, all with projectors of course, but also whiteboard space and flip charts. &amp;nbsp;It looked like a 1960s version of the future - all shiny white surfaces and curving lines. &amp;nbsp;But it felt like a space to create and innovate in.&lt;/li&gt;&lt;li&gt;Mike&amp;rsquo;s Hacking the Open JDK session in the morning was excellent. &amp;nbsp;Again, this was another example of a workshop format working really well. &amp;nbsp;He gave some good background to compilers in general, and a good walk through of some of the code that&amp;rsquo;s there at the moment. &amp;nbsp;He was happy to share stuff he&amp;rsquo;d learnt the hard way, and it made me want to get more involved in that side of things.&lt;/li&gt;&lt;li&gt;The food was &lt;i&gt;awesome&lt;/i&gt;.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: left; margin-right: 1em; text-align: left;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-T2mIA_BATOs/TtP-H7zXG0I/AAAAAAAAIvE/zpPILN-XR1A/s1600/DSC_0054.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: left; margin-bottom: 1em; margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;214&#34; src=&#34;http://3.bp.blogspot.com/-T2mIA_BATOs/TtP-H7zXG0I/AAAAAAAAIvE/zpPILN-XR1A/s320/DSC_0054.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;Clearly people haven&amp;rsquo;t had enough coffee yet.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;My sessions were User&amp;rsquo;s Guides to the Disruptor - a beginner&amp;rsquo;s and a more advanced one. &amp;nbsp;The beginner&amp;rsquo;s was&amp;nbsp;an updated summary of the Disruptor stuff already covered in this blog - the ring buffer, writing to and reading from it, and configuration. &amp;nbsp;The second session covered &amp;nbsp;more advanced ideas: you don&amp;rsquo;t need a ring buffer any more; cache lines and false sharing; worker pools; aggregate event handlers. This session was a lot less prepared and more collaborative, and I loved giving it. &amp;nbsp;Maybe that&amp;rsquo;s my teacher-genetics coming out.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The aim of both sessions was to give people an idea of how to actually use the Disruptor - developers are definitely interested in how and why it works, but we&amp;rsquo;ve been evangelising a lot and now there are very sensible questions being asked about how to get it to do various things. &amp;nbsp;I&amp;rsquo;d like to run some more of these sessions in future, and to add more material to the blog.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;table cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;float: right; margin-left: 1em; text-align: right;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-6Fzn_ybxqys/TtP_H1sV-ZI/AAAAAAAAIvM/2Vx-NmjgLT4/s1600/DSC_0117.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; margin-bottom: 1em; margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;214&#34; src=&#34;http://3.bp.blogspot.com/-6Fzn_ybxqys/TtP_H1sV-ZI/AAAAAAAAIvM/2Vx-NmjgLT4/s320/DSC_0117.jpg&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;And finally, a proper meal before more beer.&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;Back to the conference. &amp;nbsp;Were there any downsides? &amp;nbsp;Personally I had none. &amp;nbsp;If I had to suggest an improvement for next year, it&amp;rsquo;s that we would like to see more novice speakers presenting. &amp;nbsp;The LJC has always been about nurturing this talent, and a small conference like this one with a friendly audience, many of whom you may already know, is a great place to practice. &amp;nbsp;The lightning talks showed the great variety (and abilities) of our members, it would be nice to expand this to full sessions. &amp;nbsp;As I found, filling a 30 minute session is not anywhere near as hard as you think!&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I&amp;rsquo;m really looking forward to next year&amp;rsquo;s LJC conference, and I&amp;rsquo;m totally buzzing from the positive vibe from this year&amp;rsquo;s.&lt;/div&gt;&lt;table align=&#34;center&#34; cellpadding=&#34;0&#34; cellspacing=&#34;0&#34; class=&#34;tr-caption-container&#34; style=&#34;margin-left: auto; margin-right: auto; text-align: center;&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-jrd5fzdD4Jg/TtP7_O_05CI/AAAAAAAAIus/nnx_gab0UEk/s1600/DSC_0096.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: auto; margin-right: auto;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;267&#34; src=&#34;http://2.bp.blogspot.com/-jrd5fzdD4Jg/TtP7_O_05CI/AAAAAAAAIus/nnx_gab0UEk/s400/DSC_0096.jpg&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&#34;tr-caption&#34; style=&#34;text-align: center;&#34;&gt;The LJC Associates modelling their lovely new t-shirts. &amp;nbsp;Mine fits!&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JAX London - I learn stuff and meet people</title>
      <link>http://trishagee.github.io/post/jax_london__i_learn_stuff_and_meet_people</link>
      <pubDate>Tue, 15 Nov 2011 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/jax_london__i_learn_stuff_and_meet_people</guid>
      <description>&lt;p&gt;A couple of weeks ago, I was at &lt;a href=&#34;http://jaxlondon.com/&#34;&gt;JAX London&lt;/a&gt; along with a number of the &lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/&#34;&gt;London Java Community&lt;/a&gt; regulars (&lt;a href=&#34;http://martijnverburg.blogspot.com/&#34;&gt;Martijn&lt;/a&gt;/&lt;a href=&#34;https://twitter.com/#!/kittylyst&#34;&gt;Ben&lt;/a&gt;/&lt;a href=&#34;http://jr0cket.com/&#34;&gt;John&lt;/a&gt;/&lt;a href=&#34;http://www.meetup.com/london-software-craftsmanship/members/5737653/&#34;&gt;Sandro&lt;/a&gt;/&lt;a href=&#34;http://devangelist.blogspot.com/&#34;&gt;Simon&lt;/a&gt;/&lt;a href=&#34;http://zoah.co.uk/jax-london&#34;&gt;Zoe&lt;/a&gt; I&amp;rsquo;m looking at you&amp;hellip;.)&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-IjhCGApfG_A/TrlkKBsNZQI/AAAAAAAAIV0/Dsei_5U3TBY/s1600/IMGP0035.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;267&#34; src=&#34;http://3.bp.blogspot.com/-IjhCGApfG_A/TrlkKBsNZQI/AAAAAAAAIV0/Dsei_5U3TBY/s400/IMGP0035.jpg&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;My purpose for attending was largely to present the &lt;a href=&#34;http://mechanitis.blogspot.com/2011/10/mike-and-i-debut-our-new-disruptor.html&#34;&gt;Hardcore Concurrency for Beginners&lt;/a&gt; talk that &lt;a href=&#34;http://mikes-tech.blogspot.com/&#34;&gt;Mike&lt;/a&gt; and I debuted at an LJC event a few weeks back.  Almost as important was catching up with the aforementioned LJCers and meeting with as many people as would talk to me.  After the disappointment of the sessions at Java One, sitting in a room being talked at was quite low down on my list of priorities.  Sometimes it&amp;rsquo;s nice to be wrong.&lt;br /&gt;&lt;br /&gt;The sessions at JAX were of a very high standard, and I learnt something from every one.  I was pleasantly surprised by the calibre of international speakers that were there, and the sessions seemed to be pitched right for me personally, which was nice.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Downsides:&lt;/b&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;I&amp;rsquo;m going to cover these first because I like to end on a high note. &amp;nbsp;Firstly, although I was interested in the Open JDK session at the community night, it was really on way too late (and after too much beer - i.e. more than none) to get the most out of it.&lt;/li&gt;&lt;li&gt;It&amp;rsquo;s a bit of a shame that our session was the last presentation on the final day, by that time people&amp;rsquo;s brains are fried and we didn&amp;rsquo;t get as many questions, or as much interaction, as we usually would. &amp;nbsp;Maybe that&amp;rsquo;s because everyone understood and agreed with us. &amp;nbsp;But we did get great feedback so I could be scraping the barrel for things to complain about.&lt;/li&gt;&lt;/ul&gt;The following sections outline the main takeaway points for me.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;b&gt;Software Craftsmanship / Design&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;a href=&#34;http://www.meetup.com/london-software-craftsmanship/members/5737653/&#34;&gt;Sandro&lt;/a&gt; did a great job emphasising that Software Craftsmanship is about professionalism, not beauty. &amp;nbsp;We should be doing the right thing because we want to, because it makes everyone&amp;rsquo;s lives easier in the long run, and because it &lt;i&gt;is&lt;/i&gt; the right thing to do, not because some process dictates that we do it. &amp;nbsp;The other thing that really struck me was how having a craftsman&amp;rsquo;s mindset leads to us taking ownership of our career and investing in it. &amp;nbsp;He also challenged us to stop being miserable and negative. &amp;nbsp;If we&amp;rsquo;re happy, we&amp;rsquo;ll attract more (presumably happy) people into our circle.&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://codemanship.co.uk/parlezuml/blog/&#34;&gt;Jason Gorman&lt;/a&gt;&amp;rsquo;s Slow and Dirty presentation showed that ignoring quality slows down delivery not just in the long run, in terms of maintainability, but also in the short run - a TDD exercise of approximately 30 minutes took less time to get right when done in a test driven fashion, despite that fact that we all still think writing tests takes too much time.  He pointed out that Twitter and Facebook are statistical aberrations - not every startup can afford to assume they will be bought out of their scalability problems.  There was lots of interesting stuff here about quality, which was pretty inspiring at the time but in retrospect, as a team that already does Test Driven Development almost to the extreme, I wonder what&amp;rsquo;s next for us to improve our quality even further.&lt;br /&gt;Simon Ritter&amp;rsquo;s keynote stated that code should be a joy to read, not simply easy to read, and &lt;a href=&#34;https://twitter.com/#!/AdamBien&#34;&gt;Adam Bien&lt;/a&gt;&amp;rsquo;s presentation talking about simplifying code: thinking about design, and not getting bogged down in unnecessary design patterns in order to implement something simple.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Concurrency / Parallelism / Performance&lt;/b&gt;&lt;br /&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-LZf05BIgfGY/Tr_GwtTq6zI/AAAAAAAAIV8/3GnJFWQYCig/s1600/5634379146_9838de9e9d_z.jpg&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;267&#34; src=&#34;http://3.bp.blogspot.com/-LZf05BIgfGY/Tr_GwtTq6zI/AAAAAAAAIV8/3GnJFWQYCig/s400/5634379146_9838de9e9d_z.jpg&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;Russel Winder&amp;rsquo;s session around message passing had me thinking.  It was particularly interesting to see him say things that are possibly the opposite of what we (the LMAX/Disruptor types) are preaching.  For example, that programmers shouldn&amp;rsquo;t care about the low-level details; that we should be using models (i.e. abstraction) to deal with parallelism; that you should let the JVM deal with thread management.  However, I think he&amp;rsquo;s fundamentally coming from the same place as us: &amp;ldquo;concurrency&amp;rdquo; in the past was not a good model, it was designed for old hardware that was trying to run multiple processes on a single core.  With multi-core systems you need to be running code in parallel instead. &lt;br /&gt;&lt;br /&gt;Dan Hardiker&amp;rsquo;s performance testing presentation was another one that reinforced that testing first, finding what the real performance is, profiling and then targeted experimentation are all fundamental to getting good performance.  There was a lot of good advice to how to write good performance tests too.&lt;br /&gt;Another point from Simon Ritter&amp;rsquo;s keynote reiterated that the performance free lunch was over, and we need to get better at writing parallel code.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Workshops&lt;/b&gt;&lt;br /&gt;Both the Open JDK session and Ben and Martijn&amp;rsquo;s &amp;ldquo;Spring cleaning your code base with Java 7&amp;rdquo; had me attempting to do things with my mac I never intended to do (i.e. write code).  Thanks to Ben and Martijn&amp;rsquo;s patience, I finally got IntelliJ playing nicely on the mac with Java 7, which was a challenge but I&amp;rsquo;m pretty pleased I&amp;rsquo;ve achieved it.  The Open JDK one was not as successful for me personally, but I got a good feel for the process of building it (i.e. it&amp;rsquo;s hard and it takes a very long time).&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Other great stuff:&lt;/b&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;The keynote by James Governor from &lt;a href=&#34;http://redmonk.com/&#34;&gt;Redmonk&lt;/a&gt; was really thought-provoking. &amp;nbsp;So thought-provoking I wrote no notes and can&amp;rsquo;t remember any of it.&lt;/li&gt;&lt;li&gt;As last time, the Community night was really great. &amp;nbsp;I met new people and I hung out with some old favourites. &amp;nbsp;Dear God I must stop drinking with those guys. Hotel bars are particularly awful for losing track of time.&lt;/li&gt;&lt;li&gt;I heard about the Java 7+ features enough times from various people to be able to give an overview of the release plan to my geek friends in the pub on Friday (hey, they asked).&lt;/li&gt;&lt;li&gt;I learnt how to use twitter to bridge that gap between me and other&amp;nbsp;attendees, and made new friends without having to do the scary thing of approaching strangers.&lt;/li&gt;&lt;li&gt;The lunches we rather good.&lt;/li&gt;&lt;li&gt;Going to a conference 20 minutes from home is a bonus. &amp;nbsp;Nice to meet other London devs as well as the European ones too.&lt;/li&gt;&lt;li&gt;To me, it seems as if the relevance of the JCP is starting to seep out into the real(er) world.&lt;/li&gt;&lt;li&gt;The tables for laptops at the front of the rooms was an awesome idea. &amp;nbsp;For a start, it encouraged people to get into the room early to get one of those seats.&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;I had a great time at the conference, I learnt stuff and met people, which is all I really want.&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;For once, the photos aren&amp;rsquo;t mine.  &lt;i&gt;Images courtesy of &lt;a href=&#34;http://jaxlondon.com/&#34;&gt;JAX London&lt;/a&gt;&lt;/i&gt;.&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
