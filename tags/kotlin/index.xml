<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Kotlin on Trisha Gee </title>
    <link>https://trishagee.github.io/tags/kotlin/index.xml/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Wed, 21 Feb 2018 00:00:00 UTC</updated>
    
    <item>
      <title>Is boilerplate code really so bad?</title>
      <link>https://trishagee.github.io/presentation/boilerplate/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/boilerplate/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s exhausting staying up to date with the evolution of Java and the myriad other JVM languages.  Is it worth it? What
do modern languages give us?&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Many JVM languages promote &amp;ldquo;less boilerplate code&amp;rdquo; as one of their selling points. Even updates to Java in recent years
 have removed unnecessary syntax. While this is clearly meant to be a Good Thing, many of us - particularly if we&amp;rsquo;ve been writing Java for a long time - think &amp;ldquo;so what?&amp;rdquo;. Our IDEs can generate code, and our brains get used to ignoring the stuff that doesn&amp;rsquo;t matter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is the removal of extraneous code from the syntax of a language necessary, or just a gimmick? How does it impact our
ability to write and read code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this talk, Trisha will explore common coding scenarios using Java and Kotlin. We&amp;rsquo;ll see what a language designed for
 developer productivity looks like: what&amp;rsquo;s important for developers to write (and, more importantly, read) and what can
 be removed. We&amp;rsquo;ll also see how Java has evolved to improve our productivity as producers and consumers of code, and why staying up to date with the features of a language like Java can ultimately make your life easier.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Slides&lt;/h1&gt;

&lt;p&gt;&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/jtFuTyjjj5bBH&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; &lt;div style=&#34;margin-bottom:5px&#34;&gt; &lt;strong&gt; &lt;a href=&#34;//www.slideshare.net/secret/jtFuTyjjj5bBH&#34; title=&#34;Is Boilerplate Code Really So Bad?&#34; target=&#34;_blank&#34;&gt;Is Boilerplate Code Really So Bad?&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href=&#34;https://www.slideshare.net/trishagee&#34; target=&#34;_blank&#34;&gt;Trisha Gee&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Videos&lt;/h1&gt;

&lt;p&gt;The code examples from this talk are shamelessly reused from Hadi Hariri&amp;rsquo;s London Software Craftsmanship
Conference talk, &lt;a href=&#34;https://youtu.be/pAFiPjXEOtg&#34;&gt;The Importance of Syntax In Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Code&lt;/h1&gt;

&lt;p&gt;The code &lt;a href=&#34;https://github.com/trishagee/boilerplate&#34;&gt;lives here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Version information&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cfp.devoxx.co.uk/2018/talk/XUD-8349/Is_boilerplate_code_really_so_bad%3F&#34;&gt;DevoxxUK&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Java&amp;trade; SE Runtime Environment 18.3 (build 10.0.1+10)&lt;/li&gt;
&lt;li&gt;Kotlin: 1.2.31&lt;/li&gt;
&lt;li&gt;IDE: IntelliJ IDEA 2018.1.3 (Ultimate Edition) Build #IU-181.4892.42&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://qconlondon.com/london2018/presentation/boilerplate-code-really-so-bad&#34;&gt;QCon London&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Java&amp;trade; SE Runtime Environment 18.3 (build 10+45)&lt;/li&gt;
&lt;li&gt;Kotlin: 1.2.21&lt;/li&gt;
&lt;li&gt;IDE: IntelliJ IDEA 2018.1 EAP (Ultimate Edition) Build #IU-181.3986.9&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Resources&lt;/h1&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Java&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Java 5: &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/generics/index.html&#34;&gt;Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 7: &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/language/type-inference-generic-instance-creation.html&#34;&gt;Diamond operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html&#34;&gt;IntStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 9: &lt;a href=&#34;http://www.baeldung.com/java-9-optional&#34;&gt;More methods on Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 9: &lt;a href=&#34;http://openjdk.java.net/jeps/269&#34;&gt;Convenience Factory Methods for Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 10: &lt;a href=&#34;http://openjdk.java.net/jeps/286&#34;&gt;Local-variable type inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/11/&#34;&gt;JDK 11 early access releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk/11/&#34;&gt;Java 11 Open JDK page&lt;/a&gt; (tracks which features are
currently going into Java 11)&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://openjdk.java.net/jeps/302&#34;&gt;JEP 302: Lambda Leftovers (including underscore for param)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://openjdk.java.net/jeps/305&#34;&gt;JEP 305: Pattern Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://openjdk.java.net/jeps/325&#34;&gt;JEP 325: Switch expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://cr.openjdk.java.net/~briangoetz/amber/datum.html&#34;&gt;Data Classes for Java&lt;/a&gt; and &lt;a href=&#34;https://www.infoq.com/news/2018/02/data-classes-for-java&#34;&gt;Brian Goetz on Data Classes
for Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Kotlin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Data Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;Lambdas and higher order functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/properties.html&#34;&gt;Properties (var/val)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/equality.html&#34;&gt;Equality (== vs ===)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/typecasts.html&#34;&gt;Type Checks and Casts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/null-safety.html&#34;&gt;Null Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/control-flow.html&#34;&gt;when&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/functions.html#default-arguments&#34;&gt;Default arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html&#34;&gt;Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/ranges.html&#34;&gt;Ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/collections.html&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2017/08/code-smells-null/&#34;&gt;Null is a Code Smell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_9&#34;&gt;Presented at&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/SVQJUG/events/247799741/&#34;&gt;JUG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
