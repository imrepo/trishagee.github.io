<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title> on Trisha Gee </title>
    <link>http://trishagee.github.io/tags/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Thu, 13 Aug 2015 00:00:00 UTC</updated>
    
    <item>
      <title>Writing Unit Tests</title>
      <link>http://trishagee.github.io/other-sites/writing_unit_tests/</link>
      <pubDate>Thu, 13 Aug 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/other-sites/writing_unit_tests/</guid>
      <description>

&lt;h2 id=&#34;writing-tests-first:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Writing tests first&lt;/h2&gt;

&lt;p&gt;Whether you like to write your tests before writing production code, or like to create the tests afterwards, IntelliJ
IDEA makes it easy to create and run unit tests. In this tutorial we&amp;rsquo;re going to show examples of how to write tests
first (Test Driven Design - TDD).&lt;/p&gt;

&lt;p&gt;In this tutorial, we&amp;rsquo;ve used Gradle as our build tool, and have created the project as a Gradle project in IntelliJ
IDEA, so the build file already contains the dependency on JUnit 4.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/build.gradle.png&#34; alt=&#34;gradle&#34; title=&#34;gradle&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not using Gradle and don&amp;rsquo;t already have JUnit 4 on the classpath, follow the instructions on &lt;a href=&#34;https://www.jetbrains.com/idea/help/configuring-testing-libraries.html&#34;&gt;how to add a
test library to the classpath&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;creating-your-test-location:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Creating your test location&lt;/h3&gt;

&lt;p&gt;If you don&amp;rsquo;t already have tests, or did not select &amp;ldquo;Create directories for empty content roots&amp;rdquo; when creating
the project, you
might not have an appropriate location for your tests. Therefore the first thing you need to do is create this.
Because in this example we&amp;rsquo;re using Gradle as the build tool, we&amp;rsquo;re therefore following the standard Maven/Gradle
directory structure.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right click on the location you want to create your test folder. For example, [project root]/src.&lt;/li&gt;
&lt;li&gt;Select New -&amp;gt; Directory&lt;/li&gt;
&lt;li&gt;Type the name of the test directory. You can even create subdirectories with this single command. For example, you
can enter &lt;code&gt;test/java&lt;/code&gt; to create a &amp;ldquo;test&amp;rdquo; directory with another directory &amp;ldquo;java&amp;rdquo; inside it.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/1CreateDirectory.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re working within a standard structure, e.g. Gradle or Maven, you should notice the directory coloured with
a green background, denoting that IntelliJ IDEA knows this is a test directory. If this is not the case:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right click on the test directory&lt;/li&gt;
&lt;li&gt;Select Mark Directory As -&amp;gt; Test Sources Root&lt;/li&gt;
&lt;li&gt;The directory should be coloured green.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/2MarkAsTest.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;creating-your-test-package:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Creating your test package&lt;/h3&gt;

&lt;p&gt;Once you have a top-level test directory, you might need to create the correct package for your tests:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right click on your test directory and select New -&amp;gt; Package&lt;/li&gt;
&lt;li&gt;As with the directory, you can create sub-package structures if you need to, for example &lt;code&gt;com.project.package&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/3CreatePackage.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;creating-your-first-test:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Creating your first test&lt;/h3&gt;

&lt;p&gt;Given that we&amp;rsquo;re writing our tests first without necessarily having the classes we&amp;rsquo;re testing available to us yet,
we&amp;rsquo;ll create our first test via project panel.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Right click on the package you want to create the test in and select New -&amp;gt; Java Class.&lt;/li&gt;
&lt;li&gt;Enter the test name - given we&amp;rsquo;re testing using JUnit, this will likely be [Something]Test&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/4CreateTest.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Now we have a test class, we can start adding individual tests.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;With the cursor placed somewhere inside the class&amp;rsquo;s curly braces, press Ctrl + Enter (Alt + Ins).&lt;/li&gt;
&lt;li&gt;Select &amp;ldquo;Test Method&amp;rdquo; from the Generate menu and select &amp;ldquo;JUnit 4&amp;rdquo; as the framework.&lt;/li&gt;
&lt;li&gt;This will create a test method with the default template, allowing you to fill in the details of the test.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/5CreateTestMethod.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you want to alter the default template&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Press Ctrl + Enter (Alt + Ins).&lt;/li&gt;
&lt;li&gt;Use the mouse or arrow keys to highlight &amp;ldquo;Test Method&amp;rdquo; from the Generate menu, and press the right arrow to bring
up a menu which says &amp;ldquo;Edit Template&amp;rdquo;. Select this.&lt;/li&gt;
&lt;li&gt;You can now change the default template for a test method according to your preferences.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/6ChangeTemplate.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;writing-the-test-body:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Writing the test body&lt;/h3&gt;

&lt;p&gt;It may seem counter-intuitive to write test code for classes and methods that don&amp;rsquo;t exist, but IntelliJ IDEA makes
this straightforward whilst keeping the compiler happy.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;IntelliJ IDEA can create classes for you if they don&amp;rsquo;t already exist.  So if you write your tests describing what
you want to achieve, pressing Alt + Enter on any classes that don&amp;rsquo;t exist will give you the option of having IntelliJ
IDEA create them for you. This will give you a minimum implementation that keeps the compiler happy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/7CreateClass.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Similarly, IntelliJ IDEA can create missing methods for you with minimal implementations, again you can use Alt +
Enter to do this.&lt;/li&gt;
&lt;li&gt;As always, you can use IntelliJ IDEA&amp;rsquo;s refactoring tools to create variables to store results in&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/8CreateMethod.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;And as usual, IntelliJ IDEA will import the most appropriate classes for you, if the correct libraries are on the
classpath.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/9Imports.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;running-the-tests:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Running the tests&lt;/h3&gt;

&lt;p&gt;When following a TDD approach, typically you go through a cycle of Red-Green-Refactor.  You&amp;rsquo;ll run a test, see it
fail (go red), implement the simplest code to make the test pass (go green), and then if necessary
refactor the code so your test stays green and your code is sufficiently simple and elegant.&lt;/p&gt;

&lt;p&gt;The first step in this cycle is to run the test and see it fail.&lt;/p&gt;

&lt;p&gt;Given that we&amp;rsquo;ve used IntelliJ IDEA&amp;rsquo;s features to create the simplest empty implementation of the method we&amp;rsquo;re testing,
we do not expect our test to pass.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;From inside the test, press Ctrl + Shift + F10 to run this individual test&lt;/li&gt;
&lt;li&gt;The results will be shown in the run dialog. The test name will have an icon next to it - either red for an
exception, or yellow for an assertion that fails. For either failures, a message stating what went wrong is also shown.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/10RunFailingTests.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;implementing-the-code:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Implementing the code&lt;/h3&gt;

&lt;p&gt;The next step is to make the tests pass, which means implementing the simplest thing that works.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;You can navigate to the code being tested using the usual methods - clicking through on the method name, pressing
command + alt + b while the cursor is on the method name, or pressing cmd + shift+ t to switch between the test and
the production code.&lt;/li&gt;
&lt;li&gt;Make change to the method to make the test pass.  Often with TDD, the simplest thing that works might be
hardcoding your expected value. We will see later how iterating over this process will lead to more realistic
production code.&lt;/li&gt;
&lt;li&gt;Re-run the test, using Shift + F10 to re-run the last test you ran.&lt;/li&gt;
&lt;li&gt;See the test pass - the icon next to the test method should go green. If it does not, make the required changes
until the test passes.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/11MakeTestsPass.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;iterate:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Iterate&lt;/h3&gt;

&lt;p&gt;Developing code is an iterative process. When following a TDD-style approach, this is even more true. In order to
drive out more complex behaviour, we add tests for other cases.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;In your test class, use Ctrl + enter again to create a new test method.&lt;/li&gt;
&lt;li&gt;Pick a second test case that specifies more requirements of the method you&amp;rsquo;re testing. Remember that you can use
IntelliJ IDEA&amp;rsquo;s features to create classes and methods to keep the compiler happy.&lt;/li&gt;
&lt;li&gt;Run this second test case, showing that it fails for the correct reason.&lt;/li&gt;
&lt;li&gt;Change the code in the method being tested to make this test pass.&lt;/li&gt;
&lt;li&gt;Re-run both the tests by pressing Ctrl + Shift + F10 inside the test class, not inside a single method, and see
that both tests now pass. If either test fails, make the changes needed to the code to ensure the tests pass.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/intellij-testing/12AddMoreTests.gif&#34; alt=&#34;Create&#34; title=&#34;Create&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;summary:712ebbab297ad400669b7de2d6c9ac0d&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Writing your first test in a test-first style takes a small amount of setup - creating the test class, creating the
test methods, and then creating empty implementations of the code that will eventually become production code. But
IntelliJ IDEA automates a lot of this initial setup.&lt;/p&gt;

&lt;p&gt;As you iterate through the process, creating tests and then making the changes required to get those tests to pass,
you build up a comprehensive suite of tests for your required functionality, and the simplest solution that will meet
these requirements.  And IntelliJ IDEA is designed to make this process as painless as possible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8</title>
      <link>http://trishagee.github.io/drafts/java_8/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/drafts/java_8/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been giving a presentation showing &amp;ldquo;Java 8 in Anger&amp;rdquo; - no, it&amp;rsquo;s not that the most recent release of Java has me
particularly enraged, &amp;ldquo;in anger&amp;rdquo; is (apparently) a British phrase meaning &amp;ldquo;in practice&amp;rdquo; or &amp;ldquo;in the real world&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The aim of this talk is to demo, with live code, how to use some of the Java 8 features like Lambda Expressions and
the Streams API to solve some of the coding problems you might come across in your day job as a developer.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to transcribe the whole talk for this article, it probably works best (if you&amp;rsquo;re interested) to
watch the video instead. What I do want to do is to use the application from the presentation to explore some
specific Java 8 features in more detail. If you&amp;rsquo;re interested in the wider context, I&amp;rsquo;ve got
&lt;a href=&#34;http://trishagee.github.io/presentation/java8_in_anger/&#34;&gt;links to the videos and source code&lt;/a&gt; on my blog.&lt;/p&gt;

&lt;h3 id=&#34;method-references-and-new-methods-in-java-8:d169180f3a40e9c29149c257bc7fd971&#34;&gt;Method References and New Methods in Java 8&lt;/h3&gt;

&lt;p&gt;The first section where we start using some of the new methods available in Java 8 is when we&amp;rsquo;re building up a
leaderboard of top tweeters. This leaderboard will be a table of the Twitter users who have tweeted the most, in
descending order.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/java8/leaderboard.png&#34; alt=&#34;Twitter Leaderboard&#34; title=&#34;Twitter Leaderboard&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;We store every Twitter handle we see in as a key in a &lt;code&gt;Map&lt;/code&gt;, and for
the value we have a &lt;code&gt;TwitterUser&lt;/code&gt; (an object to represent this particular user). When we
see a new Twitter handle, we want to create a &lt;code&gt;TwitterUser&lt;/code&gt; for this person and store it in the map, keyed against
this Twitter handle.&lt;/p&gt;

&lt;p&gt;Pre-Java-8, we&amp;rsquo;d write something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private final Map&amp;lt;String, TwitterUser&amp;gt; allTwitterUsers = new HashMap&amp;lt;&amp;gt;();

public void onMessage(String twitterHandle) {
    TwitterUser twitterUser = allTwitterUsers.get(twitterHandle);
    if (twitterUser == null) {
        twitterUser = new TwitterUser(twitterHandle);
        allTwitterUsers.put(twitterHandle, twitterUser);
    }
    // then do stuff...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Java 8 has not only given us lambdas and streams, it&amp;rsquo;s added new methods to some of our favourite classes.  &lt;code&gt;Map&lt;/code&gt;
now has a &lt;code&gt;computeIfAbsent()&lt;/code&gt; method which allows you to define what to do if an item doesn&amp;rsquo;t exist in the map.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private final Map&amp;lt;String, TwitterUser&amp;gt; allTwitterUsers = new HashMap&amp;lt;&amp;gt;();

public void onMessage(String twitterHandle) {
    TwitterUser twitterUser = allTwitterUsers.computeIfAbsent(twitterHandle, 
                                                              TwitterUser::new);
    // then do stuff...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This does the same thing as the first example and is clearly far fewer lines of code, especially as it also makes use
of &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&#34;&gt;Method References&lt;/a&gt;, which usually work
out to be even shorter than lambda expressions. As a long-term Java programmer with limited exposure to other
languages, although this may be shorter, learning to write code this way is going to take me a while to get used to.&lt;/p&gt;

&lt;p&gt;Fortunately for me and my old-school Java approach, &lt;a href=&#34;www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt; can help me get to
grips with the new syntax. When I first came to Java 8, I found it more understandable (although &lt;em&gt;much&lt;/em&gt; more code)
to call these sorts of methods using an anonymous inner class rather than a lambda expression or a method reference.
IntelliJ IDEA can help create this anonymous inner class and convert it into something more Java 8-ish:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/java8/ReplaceWithMethodReference.gif&#34; alt=&#34;Convert to method reference&#34; title=&#34;Convert to method reference&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;Method references are going to take me a while to grasp instinctively, but I am starting to see how the succinct
syntax could be more expressive, once I get used to it - &lt;code&gt;computeifAbsent()&lt;/code&gt; is going to call a constructor on
&lt;code&gt;TwitterUser&lt;/code&gt; to create a new user if one doesn&amp;rsquo;t already exist in the map.&lt;/p&gt;

&lt;h3 id=&#34;streams:d169180f3a40e9c29149c257bc7fd971&#34;&gt;Streams&lt;/h3&gt;

&lt;p&gt;Next we need to increment the number of times we&amp;rsquo;ve seen
this &lt;code&gt;TwitterUser&lt;/code&gt;, and then figure out how this impacts our leaderboard of tweeters. We can use the
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams API&lt;/a&gt; to
turn our map of all Twitter users into a list of the top ten Tweeters.&lt;/p&gt;

&lt;p&gt;First we need to sort our &lt;code&gt;TwitterUsers&lt;/code&gt; according to the number of times they&amp;rsquo;ve tweeted.
There&amp;rsquo;s a &lt;code&gt;sorted()&lt;/code&gt; method on &lt;code&gt;Stream&lt;/code&gt; which takes a &lt;code&gt;Comparator&lt;/code&gt;, so it seems logical to use this.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void onMessage(String twitterHandle) {
    TwitterUser twitterUser = allTwitterUsers.computeIfAbsent(twitterHandle, TwitterUser::new);
    twitterUser.incrementCount();

    allTwitterUsers.values().stream()
                   .sorted(new Comparator&amp;lt;TwitterUser&amp;gt;() {
                       @Override
                       public int compare(TwitterUser o1, TwitterUser o2) {
                           return o2.getNumberOfTweets() - o1.getNumberOfTweets();
                       }
                   });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the past, I&amp;rsquo;ve always found comparators a little hard to work with - I&amp;rsquo;m never quite sure if I&amp;rsquo;m supposed to be
subtracting the first object from the second, or vice versa.  Fortunately, once again Java 8 makes things a little
easier. You can use the new &lt;code&gt;Comparator.comparing()&lt;/code&gt; method, which you can combine with a method reference to state
which method on &lt;code&gt;TwitterUser&lt;/code&gt; you want to sort by&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;allTwitterUsers.values().stream()
               .sorted(comparingInt(TwitterUser::getNumberOfTweets))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For a leaderboard which shows the most active tweeters at the top, we need to sort in descending order, which is also
simple and descriptive using this method&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;allTwitterUsers.values().stream()
               .sorted(comparingInt(TwitterUser::getNumberOfTweets).reversed())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that I&amp;rsquo;ve added a static import for &lt;code&gt;comparingInt&lt;/code&gt; to make the code a bit shorter.&lt;/p&gt;

&lt;p&gt;So we&amp;rsquo;ve sorted all the values in the map, now we need to just get the top ten. Since we&amp;rsquo;re using Streams, it&amp;rsquo;s easy
to chain together all the operations we want to perform on our collection, so we add a call to &lt;code&gt;limit&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;allTwitterUsers.values().stream()
               .sorted(comparingInt(TwitterUser::getNumberOfTweets).reversed())
               .limit(10);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far all we&amp;rsquo;ve done is build up a recipe for the operations we want to perform, we need to somehow execute all of
these. Streams have intermediate operations which return a &lt;code&gt;Stream&lt;/code&gt; so that we can perform further operations (for
example, both &lt;code&gt;sorted()&lt;/code&gt; and &lt;code&gt;limit()&lt;/code&gt; above), and terminal operations which will return some concrete value. In this
case, what we want is a new list with these top ten tweeters. Telling the &lt;code&gt;collect&lt;/code&gt; method to put the results
into a &lt;code&gt;List&lt;/code&gt; will do just this&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;TwitterUser&amp;gt; topTen = allTwitterUsers.values().stream()
                                          .sorted(comparingInt(TwitterUser::getNumberOfTweets).reversed())
                                          .limit(10)
                                          .collect(Collectors.toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this set of stream operations, we&amp;rsquo;re effectively querying our map of all users. If we were querying a
database instead of a map, we might have written something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SELECT * from TwitterUsers
ORDER BY numberOfTweets DESC
LIMIT 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is how we built the whole operation:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/java8/Streams.gif&#34; alt=&#34;Using Streams&#34; title=&#34;Using Streams&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;creating-our-own-streams:d169180f3a40e9c29149c257bc7fd971&#34;&gt;Creating our own Streams&lt;/h3&gt;

&lt;p&gt;Another part of this application requires a bar chart, where each bar corresponds to a minute in time over a period
of ten minutes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/java8/bar-chart.png&#34; alt=&#34;Bar Chart Widget&#34; title=&#34;Bar Chart Widget&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;When the application starts for the first time, each of these bars needs to be set to an initial value of zero.&lt;/p&gt;

&lt;p&gt;This is not an unusual situation - we&amp;rsquo;ve probably all written code that has to loop for some number of iterations and
initialise some value.  We would probably usually do it using something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public HappinessChartData() {
    int nowMinute = LocalDateTime.now().getMinute();

    for (int i = nowMinute; i &amp;lt; nowMinute + 10; i++) {
        initialiseBarToZero(i);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we also use a very small part of the new
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/jf14-date-time-2125367.html&#34;&gt;Date &amp;amp; Time API&lt;/a&gt;.  In the Java 8 world, we
have more options for iterating over values.  In this case, we can create our own &lt;code&gt;IntStream&lt;/code&gt; from a range of
values and perform some operation for each of these values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public HappinessChartData() {
    int nowMinute = LocalDateTime.now().getMinute();

    IntStream.range(nowMinute, nowMinute + 10)
             .forEach(value -&amp;gt; initialiseBarToZero(value));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can use a lambda expression to specify what to do with each of the values.  As before, we can also
simplify this lambda expression to a method reference.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    IntStream.range(nowMinute, nowMinute + 10)
             .forEach(this::initialiseBarToZero);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method of iterating is marginally less code, and, once we get used to the new syntax, arguably more readable.
The performance of the two methods is not the same, however, so you&amp;rsquo;ll have to decide which method to use based on
your team&amp;rsquo;s preferences for syntax and the performance requirements of your application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/java8/CreateStream.gif&#34; alt=&#34;Create a Stream&#34; title=&#34;Create a Stream&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;file-handling-in-java-8:d169180f3a40e9c29149c257bc7fd971&#34;&gt;File Handling in Java 8&lt;/h3&gt;

&lt;p&gt;Java 7 introduced some really nice features for file handling. Working with files has become even
more intuitive when you combine these Java 7 features with streams.&lt;/p&gt;

&lt;p&gt;In this example, we&amp;rsquo;re parsing a file which contains Tweets recorded from the Twitter firehose.  Each line contains a
different tweet, and what we want to do is filter out the noise (there are lines that contain only the single String
&amp;ldquo;OK&amp;rdquo; as a response from Twitter) and then publish the remaining tweets via websockets.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    try (Stream&amp;lt;String&amp;gt; lines = Files.lines(filePath)) {
        lines.filter(s -&amp;gt; !s.equals(&amp;quot;OK&amp;quot;))
             .forEach(tweetsEndpoint::onMessage);
    } catch (IOException e) {
        //error handling here
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, I&amp;rsquo;m not tempted to show the Java 6 version of the code, as the Java 8 version is much simpler.  The first line
uses &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html&#34;&gt;try-with-resources&lt;/a&gt;
to obtain a strea, of &lt;code&gt;Strings&lt;/code&gt;, one string per line in our file.  Then we use the &lt;code&gt;filter()&lt;/code&gt;
method to exclude the lines that aren&amp;rsquo;t tweets, and finally publish all the remaining tweets via our websocket
server endpoint.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/java8/Java7And8.gif&#34; alt=&#34;File handling with Java 8&#34; title=&#34;File handling with Java 8&#34; /&gt;
&lt;/p&gt;

&lt;h3 id=&#34;advanced-streams-and-more-collectors:d169180f3a40e9c29149c257bc7fd971&#34;&gt;Advanced Streams and More Collectors&lt;/h3&gt;

&lt;p&gt;The last part of the application that I&amp;rsquo;d like to show you in more depth, is the mood analyser.  The aim of
this small service is to take a single Tweet and figure out the mood of that Tweet in a very rough fashion.  It will
generally decide if a single Tweet is &amp;ldquo;happy&amp;rdquo;, &amp;ldquo;sad&amp;rdquo;, or &amp;ldquo;happy &lt;em&gt;and&lt;/em&gt; sad&amp;rdquo;, and return a comma separated String of
the mood in upper case. So for example:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Today was a great day!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;would be classified as &amp;ldquo;HAPPY&amp;rdquo;,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I&amp;rsquo;m irritated I have to work tomorrow&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;would be &amp;ldquo;SAD&amp;rdquo;, and&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The start of this week was fantastic, but today sucks&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;contains both good and bad news, so would be &amp;ldquo;HAPPY,SAD&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;If I had an automated system for applying moods to Twitter messages, I&amp;rsquo;d be retired on a beach
somewhere, this kind of analysis is very much in demand.  In my application, I settle instead for a very crude method
of classifying the messages - we&amp;rsquo;re going to parse the message and look for words that might imply &amp;ldquo;happy&amp;rdquo; or &amp;ldquo;sad&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;We start with a &lt;code&gt;Map&lt;/code&gt;, which maps words to their associated mood (represented as an enum).  Something like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;happy&amp;quot;: HAPPY,
 &amp;quot;fantastic&amp;quot;: HAPPY,
 &amp;quot;awesome&amp;quot;: HAPPY,
 ...
 &amp;quot;sad&amp;quot;: SAD,
 &amp;quot;terrible&amp;quot;: SAD,
 &amp;quot;sucks&amp;quot;: SAD]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a number of approaches to this problem, this is not a definitive answer. I will demonstrate
with my selected method how you can chain together stream operations to get the output that you need.&lt;/p&gt;

&lt;p&gt;Firstly, we create a stream where each item is a word in the original Twitter message.  We use &lt;code&gt;String&lt;/code&gt;&amp;rsquo;s &lt;code&gt;split()&lt;/code&gt;
method to create an array of words, and use &lt;code&gt;Stream.of()&lt;/code&gt; to turn this into a &lt;code&gt;Stream&lt;/code&gt; of &lt;code&gt;Strings&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we&amp;rsquo;re going to convert all these words to lowercase, as our map of words to moods only has lowercase keys.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
      .map(String::toLowerCase)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;map()&lt;/code&gt; method takes one value and turns it into another.  In this case, we want to turn a &lt;code&gt;String&lt;/code&gt; value like
&amp;ldquo;Awesome&amp;rdquo; into its lowercase version, &amp;ldquo;awesome&amp;rdquo;.  It&amp;rsquo;s easy pass in String&amp;rsquo;s &lt;code&gt;toLowerCase()&lt;/code&gt; method as a method
reference to do the conversion.&lt;/p&gt;

&lt;p&gt;Now we have a string in the correct case, we can search our map of words-to-moods for the mood that corresponds to
this word.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
      .map(String::toLowerCase)
      .map((lowerCaseWord) -&amp;gt; WORD_TO_MOOD.get(lowerCaseWord))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not every word is going to have a corresponding mood in the map, so we&amp;rsquo;re only going to pass non-null moods to the
next step of the pipeline&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
      .map(String::toLowerCase)
      .map((lowerCaseWord) -&amp;gt; WORD_TO_MOOD.get(lowerCaseWord))
      .filter(mood -&amp;gt; mood != null)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now what I have is a &lt;code&gt;Mood&lt;/code&gt;, an enum value of either &lt;code&gt;HAPPY&lt;/code&gt; or &lt;code&gt;SAD&lt;/code&gt;. Our requirements state that for each tweet, we
need to return one of &amp;ldquo;HAPPY&amp;rdquo;, &amp;ldquo;SAD&amp;rdquo;, or &amp;ldquo;HAPPY,SAD&amp;rdquo;. We don&amp;rsquo;t need an indication of whether there are multiple happy
words or sad words in the same tweet, so we only need one instance of each mood. This is easily done by requiring the
stream to contain only distinct values.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
      .map(String::toLowerCase)
      .map((lowerCaseWord) -&amp;gt; WORD_TO_MOOD.get(lowerCaseWord))
      .filter(mood -&amp;gt; mood != null)
      .distinct()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;According to our requirements, we need to convert our enum value to a String&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
      .map(String::toLowerCase)
      .map((lowerCaseWord) -&amp;gt; WORD_TO_MOOD.get(lowerCaseWord))
      .filter(mood -&amp;gt; mood != null)
      .distinct()
      .map((mood) -&amp;gt; mood.name())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, we want to merge together all the moods found for this message into a comma separated string of moods.
In our previous Stream example, we used &lt;code&gt;Collectors.toList()&lt;/code&gt; to return a &lt;code&gt;List&lt;/code&gt;
of &lt;code&gt;TwitterUsers&lt;/code&gt;. This time, we&amp;rsquo;re going to use another built in collector, &lt;code&gt;Collectors.joining()&lt;/code&gt; and give it the
characters we want to use to separate our results. &lt;code&gt;joining()&lt;/code&gt; will return a &lt;code&gt;String&lt;/code&gt; of your results, separated by
your chosen delimiter. Which means that now in Java 8 we can easily create comma separated strings without having to
iterate over a list and figure out if we&amp;rsquo;re supposed to be putting a comma after this item or not.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
      .map(String::toLowerCase)
      .map((lowerCaseWord) -&amp;gt; WORD_TO_MOOD.get(lowerCaseWord))
      .filter(mood -&amp;gt; mood != null)
      .distinct()
      .map((mood) -&amp;gt; mood.name())
      .collect(Collectors.joining(&amp;quot;,&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, let&amp;rsquo;s simplify the lambdas to method references where possible, and turn this into a method we can use&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public static String identifyMood(String twitterMessage) {
    return Stream.of(twitterMessage.split(&amp;quot;\\s+&amp;quot;))
                 .map(String::toLowerCase)
                 .map(WORD_TO_MOOD::get)
                 .filter(mood -&amp;gt; mood != null)
                 .distinct()
                 .map(Enum::name)
                 .collect(joining(&amp;quot;,&amp;quot;));
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we called &lt;code&gt;identifyMood&lt;/code&gt; with the message &amp;ldquo;Yesterday I was sad sad sad, but today is awesome&amp;rdquo;, we&amp;rsquo;ll get the
String &amp;ldquo;SAD,HAPPY&amp;rdquo; in return.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://trishagee.github.io/static/images/java8/AdvancedStreams.gif&#34; alt=&#34;Advanced Streams&#34; title=&#34;Advanced Streams&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;With this example we have seen how you can chain multiple operations to perform fairly complex processing, with limited
lines of code.&lt;/p&gt;

&lt;h3 id=&#34;summary:d169180f3a40e9c29149c257bc7fd971&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Java 8 is more than just a bit of extra syntax to learn, or a couple of new methods that might be useful.
It can change the way we approach solving common problems. With lambda expressions, streams and some of the other
new methods in Java 8, you can use easily perform common operations (for example, &lt;code&gt;computeIfAbsent()&lt;/code&gt; and &lt;code&gt;joining()&lt;/code&gt;),
and you gain a new set of tools, particularly in manipulating data sets.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
