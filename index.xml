<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Trisha Gee </title>
    <link>http://trishagee.github.io/index.xml/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Thu, 22 Sep 2016 00:00:00 UTC</updated>
    
    <item>
      <title>Anticipating Java 9 - Functionality and Tooling</title>
      <link>http://trishagee.github.io/presentation/java_9_are_we_there_yet/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/java_9_are_we_there_yet/</guid>
      <description>

&lt;p&gt;Looking ahead to what functionality is available in Java 9, and IntelliJ IDEA&amp;rsquo;s support (current and future) for it.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;At JavaOne this year we&amp;rsquo;re learning all about what&amp;rsquo;s coming in Java 9, and it&amp;rsquo;s so much more than just Jigsaw.  But what we&amp;rsquo;re really wondering is, will it change the way we develop, like Java 8 did?  Will my tools break when I try to use it? Is it worth playing with it before it comes out, or should I just wait until everything stabilises?&lt;/p&gt;

&lt;p&gt;In this talk, Trisha will take a look at the features coming in Java 9, focussing on those that may be most useful to us in the day job.  She will demonstrate using some of these features in IntelliJ IDEA.  And finally, she&amp;rsquo;ll share the roadmap for Java 9 support in IntelliJ IDEA.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://jdk9.java.net/download/&#34;&gt;Download the latest Java JDK here&lt;/a&gt; (the talk uses build 136).&lt;/p&gt;

&lt;p&gt;At the time of writing, &lt;a href=&#34;https://confluence.jetbrains.com/display/IDEADEV/IDEA+2016.3+EAP&#34;&gt;IntelliJ IDEA 2016.3 EAP&lt;/a&gt; (build 163.4396) comes with
some support for jigsaw. In the talk I use build 163.4771, which builds with Java language level 9 without error and also supports
multi-module projects.  Keep an eye on the
&lt;a href=&#34;https://blog.jetbrains.com/idea/tag/2016-3/&#34;&gt;IntelliJ blog&lt;/a&gt; for further updates.&lt;/p&gt;

&lt;p&gt;The Jigsaw code I used was from the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Getting Started tutorial&lt;/a&gt;, and the &lt;a href=&#34;https://java.net/downloads/adoptopenjdk/REPL_Tutorial.pdf&#34;&gt;Java REPL
Tutorial&lt;/a&gt; helped me get started with JShell.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;More information&lt;/h2&gt;

&lt;p&gt;Joseph Darcy&amp;rsquo;s talk on
&lt;a href=&#34;https://youtu.be/vKYzmIi_1LM&#34;&gt;JDK 9 Language, Tooling and Library Features&lt;/a&gt; from JavaOne is a good summary of what&amp;rsquo;s coming (&lt;a href=&#34;https://blogs.oracle.com/darcy/resource/JavaOne/J1_2016-jdk9-lang-tools-libs.pdf&#34;&gt;slides
also available&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Aurelio Garcia Ribeyro has a great talk summarising all the features, which I can only find
&lt;a href=&#34;http://onetime.dev.beachfrontbuilder.com/view/943985?type=channel&amp;amp;id=169&amp;amp;page=1&#34;&gt;in Spanish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The OpenJDK wiki provides &lt;a href=&#34;https://wiki.openjdk.java.net/display/Adoption/JDK+9+Outreach&#34;&gt;guidance on running your code with Java 9&lt;/a&gt;, and a
&lt;a href=&#34;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&#34;&gt;list of libraries and frameworks who are currently testing against Java 9&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upcoming Events</title>
      <link>http://trishagee.github.io/presentation/upcoming_events/</link>
      <pubDate>Fri, 16 Sep 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/upcoming_events/</guid>
      <description>&lt;p&gt;While the list in the &lt;a href=&#34;/presentation/public_appearances/&#34;&gt;talks section&lt;/a&gt; of my blog covers past presentations,
this page should list my confirmed upcoming events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;18-22 Sep 2016&lt;/strong&gt;: &lt;a href=&#34;https://www.oracle.com/javaone/speakers.html#gee&#34;&gt;JavaOne, San Francisco - Refactoring to Java 8, Java Council Live&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;30 Sep - 1 Oct 2016&lt;/strong&gt;: &lt;a href=&#34;http://www.lambda.world/speakers/&#34;&gt;Lambda World, Cadiz - Java 8 in Anger&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;7-11 Nov&lt;/strong&gt;: &lt;a href=&#34;https://devoxx.be/&#34;&gt;DevoxxBE, Antwerp - Refactoring to Java 8&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;1-9 Dec&lt;/strong&gt;: &lt;a href=&#34;http://melbourne.yowconference.com.au/speakers/&#34;&gt;YOW! Melbourne, Brisbane, Sydney - Java 8 in Anger&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaZone 2016</title>
      <link>http://trishagee.github.io/post/javazone_2016/</link>
      <pubDate>Fri, 16 Sep 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/javazone_2016/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since I wrote a conference write up.  The short version of &amp;ldquo;why&amp;rdquo; is because I got a bit bored of doing it.  Plus, I
found I was attending conferences as a speaker &amp;ldquo;on the circuit&amp;rdquo;, and my experience of hanging out, catching up with my friends, chatting
 to other attendees to see what they&amp;rsquo;re up to and so forth, didn&amp;rsquo;t seem as useful to share with people who might want to find out
 whether a conference is worth attending from a content or atmosphere point of view.&lt;/p&gt;

&lt;p&gt;But I feel compelled to blog about &lt;a href=&#34;https://2016.javazone.no/&#34;&gt;JavaZone&lt;/a&gt;. I presented there back in &lt;a href=&#34;/post/javazone_oslo&#34;&gt;2013&lt;/a&gt;, but every year since then haven&amp;rsquo;t
made it for one reason or another (the fact that it&amp;rsquo;s near my birthday in no way impacts my scheduling…).  I made the effort this year, and
I&amp;rsquo;m so pleased.  Now I&amp;rsquo;ve been to many more conferences, of various sizes, various themes, all around the world, and I can definitely
state that JavaZone is up there as one of the best conferences around.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The content is great, JavaZone manages to attract a lot of great speakers who can present on topics that range from &lt;a href=&#34;https://vimeo.com/181814364&#34;&gt;deeply
technical&lt;/a&gt; to &lt;a href=&#34;https://vimeo.com/181925281&#34;&gt;more theoretical&lt;/a&gt; to concepts
&lt;a href=&#34;https://vimeo.com/182087729&#34;&gt;beyond just code and syntax&lt;/a&gt;.  They also really make an effort to encourage local presenters, and to offer
the option of lightning talks. I love this from the point of view of encouraging more from the community to get involved and present themselves, but also because you get more novel content - experience reports from developers deep in the trenches; teams who can tell you what they&amp;rsquo;ve found trying to implement things that we hear about at conferences; and other things from the point of view of real developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.45.36-coffee.jpg&#34; alt=&#34;Food and fantastic coffee&#34; title=&#34;Food and fantastic coffee&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The food is fantastic, and available all day.  I made half of a promise to myself not to rate conferences on the quality of the food
after I had a glimpse at how insanely hard it is for conference organisers to balance the requirements of keeping ticket costs low,
using an adequate venue in an accessible location, and providing some sort of catering through the day.  Especially when venues
themselves often restrict this.  I don&amp;rsquo;t know how JavaZone do it, but now I&amp;rsquo;m aware of all these issues, I&amp;rsquo;m even more impressed at the
variety and quality of their food.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.46.02-robots.jpg&#34; alt=&#34;Robots&#34; title=&#34;Robots&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The venue.  The location in the centre of Oslo is nice, often conference venues are out of town, making them hard to get to or, if
you&amp;rsquo;re staying near there, terribly isolated.  One of the reasons to travel to a conference is to see the city, and you get a chance to
do that at JavaZone. So it&amp;rsquo;s central, easy to get to, with plenty of great hotels nearby.  The venue itself also nicely laid out, with
presentation rooms circling a central exhibition space.  Which leads me to&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 09.46.18-exhibition.jpg&#34; alt=&#34;Exhibition&#34; title=&#34;The Exhibition&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The exhibition space is brilliant.  Because it&amp;rsquo;s central, most people spend their time between sessions in the exhibition hall.  As
an exhibitor (JetBrains had a stand there), this is obviously useful to us, but as an attendee it’s nice to know there&amp;rsquo;s a place to go
to hang out where other people will also be hanging out.  Especially when the vibe of the hall was so much fun, so energetic.  And the
stands themselves were impressive: some bribing us with excellent coffee; several with lego areas inviting you to sit down and play;
interactive VR headsets; modern and retro gaming centres (curses, I forgot to take a photo); interactive quizzes and games… As for us,
we had a sofa, and I loved that, it felt welcoming and relaxed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.45.20-games.jpg&#34; alt=&#34;Games&#34; title=&#34;Exhibition&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everyone is really friendly.  The crew and JUG people were easy to spot and friendly if you needed help. All attendees and speakers
were happy to strike up conversations short and long, on a variety of topics. People smiled.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s a big conference, there are a lot of attendees, but it doesn&amp;rsquo;t feel big and daunting.  Instead, you get the benefit of 8 tracks
of varied content, but don&amp;rsquo;t feel lost in the crowd.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 09.39.20-overflow.jpg&#34; alt=&#34;Overflow Room&#34; title=&#34;Overflow Room&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The overflow room is the best thing I&amp;rsquo;ve ever seen at a conference, and I&amp;rsquo;m seriously wondering if I can set up something similar at
home (on a much smaller scale!) to let me skim content from multiple talks when I&amp;rsquo;m doing research, or maybe just something to have
half an eye on while I&amp;rsquo;m entertaining the minion.&lt;/li&gt;
&lt;li&gt;It was, from my point of view as an attendee and speaker, incredibly well organised.  It felt smooth, and touches like the big
monitors flashing up relevant information was really nice.  I also loved that the video production quality and presentation of the
stages and so forth was really professional.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.46.36-stacks-coffee.jpg&#34; alt=&#34;Plenty of caffeine for the developers&#34; title=&#34;Plenty of caffeine for the developers&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I personally think it&amp;rsquo;s brilliant that the &lt;a href=&#34;https://vimeo.com/album/4133413&#34;&gt;videos are online&lt;/a&gt; really soon after you&amp;rsquo;ve presented.
Sometimes as a speaker you might want a delay on the video - conferences may be more likely to accept your talk if it&amp;rsquo;s not already widely available.  For me though,
especially when giving a new talk like we did here, it&amp;rsquo;s nice to be able to see the video so soon afterwards, to see how it went and
learn from it.  For speakers just starting on their presenting career, it&amp;rsquo;s also great - you have a video to use in your &amp;ldquo;portfolio&amp;rdquo; to
help you get your talk(s) accepted at other conferences.&lt;/li&gt;
&lt;li&gt;And I can&amp;rsquo;t leave this without mentioning diversity.  Now that I&amp;rsquo;m a world-weary veteran of conferences, I&amp;rsquo;m fairly blind to gender
balance unless I specifically look, or something out of the ordinary catches my attention.  I don&amp;rsquo;t know what the percentages were, but
I noticed so many women at the conference, women who were clearly professionals attending the conference and not hired booth babes or
staff of some other kind.  It was obvious and pleasing.  I&amp;rsquo;m not sure how the other women attendees felt, if it was their first
conference maybe they still noticed there were fewer women than men, but the difference to me was that whichever direction I looked
in, there was at least &lt;em&gt;one&lt;/em&gt; woman, usually more. I don&amp;rsquo;t know if there are more women developers in Up North, or if it&amp;rsquo;s just a
conference that somehow appeals more to women than other conferences. I&amp;rsquo;d be interested to find out if any special measures were taken
by the conference organisers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I know a bit more about conferences and how they work behind the scenes, I&amp;rsquo;m astounded at JavaZone.  It feels like  a lot of money has been spent getting it really right, and/or they&amp;rsquo;ve worked really hard to get the absolute most out of what budget they have.&lt;/p&gt;

&lt;p&gt;If I had to really hunt for a downside, it&amp;rsquo;s that all the free alcohol was beer and not wine.  Yep, a complaint about free beer.  But knowing how expensive wine is in Norway, I&amp;rsquo;m not at all surprised.  Plus, moaning about the exact type of free alcohol available seems churlish at best.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 16.28.07-jetbrains.jpg&#34; alt=&#34;The JatBrains stand&#34; title=&#34;The JetBrains stand&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you do get a chance to go to JavaZone as an attendee or speaker, I highly recommend it.  I hope to be going again.&lt;/p&gt;

&lt;p&gt;PS In case you&amp;rsquo;re interested, we were presenting a new talk,
&lt;a href=&#34;presentation/code_review_matters_and_manners&#34;&gt;Code Review Matters and Manners&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Review Matters and Manners</title>
      <link>http://trishagee.github.io/presentation/code_review_matters_and_manners/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/code_review_matters_and_manners/</guid>
      <description>

&lt;p&gt;Content and resources for the Code Review Matters and Manners talk, including links to additional information and
supporting material.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;A code review is basically a technical discussion which should lead to improvements in the code and/or sharing
knowledge in a team. As with any conversation, it should have substance and form.&lt;/p&gt;

&lt;p&gt;What’s involved in a good code review? What kind of problems do we want to spot and address? Trisha Gee will talk
about things a reviewer may consider when looking at changes:  what potential issues to look for; why certain
patterns may be harmful; and, of course, what NOT to look at.&lt;/p&gt;

&lt;p&gt;But when it comes to commenting on someone’s work, it may be hard to find the right words to convey a useful message
without offending the authors - after all, this is something that they worked hard on. Maria Khalusova will share
some observations, thoughts and practical tricks on how to give and receive feedback without turning a code review
into a battlefield.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/182087729&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/7wG1iGAnGsQ4F6&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;More Information&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Books&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;What to Look for in a Code Review&lt;/a&gt; - Trisha Gee (free!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=4f2f97b38b1e19961a4425340aef003b&#34;&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0735619670&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Steve McConnell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=86afa947570d6d5c8d03f7c4d495c449&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0132350882&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Robert C. Martin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/&#34;&gt;What to look for in a Code Review&lt;/a&gt;, the article that started all of this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/03/what-to-look-for-in-a-code-review-tests/&#34;&gt;What to look for in a Code Review: Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/06/what-to-look-for-in-a-code-review-performance/&#34;&gt;What to look for in a Code Review: Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/20/what-to-look-for-in-a-code-review-data-structures/&#34;&gt;What to look for in a Code Review: Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/31/what-to-look-for-in-a-code-review-solid-principles-2/&#34;&gt;What to look for in a Code Review: SOLID Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/05/what-to-look-for-in-a-code-review-security/&#34;&gt;What to look for in a Code Review: Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/19/what-to-look-for-in-a-code-review-upsource-quick-wins/&#34;&gt;What to look for in a Code Review: Upsource Quick Wins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2016/08/03/what-to-look-for-in-java-8-code/&#34;&gt;What to look for in: Java 8 code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/code-reviews-just-do-it/&#34;&gt;Code Reviews: Just Do It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.fullstory.com/what-we-learned-from-google-code-reviews-arent-just-for-catching-bugs-b125a13aa292#.mktgod79l&#34;&gt;What we learned from Google: code reviews aren’t just for catching bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infragistics.com/community/blogs/erikdietrich/archive/2016/06/29/the-human-cost-of-tech-debt.aspx&#34;&gt;The Human Cost of Tech Debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2016/06/21/pick-battles-software-team/&#34;&gt;How to Pick Your Battles on a Software Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;And, of course&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can &lt;a href=&#34;https://www.jetbrains.com/upsource/&#34;&gt;download Upsource&lt;/a&gt;, it&amp;rsquo;s free for up to 10 users.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Year? Really?</title>
      <link>http://trishagee.github.io/post/what_a_year.md/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/what_a_year.md/</guid>
      <description>&lt;p&gt;So I came to the blog to update my &lt;a href=&#34;//presentation/upcoming_events/&#34;&gt;upcoming events&lt;/a&gt; (at least something stays up to date) only to find
it&amp;rsquo;s been nearly a year since I last blogged!  This is terrible!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not that I haven&amp;rsquo;t written anything in a year, it&amp;rsquo;s that a lot of my writing energy goes into
stuff for the actual day job.  Which is good, because that&amp;rsquo;s pretty much what I wanted from the day job, but the blog makes it look like
I don&amp;rsquo;t write any more.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m going to cheat.  Here&amp;rsquo;s the stuff I&amp;rsquo;ve written in the last 12 months.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A whole series of articles off the back of last year&amp;rsquo;s &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Java 8 in Anger&lt;/a&gt; talk:
&lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features That You Won’t Be Able to Live Without&lt;/a&gt;,
&lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8?&lt;/a&gt;, and &lt;a href=&#34;https://community.oracle.com/docs/DOC-920950&#34;&gt;Java SE 8 in Practice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A tutorial on &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-test-driven-development.html&#34;&gt;TDD in IntelliJ IDEA&lt;/a&gt;. I have video
clips to turn this into a screencast as well, but that&amp;rsquo;s Yet Another thing I didn&amp;rsquo;t get around to.&lt;/li&gt;
&lt;li&gt;A tutorial on how IntelliJ IDEA helps you &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-migrating-to-java-8.html&#34;&gt;migrate code to Java 8&lt;/a&gt;.  This evolved into the other thing I&amp;rsquo;ve been working on this year, my latest live demo
presentation, &lt;a href=&#34;/presentation/refactoring_to_java_8/&#34;&gt;Refactoring to Java 8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A whole series of blog posts on &lt;a href=&#34;https://blog.jetbrains.com/upsource/category/practices/&#34;&gt;&amp;ldquo;What to look for in a code review&amp;rdquo;&lt;/a&gt;. This was fun and satisfying to write.&lt;/li&gt;
&lt;li&gt;&amp;hellip;which got &lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;turned into a book&lt;/a&gt;. Yes, I&amp;rsquo;m finally the author of a book!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2016/07/java-8-top-tips/&#34;&gt;Java 8 Top Tips&lt;/a&gt;, with a bunch of IntelliJ-specific tips&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve taken over &lt;a href=&#34;https://blog.jetbrains.com/idea/tag/java-annotated/&#34;&gt;Java Annotated Monthly&lt;/a&gt;, so at least you get to hear from me
once a month with that. I try really hard not to be too sarcastic, jokey or British when I write the newsletter. I don&amp;rsquo;t always succeed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve also done a bunch of screencasts &amp;amp; webinars for &lt;a href=&#34;https://www.youtube.com/user/intellijideavideo/videos&#34;&gt;IntelliJ IDEA&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/playlist?list=PLQ176FUIyIUa50f13M4v5Nvp6b-IBNB4e&#34;&gt;Upsource
and Team City&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh yeah, and I had a baby.  I&amp;rsquo;m contemplating blogging about being a working parent, but I&amp;rsquo;m a bit concerned that Of Course a woman is
going to blog about Being A Mother, when previously I just blogged about&amp;hellip; well, come to think about it I blogged about all sorts of
things, including &lt;a href=&#34;/post/why_the_customer_isnt_always_right/&#34;&gt;haircuts&lt;/a&gt; and
&lt;a href=&#34;/post/what_my_hangovers_can_teach_you_about_agile/&#34;&gt;hangovers&lt;/a&gt;, so I guess I could probably get away with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Applying Java 8 Idioms to Existing Code</title>
      <link>http://trishagee.github.io/presentation/refactoring_to_java_8/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/refactoring_to_java_8/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Understand how to improve performance with your Java code using Java 8 language features.&lt;/li&gt;
&lt;li&gt;Learn hands on techniques to discover and implement common Java 8 refactorings.&lt;/li&gt;
&lt;li&gt;Understand when you should and should not apply key refactorings in Java 8.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;While we’re drawing ever closer to Java 9, and even hearing about features in Java 10, many of us are still working with an older version. Even if your project has technically adopted Java 8, and even if you’re using it when coding new features, it’s likely that the majority of your code base is still not making the most of what’s available in Java 8 - features like Lambda Expressions, the Streams API, and new Date/Time. And this is a shame, since Java 8 provides not only nicer syntax for developers, but (usually) better application performance.&lt;/p&gt;

&lt;p&gt;In this presentation, Trisha will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight the performance benefits of using Java 8 - after all, you’ll probably have to persuade &amp;ldquo;The Management&amp;rdquo; that tampering with
existing code is worthwhile&lt;/li&gt;
&lt;li&gt;Demonstrate how to identify areas of code that can be updated to use Java 8 features, and how to pick which changes will give you the
most benefit&lt;/li&gt;
&lt;li&gt;Demonstrate how to automatically refactor your code to make use of features like lambdas and streams&lt;/li&gt;
&lt;li&gt;Cover some of the pros and cons of using the new features - including suggestions of when refactoring may NOT be the best idea.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;p&gt;Most recent version, containing performance analysis, is on the
&lt;a href=&#34;https://www.infoq.com/presentations/java8-lambda-streams&#34;&gt;InfoQ website&lt;/a&gt;, and InfoQ also has a nice summary of the &lt;a href=&#34;https://www.infoq.com/articles/qcon-new-york-2016#_Toc456084721&#34;&gt;points covered in
the talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first appearance was at &lt;a href=&#34;https://www.youtube.com/watch?v=dlzMV83RTtw&#34;&gt;DevoxxUK&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/xPhKtRN9aOsHZd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;You can purchase a more in-depth tutorial on
&lt;a href=&#34;http://www.informit.com/store/refactoring-to-modern-java-livelessons-video-training-9780134653594&#34;&gt;informIT&lt;/a&gt;, and is also available via
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/refactoring-to-modern/9780134653617/&#34;&gt;Safari Books Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The IntelliJ-specific features of some of the refactoring shown are covered in my
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Article: &lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features You Won&amp;rsquo;t Be Able to Live Without&lt;/a&gt;&lt;br /&gt;
Video and Research: &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Building a Java 8 Application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The project we&amp;rsquo;re refactoring is &lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt;. You can see the &amp;ldquo;after&amp;rdquo; of the chosen refactorings on the
 &lt;a href=&#34;https://github.com/trishagee/morphia/tree/r2j8&#34;&gt;r2j8&lt;/a&gt; branch.&lt;/p&gt;

&lt;p&gt;The performance tests that were written and run specifically for this talk are in the &lt;a href=&#34;https://github.com/trishagee/j8-morphia-perf-tests&#34;&gt;j8-morphia-perf-tests repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Performance&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Lambda Expressions&lt;/h3&gt;

&lt;p&gt;Video: &lt;a href=&#34;http://medianetwork.oracle.com/video/player/2623576348001&#34;&gt;Lambda Performance&lt;/a&gt; and &lt;a href=&#34;http://www.oracle
.com/technetwork/java/jvmls2013kuksen-2014088.pdf&#34;&gt;talk slides&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood&#34;&gt;Java 8 Lambdas - A Peek Under the Hood&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href=&#34;https://youtu.be/MLksirK9nnE&#34;&gt;Lambdas in Java: A Peek under the Hood - Brian Goetz&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Streams&lt;/h4&gt;

&lt;p&gt;Video: &lt;a href=&#34;https://www.infoq.com/presentations/java8-stream-performance&#34;&gt;Let’s Get to the Rapids: Java 8 Stream Performance&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://jaxenter
.com/java-performance-tutorial-how-fast-are-the-java-8-streams-118830.html&#34;&gt;Java performance tutorial: How fast are the Java 8 streams? - Angelika Langer&lt;/a&gt; Notable Quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, the for-loop is faster that the sequential stream operation, but the difference on an ArrayList is not nearly as significant as
it was on an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will find that there is no measurable difference any more between for-loop and sequential stream if the functionality is heavily cpu
 bound.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The point to take home is that sequential streams are no faster than loops. If you use sequential streams then you don’t do it for
performance reasons; you do it because you like the functional programming style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reality check via our benchmark yields a ratio (sequential / parallel) of only 1.6 instead of 2.0, which illustrates the amount of
overhead that is involved in going parallel and how (well or poorly) it is overcompensated (on this particular platform).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this in mind it is fair to say that the performance model of streams is not a trivial one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;you need to benchmark a lot in order to find out for a given context whether going parallel is worth doing or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The realisation is: Yes, parallel stream operations are easy to use and often they run faster than sequential operations, but don’t
expect miracles. Also, don’t guess; instead, benchmark a lot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.takipi
.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/&#34;&gt;Benchmark: How Misusing Streams Can Make Your Code 5 Times Slower&lt;/a&gt; -
interesting comparison of different iteration styles.  Also shows that things like boxing might add more cost than streams (but that you
don&amp;rsquo;t realise you&amp;rsquo;re boxing)&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance/&#34;&gt;Stream Performance&lt;/a&gt; - some interesting benchmarks based on Angelika Langer&amp;rsquo;s
article&lt;br /&gt;
Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance-your-ideas/&#34;&gt;Follow up on Stream Performance&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Date and Time&lt;/h3&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://java-performance.info/jsr-310-java-8-datetime-library-performance-well-joda-time-2-3-j-u-calendar/&#34;&gt;JSR 310 – Java 8 Date/Time library performance (as well as Joda Time 2.3 and j.u.Calendar)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Benchmarking&lt;/h3&gt;

&lt;p&gt;I used a bunch of techniques to produce the benchmarks on the talk.  I&amp;rsquo;d like to summarise them more thoroughly when I get a chance, but
for now here&amp;rsquo;s my background reading:&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&#34;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tool: &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;&lt;br /&gt;
Tool: &lt;a href=&#34;https://github.com/artyushov/idea-jmh-plugin&#34;&gt;IntelliJ JMH Plugin&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;http://java-performance.info/jmh/&#34;&gt;Introduction to JMH&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;&amp;ldquo;Best Practice&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I dislike the term &amp;ldquo;Best Practice&amp;rdquo; as it implies a &amp;ldquo;one size fits all&amp;rdquo; approach, and I believe that our job is to
make difficult decisions based on various pros and cons and differing situations.  However, here I will collect
resources that may help us make some of those decisions&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://martinfowler.com/articles/refactoring-pipelines.html&#34;&gt;Refactoring with Loops and Collection Pipelines&lt;/a&gt; -
Martin Fowler&lt;br /&gt;
Slides: &lt;a href=&#34;http://martinfowler.com/articles/workflowsOfRefactoring/&#34;&gt;Workflows of Refactoring&lt;/a&gt; - Martin Fowler&lt;br /&gt;
Book: &lt;a href=&#34;https://www.amazon.com/gp/product/0201485672/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201485672&amp;amp;linkId=11d0b95e050a492112eeac6fb6b2bcb0&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; - Martin Fowler&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.joda.org/2014/11/optional-in-java-se-8.html&#34;&gt;Using Optional in Java SE 8&lt;/a&gt; - Stephen Colebourne&lt;br /&gt;
Article: &lt;a href=&#34;http://zeroturnaround.com/rebellabs/java-8-best-practices-cheat-sheet/&#34;&gt;Java 8 Best Practices Cheat Sheet&lt;/a&gt; - ZeroTurnaround&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 3 Summary</title>
      <link>http://trishagee.github.io/post/java_8_mooc_session3/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/java_8_mooc_session3/</guid>
      <description>&lt;p&gt;Last night was the final get-together to discuss the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt;. Any
event hosted in August in a city that is regularly over 40&amp;deg;C is going to face challenges, so it was great that
we had attendees from earlier sessions plus new people too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/java8mooc/lesson3.jpg&#34; alt=&#34;Woohoo lambdas!&#34; title=&#34;Woohoo lambdas!&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The aim of this session was to talk about Lesson 3, but also to wrap up the course as a whole: to talk about what we
liked and what we would have improved (about both the course itself and our user group events).&lt;/p&gt;

&lt;p&gt;As in the previous &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;/post/java_8_mooc_session2&#34;&gt;posts&lt;/a&gt;, let&amp;rsquo;s outline our
discussion areas:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findAny--&#34;&gt;findAny()&lt;/a&gt;
vs &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findFirst--&#34;&gt;findFirst()&lt;/a&gt;&lt;/strong&gt;: Why do we
need both of these methods, and when would you use them?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;findFirst()&lt;/code&gt; is the deterministic version, which will return you the first element in the Stream (according to
encounter order - see the section on
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;Ordering in the documentation&lt;/a&gt;).
So, regardless of whether you run the operation in parallel or serial, if you&amp;rsquo;re looking for &amp;ldquo;A&amp;rdquo; and use &lt;code&gt;findFirst&lt;/code&gt;
with this list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;rsquo;ll get the element at index 3 - the first &amp;ldquo;A&amp;rdquo; in the list.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;findAny()&lt;/code&gt; is non-deterministic, so will return you any element that matches your criteria - it could return the
element at index 3, or the one at position 6. Realistically, if the stream is on an ordered collection like a list,
when you run &lt;code&gt;findAny&lt;/code&gt; on a sequential stream, I expect it will return the same result as &lt;code&gt;findFirst&lt;/code&gt;.  The real
use-case for &lt;code&gt;findAny&lt;/code&gt; is when you&amp;rsquo;re running this on a parallel stream. Let&amp;rsquo;s take the above list, and assume that
when you run this on a parallel stream it&amp;rsquo;s processed by two separate threads:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;,    // processed by thread 1 
 &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]     // processed by thread 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible that thread 2 finds its &amp;ldquo;A&amp;rdquo; (the one at position 6) before thread 1 finds the one at position 3, so
this will be value that&amp;rsquo;s returned. By configuring the Stream to return any one of the values that matches the
criteria, you can potentially execute the operation faster when running in parallel.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;findAny&lt;/code&gt; is (potentially) faster in parallel and (probably) returns the same value as &lt;code&gt;findFirst&lt;/code&gt; when running in
serial, why not use that all the time?  Well, there are times when you really do want the first item. If you have a
list of DVDs ordered by year the film was released, and you want to find the original &amp;ldquo;King Kong&amp;rdquo; (for
example), you&amp;rsquo;ll want &lt;code&gt;findFirst&lt;/code&gt; to find the one released in 1933, not the one that was released in 1976 or the
one from 2005.&lt;/p&gt;

&lt;p&gt;Plus, &lt;code&gt;findFirst&lt;/code&gt; is not always going to be slower than &lt;code&gt;findAny&lt;/code&gt;, even in parallel.  Going back to our list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trying to &lt;code&gt;findFirst&lt;/code&gt; or &lt;code&gt;findAny&lt;/code&gt; for &amp;ldquo;H&amp;rdquo; could be the same performance for both methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collectors&lt;/strong&gt;: Maybe it&amp;rsquo;s just me who doesn&amp;rsquo;t really see the big picture for collectors.  I&amp;rsquo;m perfectly content with
the built in collectors like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toList())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toSet())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s easy to see what they do, and work out when you need to use them.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also very happy to have discovered &lt;code&gt;joining&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.joining(&amp;quot;,&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a super-useful way to create Comma Separated Values (CSVs) that I use in my
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where things get a bit murky for me is where we start chaining up collectors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.mapping(...).combiner().andThen(...).apply(...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(it should be obvious from my lack of clear example that I&amp;rsquo;m not 100% certain under which circumstances these are
useful).&lt;/p&gt;

&lt;p&gt;As a group, we think the chained collectors are kinda ugly - not because we&amp;rsquo;re against chaining (we like Streams),
but maybe because it&amp;rsquo;s another chain inside a param to a chain.&lt;/p&gt;

&lt;p&gt;We think this is an area where some good, solid examples and a bit of daily use will make it much clearer to
developers. We hope.&lt;/p&gt;

&lt;p&gt;Related to this, the course didn&amp;rsquo;t go into creating your own collectors at all. My personal (under-informed) opinion
is that I guess most developers should be able to use either the out-of-the-box collectors (&lt;code&gt;toList&lt;/code&gt; etc) or use the
collector chaining to build what they need. If you need a custom collector, perhaps you haven&amp;rsquo;t considered everything
that&amp;rsquo;s already available to you. But as a group, we decided we would have liked to see this topic anyway so that we
could get a deeper understanding of what collectors are and how they work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercises for lesson 3:&lt;/strong&gt; Well. What can we say? I really hope there are people reading this who haven&amp;rsquo;t finished
the course yet, because the Sevilla Java User group would like to say to you: don&amp;rsquo;t despair, the lesson 3 exercises
are &lt;em&gt;substantially&lt;/em&gt; harder than those for lessons 1 and 2. Honestly, the whole group considered it less of a learning
curve and more of a massive cliff to climb.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://herbookthoughts.reads-it.com/wp-content/uploads/2014/06/d6a1143f571184db25f94613edd43b40af6d3a629221aba00d9efdcfef5efd84.jpg&#34; alt=&#34;I have no idea what I am doing&#34; title=&#34;I have no idea 
what I am doing&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I mean, it was great to have something so challenging to end on, but it probably would have been less ego-destroying
if we could have got up to that level gradually instead of having it sprung on us.&lt;/p&gt;

&lt;p&gt;The good thing about Part 2 of the lesson 3 exercises was that we had three very different answers to discuss
in the group. None of us were super happy with any of them, but we could see definite pros and cons of each approach,
and that&amp;rsquo;s something you really want to learn in a course like this.&lt;/p&gt;

&lt;p&gt;It was also really great to have a rough performance test to run on your own computer, so that you could really see
the impact of your choices on the performance of the stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more info&lt;/strong&gt;&lt;br /&gt;
I&amp;rsquo;m going to add a shameless plug to a friend&amp;rsquo;s book here. I&amp;rsquo;ve been reading a lot about Java 8 for this course, for
my &lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;, and to generally get up to speed. My favourite book for getting to
grips with lambdas and streams
is &lt;a href=&#34;http://www.amazon.com/gp/product/B00J3B3J3C/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00J3B3J3C&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=IX6U2YT4FADY4JY6&#34;&gt;Java 8 Lambdas: Pragmatic Functional Programming&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=B00J3B3J3C&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
by &lt;a href=&#34;https://twitter.com/RichardWarburto&#34;&gt;Richard Warburton&lt;/a&gt;. This book also contains more info about collectors too,
so maybe some of our questions around how to use these in more complex situation are answered in here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Summary&lt;/strong&gt;&lt;br /&gt;
We really enjoyed the MOOC, and the sessions to get together to discuss it. We particularly liked that the meetups
were a safe place to ask questions and discuss alternative solutions, and that we weren&amp;rsquo;t expected to be genius-level
experts in order to participate fully.&lt;/p&gt;

&lt;p&gt;If/when Oracle re-runs the MOOC, if you didn&amp;rsquo;t get a chance to take part this time I highly recommend signing up.
And if you can find (or run) a local meetup to discuss it, it makes the experience much more fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 2 Summary</title>
      <link>http://trishagee.github.io/post/java_8_mooc_session2/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/java_8_mooc_session2/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;last week&lt;/a&gt;, the &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Sevilla Java User Group&lt;/a&gt;
is working towards completing the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt; on
lambdas and streams. We&amp;rsquo;re running &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223677436/&#34;&gt;three sessions&lt;/a&gt;
to share knowledge between people who are doing the course.&lt;/p&gt;

&lt;p&gt;The second week&amp;rsquo;s lesson was about
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt; - how you can use the
new stream API to transform data. There was also a whole section on
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;, which initially seemed like
rather a lot, but it turns out that &lt;code&gt;Optional&lt;/code&gt; can do rather more than I originally thought.&lt;/p&gt;

&lt;p&gt;In the meetup session, we talked about:&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;&lt;/strong&gt;: we were pretty
comfortable,
I think, with using &lt;code&gt;Optional&lt;/code&gt; to
prevent a &lt;code&gt;NullPointerException&lt;/code&gt;. What we weren&amp;rsquo;t so clear on were the examples of
&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; - if you were getting your &lt;code&gt;Optional&lt;/code&gt; values from a stream, why wouldn&amp;rsquo;t you do the map and the
filter on the stream first? For example, why do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s -&amp;gt; s.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when you could map and filter in the stream to get the first non-empty value? That certainly seems like an
interesting question in relation to streams.&lt;/p&gt;

&lt;p&gt;I can see &lt;code&gt;Optional&lt;/code&gt; being more useful when other APIs fully
support Java 8 and return &lt;code&gt;Optional&lt;/code&gt; values, then you can perform additional operations on return values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That terminal operation&amp;rsquo;s not actually terminal??&lt;/strong&gt;: We ran into this a couple of times in our examples in the
session, one example is the code above (let&amp;rsquo;s copy it down here so we can look at it more closely):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isn&amp;rsquo;t &lt;code&gt;findFirst()&lt;/code&gt; a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps&#34;&gt;terminal operation&lt;/a&gt;? How
can you carry on doing more operations on that?&lt;/p&gt;

&lt;p&gt;The answer is, of course, that the return type of the terminal operation can also lead to further operations.  The
above is actually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Optional&amp;lt;String&amp;gt; result = list.stream()
                              .findFirst();
result.map(String::trim)
      .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
      .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our terminal operation returns an optional, which allows you to do further operations. Another example of this
confusion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .collect(toList())
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;collect()&lt;/code&gt; is a terminal operation, but it returns a list, which also allows &lt;code&gt;forEach()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; results = list.stream()
                           .map(String::toLowerCase)
                           .collect(toList());
results.forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So be aware that just because it&amp;rsquo;s called a terminal operation, doesn&amp;rsquo;t mean you can&amp;rsquo;t perform other operations on
the returned value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel/sequential/parallel&lt;/strong&gt;: there had been a question in the previous week about why you could write code like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .parallel()
    .map(String::trim)
    .sequential()
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .parallel()
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and whether that would let you dictate which sections of the stream were parallel and which were to be processed in
serial.  Lesson two set the lesson straight, declaring &amp;ldquo;the last operator wins&amp;rdquo; - meaning &lt;em&gt;all&lt;/em&gt; of the above code will
be run as a parallel stream. I can&amp;rsquo;t find any documentation for this, I&amp;rsquo;ll edit this post if I locate it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#unordered--&#34;&gt;Unordered&lt;/a&gt;&lt;/strong&gt;: &amp;ldquo;Why
would you ever want your stream to be unordered?&amp;rdquo; - the answer is that &lt;code&gt;unordered()&lt;/code&gt; &lt;a href=&#34;http://stackoverflow.com/a/21350234/653519&#34;&gt;doesn&amp;rsquo;t turn
your sorted collection into one with no order&lt;/a&gt;, it just says that when
this code is executed, the order of elements doesn&amp;rsquo;t matter.  This might make processing faster on a parallel stream,
but as a group we figured it would probably be pointless on a sequential stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficiency optimisations and order of stream operations&lt;/strong&gt;: We had a &lt;em&gt;long&lt;/em&gt; conversation about the order in which you
perform
operations in a stream. The MOOC (in fact, most documentation around Streams) tells us that a) streams are
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;lazy&lt;/a&gt;, and
not evaluated until a terminal operator is encountered and b) this enables optimisation of the operations in the
stream.  That lead to a discussion about the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The filter operation should result in less items to process in the stream. Given that the &lt;code&gt;map()&lt;/code&gt; operation doesn&amp;rsquo;t
change anything that &lt;code&gt;filter()&lt;/code&gt; relies on, will this code be optimised somehow under the covers so that the filter
is actually executed first? Or are optimisations still going to respect the order of operations on a stream?&lt;/p&gt;

&lt;p&gt;Our case is actually a very specific case, because a) the &lt;code&gt;map()&lt;/code&gt; returns the same type as the params passed in (i.e.
it doesn&amp;rsquo;t map a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;) and b) the &lt;code&gt;map()&lt;/code&gt; doesn&amp;rsquo;t change the characteristic the &lt;code&gt;filter()&lt;/code&gt; is
looking at (i.e. length). But generally speaking, you can&amp;rsquo;t expect these conditions to be true - in fact I bet in a
large number of cases they are &lt;em&gt;not&lt;/em&gt; true. So pipeline operations are &lt;a href=&#34;http://stackoverflow.com/a/22056258/653519&#34;&gt;performed in the order in which they are
written&lt;/a&gt;, meaning that our &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; will not be re-ordered into
a more efficient order.&lt;/p&gt;

&lt;p&gt;A good rule of thumb seems to be to do filtering as early in the stream as possible - that way you can potentially
cut down the number of items you process in each step of the stream. Therefore our code would probably be better as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .map(String::toLowerCase)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Flat Map&lt;/strong&gt;: what&amp;hellip;?
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-&#34;&gt;&lt;code&gt;flatMap()&lt;/code&gt;&lt;/a&gt;
is one of those methods that makes total sense once you get the hang of it, and you don&amp;rsquo;t
understand why it was so confusing. But the first time you encounter it, it&amp;rsquo;s confusing - how is &lt;code&gt;flatMap()&lt;/code&gt;
different to &lt;code&gt;map()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;flatMap&lt;/code&gt; is used to squish (for example) a stream of streams into just a simple stream. It&amp;rsquo;s like turning a
2-dimensional array into a single dimension so that you can iterate over all the items without needing nested
for-loops. There&amp;rsquo;s &lt;a href=&#34;http://stackoverflow.com/a/22384132/653519&#34;&gt;an example on StackOverflow&lt;/a&gt;, and some more examples
in answer to &lt;a href=&#34;http://stackoverflow.com/questions/26684562/java-8-map-and-flatmap-methods&#34;&gt;this question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparators&lt;/strong&gt;: We&amp;rsquo;ve probably all written comparators at some point, it&amp;rsquo;s probably one of those examples where we
really did use anonymous inner classes &amp;ldquo;in the olden days&amp;rdquo; and were looking forward to replacing them with lambdas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(new Comparator&amp;lt;String&amp;gt;() {
          @Override
          public int compare(String o1, String o2) {
              return ???;
          }
      })
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sadly, using a lambda still doesn&amp;rsquo;t answer the question &amp;ldquo;do I minus o1 from o2, or o2 from o1?&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted((o1, o2) -&amp;gt; ??? )
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;rsquo;s yet another new method in Java 8 here that can save us, one that is not nearly as well publicised as it
should be. There&amp;rsquo;s a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-&#34;&gt;&lt;code&gt;Comparator.comparing()&lt;/code&gt;&lt;/a&gt;
that you can use to really easily define what to compare on. The JavaDoc and signature looks kinda confusing, but
this is one of those places where method references suddenly make loads of sense:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(comparingInt(String::length))
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Here we&amp;rsquo;re actually using the &lt;code&gt;comparingInt&lt;/code&gt; method as we&amp;rsquo;re going to compare on a primitive value). Personally this
is one of my favourite new features in Java 8.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
Join us next week for the &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223910762/&#34;&gt;last session on Java 8 - Lambdas and Streams&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What to look for in a Code Review</title>
      <link>http://trishagee.github.io/post/code_reviews_1/</link>
      <pubDate>Mon, 27 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/code_reviews_1/</guid>
      <description>&lt;p&gt;I wrote a post for the JetBrains Upsource blog about some of the &lt;a href=&#34;http://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/&#34;&gt;things you should be looking for when you do code
reviews&lt;/a&gt; (and some of the things
you should not be looking at).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to get feedback in the comments for the post of things that you look for in code reviews.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Extraordinary Team Of Developers</title>
      <link>http://trishagee.github.io/presentation/the_extraordinary_team_of_developers/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/the_extraordinary_team_of_developers/</guid>
      <description>

&lt;p&gt;Daniel Bryant and I did a keynote at Devoxx UK about how individuals can add something to a team to make the team
more productive, and overall more awesome.&lt;/p&gt;

&lt;p&gt;&lt;div data-parleys-presentation=&#34;keynote-extraordinary-team-developers&#34; style=&#34;width:100%;height:300px&#34;&gt;&lt;script type = &#34;text/javascript&#34; src=&#34;//parleys.com/js/parleys-share.js&#34;&gt;&lt;/script&gt;&lt;a href=&#34;https://www.parleys.com/play/keynote-extraordinary-team-developers&#34;&gt;Watch on Parleys.com&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;We mention a number of books, so I&amp;rsquo;ve made a list of them here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1594484805&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=GSO6AH7236C37XUL&#34;&gt;Drive: The Surprising Truth About What Motivates
Us&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1594484805&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/1491919019/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1491919019&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=S3PUS65PBYMVIK4U&#34;&gt;Badass: Making Users Awesome&lt;/a&gt;&lt;img 
src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1491919019&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0316346624/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0316346624&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=JSKRNEPP3R3RTZH4&#34;&gt;The Tipping Point: How Little Things Can Make a
Big Difference&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0316346624&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0321356683/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321356683&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=WFSI2OVJKEBPD7YA&#34;&gt;Effective Java (2nd Edition)&lt;/a&gt;&lt;img 
src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0321356683&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0982201222/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0982201222&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=26DOP5D3JV2MWTGW&#34;&gt;The Servant as Leader&lt;/a&gt;&lt;img src=&#34;http://ir-na
.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0982201222&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/1591842697/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1591842697&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=NJ42CVES4P6F7FEA&#34;&gt;The Back of the Napkin: Solving Problems and Selling Ideas with Pictures&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1591842697&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rock stars are dead. Ninjas are banished. There are simply too many trashed hotel rooms, dead bodies and failed
projects. The age of the individual superhero coder is over.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But if we’re still striving for excellence, what’s replaced the rock-star-ninja-hero programmer?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The team. The team that’s greater than the sum of its parts. Like The Avengers, but with less latex.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the same way those without super powers, genius levels of intelligence and pots of money were vital to The
Avengers, every developer, no matter how much or how little experience they have, brings something important to the
team and has the potential to make it better: a nicer place to work, an openness to learning, a focus on clean code or a deeper understanding of the business’ needs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can a collection of good developers become a super-performing business-impact-delivering team? What do you, as
an individual, add to the mix?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Daniel and Trisha will share stories of individuals and teams who have made an impact (both good and bad!) and offer
  suggestions for steps we, as individuals, can take to level up our teams.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 1 Summary</title>
      <link>http://trishagee.github.io/post/java_8_mooc_session1/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/java_8_mooc_session1/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Sevilla Java User Group&lt;/a&gt; is working together towards completing the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt; on
lambdas and streams. As part of this, we&amp;rsquo;re running &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223677436/&#34;&gt;three sessions&lt;/a&gt;
during the course so we can, as a group, ask  questions about the lectures, get help with the homework, and (if we&amp;rsquo;re
feeling very smart!) help people who may be struggling (or might not have watched the videos).&lt;/p&gt;

&lt;p&gt;Last night we had the first session which went really well. We had a small-ish group, about half of whom had
completed the homework and the quiz (for the first lesson) and half had not. We worked through the homework exercises
together, saw how there were multiple solutions for each problem, and explored how to balance conciseness with
longer, more descriptive code.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;First offline session for lesson 1 of the lambdas and streams mooc &lt;a href=&#34;https://twitter.com/hashtag/java8?src=hash&#34;&gt;#java8&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/40gradosAlaSombra?src=hash&#34;&gt;#40gradosAlaSombra&lt;/a&gt; &lt;a href=&#34;http://t.co/hJgPrLl3C5&#34;&gt;pic.twitter.com/hJgPrLl3C5&lt;/a&gt;&lt;/p&gt;&amp;mdash; SVQ JUG (@SVQJUG) &lt;a href=&#34;https://twitter.com/SVQJUG/status/623199430158778368&#34;&gt;July 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;On the whole people thought the videos for the course were very clear and well-explained, although we also went
through how to run the videos at 1.5 speed, as most people wanted to run through them faster! I thought the pace of the
videos was especially good for those who aren&amp;rsquo;t so comfortable with listening in English, and it&amp;rsquo;s easy to add
subtitles and speed it up if you feel comfortable with the material.&lt;/p&gt;

&lt;p&gt;The first lesson covers lambdas, and their use in some of the new Java 8 methods (specifically on collections, but
&lt;em&gt;not&lt;/em&gt; streams).&lt;/p&gt;

&lt;p&gt;The areas we discussed most, the ones that needed more clarity were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html&#34;&gt;Functional Interfaces&lt;/a&gt;:
what does &lt;a href=&#34;https://dzone.com/articles/introduction-functional-1&#34;&gt;Single Abstract Method (SAM)&lt;/a&gt; really mean? Also, we
were interested in the &amp;ldquo;exception&amp;rdquo; of methods declared on &lt;code&gt;Object&lt;/code&gt; as well as an interface (e.g. &lt;code&gt;equals()&lt;/code&gt;), but we
came
to the conclusion that it was easier to simply think of looking for only one method without any form of
implementation at all - methods defined on &lt;code&gt;Object&lt;/code&gt; must have an implementation, since &lt;code&gt;Object&lt;/code&gt; is not an
abstract class or interface.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&#34;&gt;Method References&lt;/a&gt;: we looked at
examples of the three types that aren&amp;rsquo;t constructor references, what they look like in lambda form and how they
differ. Method references are&amp;hellip; not difficult to understand, but do look a bit awkward in the code if you&amp;rsquo;re not
used to them, and can be confusing as all your types, parameters and return values disappear.&lt;/li&gt;
&lt;li&gt;Parallel execution: The first lesson talks a lot about how lambdas are here to make parallelisation and
concurrency easier for developers, so obviously there was a question about how the code in the homework examples would
be executed in a multi-CPU environment. I assumed (although I&amp;rsquo;m waiting for clarification) that methods like
&lt;code&gt;removeIf&lt;/code&gt; are not parallelised, since in the case of Streams you have to explicitly state you want to go parallel.
We also talked a bit about
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#parallel--&#34;&gt;parallel()&lt;/a&gt; and
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#parallelStream--&#34;&gt;parallelStream()&lt;/a&gt;, even
though the lesson didn&amp;rsquo;t cover Streams at all. We wanted to understand a bit more about the pros and cons of going
parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, I also snuck in some demos of &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&amp;rsquo;s&lt;/a&gt; awesomeness, including
its magical support for creating lambdas and turning things into (and from) method references.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/java8mooc/ReplaceWithMethodReferenceMac.gif&#34; alt=&#34;Converting code to Java 8&#34; title=&#34;Converting code to Java 8&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It was a great, collaborative session, with most people getting a chance to demonstrate their code (if they wanted
to!). And at the end we had solutions to the five exercise problems and had discussed all the areas people wanted
more clarity on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interviewed by InfoQ</title>
      <link>http://trishagee.github.io/post/interviewed_for_infoq/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/interviewed_for_infoq/</guid>
      <description>&lt;p&gt;While I was at QCon New York (probably my business conference this year!) I was
interviewed by Ralph Winzinger for InfoQ. It felt like a short interview at the time,
but we covered a lot of ground - Java 8, Java vs other JVM languages, the effectiveness
of the JCP, and the future of Java.&lt;/p&gt;

&lt;p&gt;Video and the transcript are &lt;a href=&#34;http://www.infoq.com/interviews/trisha-gee-java-eco-system&#34;&gt;available on InfoQ&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Path To Evangelism</title>
      <link>http://trishagee.github.io/post/becoming_an_evangelist/</link>
      <pubDate>Thu, 02 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/becoming_an_evangelist/</guid>
      <description>&lt;p&gt;So, I get asked a lot about how I got into technical advocacy /
evangelism&lt;sup&gt;1&lt;/sup&gt;,
so it seems like the most cost-effective way to answer this question is to
write a post about it. Warning: it&amp;rsquo;s a long one!&lt;/p&gt;

&lt;p&gt;Firstly, let me caveat this (I always have caveats, don&amp;rsquo;t I?) with, &amp;ldquo;this is
my personal experience&amp;rdquo;.  There may be other ways to get into this role.&lt;/p&gt;

&lt;p&gt;Any long-time readers of the blog (I love you guys!!) will
know that I started blogging before I did any of this
running-around-the-world-speaking-at-conferences lark.  I started blogging
for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even &amp;ldquo;back then&amp;rdquo; (probably around 2007), it was definitely an advantage to
have something external to the day job to differentiate you from other job
candidates.  I didn&amp;rsquo;t feel comfortable with open source, Stack Overflow
wasn&amp;rsquo;t invented yet (and even if it had been, I&amp;rsquo;m not sure I would have felt
knowledgeable enough to answer questions), and most of what I had learnt in
order to level-up my skills
was via blogs like &lt;a href=&#34;http://www.joelonsoftware.com/&#34;&gt;Joel Spolsky&amp;rsquo;s&lt;/a&gt; and
&lt;a href=&#34;http://randsinrepose.com/&#34;&gt;Rands in Repose&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I really enjoyed writing. One of the (many) things I had wanted to be
&amp;ldquo;when I grew up&amp;rdquo; was a writer or a journalist. I didn&amp;rsquo;t take that path
because I thought if I did I would be Poor Forever.  However, if I started
practising my writing in a blog, I would learn to find my voice, and have
something to show book publishers if I ever did get around to writing a
book, like I had always wanted to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If  you&amp;rsquo;ve ever started a blog, you know the problem is thinking of things to
write about. I generally documented things I&amp;rsquo;d had difficulty getting
working, because a) if I had trouble with the existing documentation, other
people would too and b) I have a memory like a goldfish, so it would be
useful for me if nothing else. But it took me years to really take the blog
seriously.&lt;/p&gt;

&lt;p&gt;At the end of 2008, I joined the
&lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/&#34;&gt;London Java Community&lt;/a&gt;, largely
because I had returned to London from a year working in New York, and a) I needed a new job (during
the height of the crisis, when my recent experience was all financial
markets!) and b) although I had friends in London, I needed to rebuild my
social networks, and I was using meetup.com to do this. I tried lots of other
meetup groups, but like many geeks, I found it hard to connect to people
without the common ground of tech or code to talk about.&lt;/p&gt;

&lt;p&gt;Eventually I ended up working for &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX Exchange&lt;/a&gt;, and
because we were always looking
for keen, bright developers, I started getting much more involved in the LJC
so that I could help us hire people I actually wanted to work with. During
this time, people like &lt;a href=&#34;https://twitter.com/karianna&#34;&gt;Martijn&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/kittylyst&#34;&gt;Ben&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jr0cket&#34;&gt;John&lt;/a&gt;
and, of course, &lt;a href=&#34;https://twitter.com/bcrecworks&#34;&gt;Barry&lt;/a&gt; were
encouraging me, consciously or not, to do a bit of technical presenting. I saw
a lot of different talks there, some from professional evangelists from
vendors, but many from &amp;ldquo;ordinary&amp;rdquo; developers like me. It made me think that
a) I should do this (awesome for your profile/career etc) and b) I &lt;em&gt;could&lt;/em&gt;
do this.&lt;/p&gt;

&lt;p&gt;Of course, I saw very few women presenting (I do remember an
awesome presentation from &lt;a href=&#34;https://twitter.com/fabianenardon&#34;&gt;Fabiane&lt;/a&gt;) and
also very few women members. Many members
assumed I was a recruiter, even before I started trying to chat to people
to, well, recruit them for LMAX. In the first 2 minutes of meeting someone,
if they didn&amp;rsquo;t ask me directly if I was in recruitment or HR, I would always
make it clear that I was a Java developer. It was tedious but something I
just got used to. Interestingly, once it was clear I was a Java person,
people seemed to accept that and just treat me like any other techie.&lt;/p&gt;

&lt;p&gt;I think this is one of the reasons I decided to start doing presentations - I
could a) show my own technical credentials, so I would spend less time having
these tiresome conversations (which, by the way, seems to have worked) and
b) make it more normal to see women techies, hopefully minimising the number
times other women faced the same assumptions (I&amp;rsquo;m not sure if this worked or
not, as I only have my own experiences to look at).&lt;/p&gt;

&lt;p&gt;But these thoughts were only floating around my mind, I didn&amp;rsquo;t actually
&lt;em&gt;do&lt;/em&gt; anything.  During this time, while working at LMAX, it seemed like there were lots of
things I &lt;em&gt;could&lt;/em&gt; blog about, or talk about, but I never really got round to it.
Plus, I wasn&amp;rsquo;t really sure what I was allowed to talk about and what I shouldn&amp;rsquo;t be
talking about. So apparently during these two years I only wrote a total of 6
posts, and I never did a single presentation at the LJC.&lt;/p&gt;

&lt;p&gt;However, I really wanted to do presenting and have time/inspiration for the
blog, so I chose to leave LMAX and join
&lt;a href=&#34;http://www.thoughtworks.com/&#34;&gt;ThoughtWorks&lt;/a&gt; - they were looking for
consultants and I knew this was a company that valued blogging and
presenting, and I&amp;rsquo;d had some exposure to their guys through the LJC and,
years before, I&amp;rsquo;d seen them speaking at
&lt;a href=&#34;http://mechanitis.blogspot.com.es/2007/03/qcon-london.html&#34;&gt;QCon London&lt;/a&gt;,
which had actually been my initial inspiration for blogging.
I told LMAX that was why I was leaving, and off I went.&lt;/p&gt;

&lt;p&gt;So it&amp;rsquo;s 2011, and I&amp;rsquo;ve joined ThoughtWorks. I revived the blog while I was
unassigned to a project, I invested that time in porting the blog to a
more sensible platform, and trying to write a blog a day. Again, I picked
topics I could comfortably talk about - I spoke about my experiences as a
&lt;a href=&#34;/post/my_experiences_with_android_development/&#34;&gt;beginner trying Android for the first
time&lt;/a&gt; (sometimes people will be arsey
with beginners, but in reality many real human beings can&amp;rsquo;t tell you you&amp;rsquo;re
wrong when you&amp;rsquo;re just talking about your own experiences), and despite my
original intent to blog with zero gender identity (I was genuinely afraid
that if I wrote about tech subjects and I was wrong, or very junior, I would
give women programmers a bad name) I decided to blog about &amp;ldquo;the women in
technology subject&amp;rdquo;. Again, here I went for my personal opinion/experiences,
for which only mean people can criticise you (mean people are easier to
ignore than correct people :) )&lt;/p&gt;

&lt;p&gt;I was also fortunate enough to meet &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt;
in person while he was over
in London. We were talking over drinks (this is London, after all) about the
women in technology thing (ThoughtWorks are really big on this subject, and
determined to do something positive in this area), and I was complaining about
the lack of women at a particular conference. He asked me if I had submitted
a talk for the conference.  Me?? Of course not! I&amp;rsquo;m not ready for that! I&amp;rsquo;ve
got nothing to talk about. I haven&amp;rsquo;t been given permission to do this, or
guidance on how to do it. I haven&amp;rsquo;t even presented at the user group yet. But
it did make me think - I said I wanted to present, so what was stopping me?
Did I need someone to guide me through it, to assign it to me as a task? It
was going to be up to me to make this happen. And if Martin Fowler, who
had just met me 5 minutes beforehand, thinks I&amp;rsquo;m ready to do this, then who&amp;rsquo;s
to tell me I&amp;rsquo;m not? What&amp;rsquo;s the worst that could happen?&lt;/p&gt;

&lt;p&gt;Of course life then got in the way - I was assigned to a couple of projects,
so the blogging stopped. I was interested in attending or
speaking at conferences, but wasn&amp;rsquo;t going to have anything ThoughtWorksy to
talk about for quite a while. And now, because I was commuting to my assigned
project, I had very little time even for the LJC.&lt;/p&gt;

&lt;p&gt;At this point, LMAX called
to let me know that the talk they&amp;rsquo;d done at QCon San Francisco,
&lt;a href=&#34;http://www.infoq.com/presentations/LMAX&#34;&gt;&amp;ldquo;How to Do 100K TPS at Less than 1ms Latency&amp;rdquo;&lt;/a&gt; had been
enormously popular, and they were open sourcing
&lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;The Disruptor&lt;/a&gt; and wanted to do
some evangelism around this - did I want to come back and help a) do
evangelism and b) co-ordinate the company&amp;rsquo;s evangelism?  Yes, yes I did. So,
after just 3 months, I quit TW and went back to LMAX&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Back at LMAX, I started to take evangelism more seriously.&lt;/p&gt;

&lt;p&gt;I tried to blog every week - I set aside Sundays for blogging (at the time
I was, fortunately for my particular choices, single and not overburdened
with a social life outside of the LJC). I wasn&amp;rsquo;t going to sit all alone in my
tiny flat, so I&amp;rsquo;d go to the pub with my shiny new Macbook Air, bought
specially for blogging (thanks ThoughtWorks, you spoiled me - I needed a mac
after I&amp;rsquo;d invested 3 months getting to grips with the one you gave me) and
write &lt;em&gt;something&lt;/em&gt;. It wasn&amp;rsquo;t always amazing, but I&amp;rsquo;d do something. During the
week, when ideas came to me, I&amp;rsquo;d make a note of the title in the blogging
tool so that when Sunday came I&amp;rsquo;d pick one and go with it.  Early on it was
fairly easy - we&amp;rsquo;d released a white paper on the Disruptor, but I found it
hard to understand what it really meant, so I spent Sundays writing shorter
articles breaking down how it worked and how to use it. I needed a LOT of
help from &lt;a href=&#34;http://www.real-logic.co.uk/about.html&#34;&gt;Martin Thompson&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/mikeb2701&#34;&gt;Mike
Barker&lt;/a&gt; to understand it, but they were patient
with me (plus I think they were happy that &lt;em&gt;someone&lt;/em&gt; was writing this and it
didn&amp;rsquo;t
have to be them). They took the heavier, more complicated subjects and I
pitched my stuff at developers like myself. When I ran out of Disruptor
stuff, I moved on to the topics I had in the backlog - I generally had more
ideas for blogs than time to blog, so I ended up with quite a long list to
pick from. The key is to make a note of it at the time you think of it, and
not try and think of a topic when you sit down with time to blog.&lt;/p&gt;

&lt;p&gt;I coordinated our events and publicised them on the new LMAX blog I&amp;rsquo;d created.
&lt;a href=&#34;https://twitter.com/davefarley77&#34;&gt;Dave Farley&lt;/a&gt; was often presenting on
something Continuous Delivery related since
&lt;a href=&#34;http://amzn.to/1NyUQ53&#34;&gt;his book&lt;/a&gt; had been released, and Martin was talking
about hardcore concurrency stuff.&lt;/p&gt;

&lt;p&gt;Mike and I got even more involved in the LJC, not just to recruit people.  We
got involved in the JCP and OpenJDK - since LMAX was doing cutting edge
technology stuff with Java, we wanted to see where the language was going
and influence it too if possible.&lt;/p&gt;

&lt;p&gt;Martijn must&amp;rsquo;ve got fed up my lack of drive in the presenting area, as he
pretty much forced me to do my first presentation.  In a
nice way! But he told me I was ready, he checked my content before I did it,
and I did a short talk on the JCP.&lt;/p&gt;

&lt;p&gt;At this point, my plan was to spend this first year of presenting doing short
talks at the JUG, maybe work my way up to a longer talk by the end of the year, or maybe
the following year, then the year after that to submit to conferences.&lt;/p&gt;

&lt;p&gt;Well, with amazing mentors like mine, that didn&amp;rsquo;t happen. Martin Thompson was
due to
give a talk at JavaOne at the end of that year (still 2011), and I was lucky
enough to get a ticket at the last minute (we won the &lt;a href=&#34;https://www.java.net/dukeschoice/2011&#34;&gt;Duke&amp;rsquo;s Choice Award
for Innovative Programming Framework&lt;/a&gt;,
and LMAX was awesome enough to let me have the ticket to the
conference to receive the award, since the evangelism efforts and blogging
had had a direct influence on us winning this award). Martin
asked if I wanted to co-present with him. Of course this was terrifying! I
hadn&amp;rsquo;t even done a full length talk at the LJC, I had barely even been to a
conference, let alone presented at the largest Java conference In The World!
So I said yes. These opportunities do not come up every week. It&amp;rsquo;s a talk
Martin had given various times before, he would be there to pick up the slack
if I freaked out, and I knew this material, I&amp;rsquo;d been blogging about it and
answering questions for the last 6 months.&lt;/p&gt;

&lt;p&gt;It really was as terrifying as I thought.  But.  It went well. I answered
difficult questions. We got great feedback.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/post/javaone_2011_roundup/&#34;&gt;JavaOne 2011&lt;/a&gt;
was an important milestone in my evangelism career.  Not only
did I get to put this presentation on my CV, I got to meet a lot of people in
this network: Martin introduced me to a lot of high performance specialists;
Martijn and Ben introduced me to people involved in the JCP, to other Java
User Group leaders, and we somehow got in to the O&amp;rsquo;Reilly party -
I finally got to meet a book publisher and get one step closer to my dream
of writing a book. I also met the ladies behind &lt;a href=&#34;http://jduchess.org/&#34;&gt;Duchess&lt;/a&gt;,
and they introduced me to
&lt;a href=&#34;https://twitter.com/Stephan007&#34;&gt;Stephan&lt;/a&gt; who runs Devoxx. This turned out
to be an important step in turning an idea I had for a panel into a Devoxx
reality.&lt;/p&gt;

&lt;p&gt;This is October.  By the end of the year I had also presented at &lt;a href=&#34;/presentation/video_of_our_jax_london_session/&#34;&gt;JAX London
with Mike&lt;/a&gt;, and at
&lt;a href=&#34;/post/why_we_shouldnt_target_women/&#34;&gt;Devoxx Belgium on a panel&lt;/a&gt;,
largely thanks to the contacts I
had made and the prestige of having a JavaOne talk under my belt.  So I went
from basically zero at the start of that year (my blog had been dormant for
years and I had no experience presenting) to having a blog with thousands of
hits a month and being an &amp;ldquo;international conference speaker&amp;rdquo;. In many ways I
got lucky, because the Disruptor was a really interesting, technical topic
that is in an area developers feel they should understand (high performance).
But I believe it was more a) determination to make this work, even if it
meant using my own time to write blogs and prepare presentations and b)
fantastic mentors who pushed me to do it and opened up their networks to me,
that facilitated this rapid rise.&lt;/p&gt;

&lt;p&gt;Honestly, after that things were a lot easier - I had the experience
presenting at conferences, I had Martin and Martijn suggesting conferences to
me (and introducing me to the right people where appropriate), which got me
into the QCon/GOTO loop and into OSCON. With videos of my presentations
availble, combined with the reach of my blog, I also had people approaching
me to do other events, like user groups in the cities I was visiting, and
conferences I had never heard of.  I think it helped that I&amp;rsquo;m a woman,
because conferences are always actively looking to increase their diversity
(whatever it might seem like at times!), but I think that anyone could follow
these sorts of steps with a similar outcome.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to talk much about my career after that, because really that&amp;rsquo;s
the tipping point - after that it was more of the same, really. I will say
that I left LMAX because the pressure to be a full time developer &lt;em&gt;and&lt;/em&gt; do
advocacy is hard, especially when you&amp;rsquo;re no longer single and you don&amp;rsquo;t have
the spare time you used to have. I joined
&lt;a href=&#34;https://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; because they were well known for
understanding the technical community, and because they were looking for an
evangelist who would continue to be an engineer (although not for 40 hours a
week every week). I think they might have hired me without the previous
experience, but the blogging and presenting experience was a big selling
point for the guy who became my boss.  I eventually left
them for &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; because you learn, over
time, what your sweet spots are as an advocate/educator, and what your
interests are. After two years of MongoDB, I knew I really wanted to focus
on Java and the JVM, and JetBrains is a much better fit for that. I&amp;rsquo;m pretty
certain I would &lt;em&gt;not&lt;/em&gt; have got this job without a) having the
conference-presenting experience and therefore b) being known to the team
already through the conference circuit.&lt;/p&gt;

&lt;p&gt;Well. That was a massive post. That&amp;rsquo;s why I&amp;rsquo;ve been putting off
writing this for ages. That&amp;rsquo;s just my own story, I have another post in my
head about the challenges that face you on trying to sell the value of
evangelism/advocacy to your organisation (and maybe some suggestions). But
that&amp;rsquo;s for another day.&lt;/p&gt;

&lt;p&gt;In closing, I shall try to leave you with take-away points that I hope will
be helpful if you either want to become a technical advocate, or are interested
in just some aspects, like writing or presenting:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Join a user group.  I cannot, &lt;em&gt;cannot&lt;/em&gt; stress how important the LJC was to
my career. If you do nothing else, this is the one thing that can help you.
You will meet people who will inspire you or give you the kick up the
backside you need. Try to remember that many of these people, like me, were
developers like you before they became bloggers/authors/speakers. If they
can, you can. These people also have networks, and whether you like it or
not, it really is not what you know but who you know (but don&amp;rsquo;t let that put
you off - meeting the right people can be easier than becoming some sort of
super-expert!)&lt;/li&gt;
&lt;li&gt;Present at the user group. Preferably get them to video it - you can use
this in submissions to conferences, if it&amp;rsquo;s not a blind CFP they will like to
see examples of your style. Having an example, even one that you think isn&amp;rsquo;t
awesome, is much, much better than having nothing at all. (Also, and this is
not a blog post about becoming a better speaker, but do watch your own
videos - it&amp;rsquo;s &lt;em&gt;insanely&lt;/em&gt; painful the first few times, but it gets easier and
will help you to improve).&lt;/li&gt;
&lt;li&gt;Be prepared to commit your own time to this. I blogged and prepared talks
at weekends, even for companies that valued evangelism. I gave up evenings
to attend the user group.  This will be
especially important in the early days when you probably have a day job too.
This investment should pay off, either your company will learn to see the
value of it and give you more time (having developers attend and speak at the
LJC was enormously successful for recruitment for LMAX), or you will get a
job better suited to what you want to do.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t have to have something awesome to talk about. I got lucky with
the Disruptor, true. But our most in-demand topics at the Sevilla Java User
Group are &amp;ldquo;Introduction to&amp;hellip;&amp;rdquo; topics, especially for things that are
no-longer cutting edge - not all developers were early adopters, and now they
need an overview of &amp;ldquo;why NoSQL&amp;rdquo; or &amp;ldquo;what&amp;rsquo;s Docker&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t have to be awesome. Your blog doesn&amp;rsquo;t have to be perfect English
(especially if you&amp;rsquo;re not a native). It just needs to clearly describe the
thing you&amp;rsquo;re trying to explain. You don&amp;rsquo;t
have to be &lt;a href=&#34;http://www.infoq.com/author/Damian-Conway&#34;&gt;Damian Conway&lt;/a&gt;(one of
my favourite presenters) when you speak - in my experience, a presenter
can get away with either &lt;em&gt;only&lt;/em&gt; great content or &lt;em&gt;only&lt;/em&gt; great delivery, you
actually don&amp;rsquo;t need both. I&amp;rsquo;ve been to conferences where presenters haven&amp;rsquo;t
really had either - you have to start somewhere, and audiences are
surprisingly forgiving (especially at user groups).&lt;/li&gt;
&lt;li&gt;Find mentors. Listen to them. You might not even meet them, you can watch
what they do. But I&amp;rsquo;d encourage you to find real human beings who are a step
or two closer to where you want to be. Talk to them, let them know what you
want. And let them bully you into doing scary things.&lt;/li&gt;
&lt;li&gt;Be yourself. Figure out your strengths and interests, and play to them. I
was scared of being a woman developer on show, via the blog or via
conferences, but it turns out to be an advantage. I was afraid that because
I&amp;rsquo;m not Martin Thompson I can&amp;rsquo;t possibly talk about difficult technical
subjects. But I don&amp;rsquo;t have to be him, I can be me - I can explain things to
the level that I need to understand them, so other developers like me can
catch up with me. We don&amp;rsquo;t need to all be genius-level.&lt;/li&gt;
&lt;li&gt;Do things that scare you. The terrifying things are the things that got me
the furthest.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this helps someone.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;Evangelism / Technical Advocacy - I use these terms fairly
interchangeably. Evangelism was the common name some years back, but many
are uncomfortable with the religious overtones, so instead prefer Advocacy.&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt; This is why I often talk about being at ThoughtWorks for a
minute and a half - I really loved a lot of things about the company, but what
I really wanted to do was offered to me in a company I already knew, where I
could get going straight away without any ramp up&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Level Up Your Automated Tests</title>
      <link>http://trishagee.github.io/presentation/level_up_your_automated_tests/</link>
      <pubDate>Fri, 26 Jun 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/presentation/level_up_your_automated_tests/</guid>
      <description>

&lt;p&gt;This presentation is about how to change a team&amp;rsquo;s attitude towards writing automated tests.  The
talk covers the same case study as
&lt;a href=&#34;/presentation/groovy_vs_java&#34;&gt;Groovy vs Java for Testing&lt;/a&gt;, adopting
Spock in MongoDB, but this is a more process/agile/people perspective, not a
technical look at the merits of one language over another.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/3fEnq6JuwuI&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/zUhtb6nqz7IgdO&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Other Videos&lt;/h3&gt;

&lt;p&gt;First version: &lt;a href=&#34;https://www.youtube.com/watch?v=D-xra_X9Nwg&#34;&gt;GOTO Chicago&lt;/a&gt; ( &lt;a href=&#34;https://www.slideshare.net/slideshow/embed_code/key/dJvHtktHbiDABW&#34;&gt;slides&lt;/a&gt;)&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Questions&lt;/h2&gt;

&lt;p&gt;I sadly do not have a lot of time for questions during the presentation, but
thanks to the wonders of modern technology, I have a list of unanswered
questions which I will attempt to address here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Is testing to find out your system works? Or is it so you know when your
system is broken?&lt;/strong&gt;&lt;br /&gt;
Excellent question. I would expect that if you have a system that&amp;rsquo;s in
production (which is probably the large majority of the projects we work on),
we can assume the system is working, for some definition of working.
Automated testing is particularly good at catching when your system stops
doing the things you thought it was doing when you wrote the tests (which
may, or may not, mean the system is genuinely &amp;ldquo;broken&amp;rdquo;). Regression testing is
to find out when your system is no longer doing what you expect, and automated tests are
really good for this.&lt;/p&gt;

&lt;p&gt;But testing can also make sure you implement code that behaves the way you
expect, especially if you write the tests first.  Automated tests can be used
to determine that your code is complete, according to some pre-agreed
specification (in this case, the automated tests you wrote up front).&lt;/p&gt;

&lt;p&gt;So I guess what I&amp;rsquo;m trying to say is, when you first write the tests you
have tests that, when they pass, proves the system works (&lt;em&gt;assuming&lt;/em&gt; your
tests are testing the right things and/or not giving you false positives).
Subsequent passes show that you haven&amp;rsquo;t broken anything.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At what level do &amp;ldquo;tests documenting code&amp;rdquo; actually become useful? And who
is/should the documentation be targeted to?&lt;/strong&gt;&lt;br /&gt;
In the presentation, my case study is the MongoDB Java Driver.  Our users
were Java programmers, who were going to be coding using our driver.  So in
this example, it makes a lot of sense to document the code using a language
that our users understood.  We started with Java, and ended up using Groovy
because it was also understandable for our users and a bit more succinct.&lt;/p&gt;

&lt;p&gt;On a previous project we had different types of tests.  The unit and system
tests documented what the expected behaviour was at the class or module
level, and was aimed at developers in the team.  The acceptance tests were
written in Java, but in a &lt;a href=&#34;https://www.symphonious.net/2015/06/05/testinglmax-abstraction-by-dsl/&#34;&gt;friendly DSL-style way&lt;/a&gt;. These were usually
written by a triad of tester, business analyst and developer, and documented to all
these guys and girls what the top-level behaviour should be. Our audience here
was fairly technical though, so there was no need to go to the extent of trying
to write English-language-style tests, they were readable enough for a
reasonably techy (but non-programmer) audience. These were not designed to be
read by &amp;ldquo;the business&amp;rdquo; - us developers might use
them to answer questions about the behaviour of the system, but they didn&amp;rsquo;t
document it in a way that just anyone could understand.&lt;/p&gt;

&lt;p&gt;These are two different approaches for two different-sized
team/organisations, with different users. So I guess in summary the answer is
&amp;ldquo;it depends&amp;rdquo;.  But at the very least, developers on your own team should be
able to read your tests and understand what the expected behaviour of the
code is.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How do you become a team champion? I.e. get authority and acceptance that
people listen to you?&lt;/strong&gt;&lt;br /&gt;
In my case, it was just by accident - I happened to care about the tests
being green and also being useful, so I moaned at people until it happened. But
it&amp;rsquo;s not just about nagging, you get more buy-in if other people see you
doing the right things the right way, and it&amp;rsquo;s not too painful for them to
follow your example.&lt;/p&gt;

&lt;p&gt;There are going to be things that you care about that you&amp;rsquo;ll never get other
people to care about, and this will be different from team to team. You have
two choices here - if you care that much, and it bothers you that much, you
have to do it yourself (often on your own time, especially if your boss
doesn&amp;rsquo;t buy into it). Or, you have to let it go - when it comes to quality,
there are so many things you could care about that it might be more
beneficial to drop one cause and pick another that you can get people to care
about.&lt;/p&gt;

&lt;p&gt;For example, I wanted us to use &lt;code&gt;assertThat&lt;/code&gt; instead of &lt;code&gt;assertFalse&lt;/code&gt; (or
true, or equals, or whatever).  I tried to demo the advantages (as I saw
them) of my approach to the team, and tried to push this in code reviews, but
in the end the other developers weren&amp;rsquo;t sold on the benefits, and
from my point of view the benefits weren&amp;rsquo;t big enough to force the issue.
Those of us who cared, used &lt;code&gt;assertThat&lt;/code&gt;. For the rest, I was just happy
people were writing and maintaining tests.&lt;/p&gt;

&lt;p&gt;So, pick your battles. You&amp;rsquo;ll be surprised at how many people do get on board
with things.  I thought implementing checkstyle and setting draconian
formatting standards was going to be a tough battle, but in the end people
were just happy to have &lt;em&gt;any&lt;/em&gt; standards, especially when they were enforced
by the build.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you report test, style, coverage, etc failures separately? Why?&lt;/strong&gt;&lt;br /&gt;
We didn&amp;rsquo;t fail on coverage.  Enforcing a coverage percentage is a really good
way to end up with crappy tests, like for getters/setters and constructors
(by the way, if there&amp;rsquo;s enough logic in your constructor that it &lt;em&gt;needs&lt;/em&gt; a
test, You&amp;rsquo;re Doing It Wrong).&lt;/p&gt;

&lt;p&gt;Generally different types of failures are found by different tools, so for
this reason alone they will be reported separately - for example, checkstyle
will fail the build if it doesn&amp;rsquo;t conform to our style standards, codenarc
fails it for Groovy style failures, and Gradle will run the tests in a
different task to these two.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s actually important, though, is time-to-failure.  For checkstyle, for
example, it will fail on something silly like curly braces in the wrong place.
You want this to fail within seconds, so you can fix the silly mistake
quickly. Ideally you&amp;rsquo;d have IntelliJ (perhaps) run your checks before it even
makes it into your CI environment. Compiler errors should, of course, fail
things before you run a test, short-running tests should fail before
long-running tests.  Basically, the easier it is to fix the problem, the
sooner you want to know, I guess.&lt;/p&gt;

&lt;p&gt;Our build was relatively small and not too complex, so actually we ran all
our types of tests (integration and unit, both Groovy and Java) in a single
task, because this turned out to be much quicker in Gradle (in our case) than
splitting things up into a simple pipeline.&lt;/p&gt;

&lt;p&gt;You might have a reason to report stuff separately, but for me it&amp;rsquo;s much more
important to understand how fast I need to be aware of a particular type of
failure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sometimes I find myself modifying code design and architecture to enable
testing. How can I avoid damaging design?&lt;/strong&gt;&lt;br /&gt;
This is a great question, and a common one too. The short answer is: &lt;em&gt;in
general&lt;/em&gt; writing code that&amp;rsquo;s easier to test leads to a cleaner design anyway
(for example, dependency injection at that appropriate places). If you find
you need to rip your design apart to test it, there&amp;rsquo;s a smell there somewhere
 - either your design isn&amp;rsquo;t following SOLID principals, or you&amp;rsquo;re trying to
test the wrong things.&lt;/p&gt;

&lt;p&gt;Of course, the common example here is testing private methods - how do you test
these without exposing secrets&lt;sup&gt;1&lt;/sup&gt;? I think for me, if it&amp;rsquo;s important
enough
 to be tested
it&amp;rsquo;s important enough to be exposed in some way - it might belong in some
sort of util or helper (right now I&amp;rsquo;m not going to go into whether utils or
helpers are, in themselves a smell), in a smaller class that only
provides this sort of functionality, or simply a protected method. Or, if
you&amp;rsquo;re testing with Groovy, you can access private methods anyway so this
becomes a moot point (i.e. your testing framework may be limiting you).&lt;/p&gt;

&lt;p&gt;In another story from LMAX, we found we had created methods just for testing. It seemed a
bit wrong to have these methods only available for testing, but later on down
the line, we needed access to many of these methods In Real Life (well, from
our Admin app), so our testing had &amp;ldquo;found&amp;rdquo; a missing feature. When we came
to implement it, it was pretty easy as we&amp;rsquo;d already done most of it for
testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My co-workers often point to a lack of end-to-end testing as the reason why
 a lot of bugs get out to production even though they don&amp;rsquo;t have much unit
 tests nor integration tests. What, in your experience, is a good balance
 between unit tests, integration tests and end-to-end testing?&lt;/strong&gt;&lt;br /&gt;
Hmm, sounds to me like &amp;ldquo;lack of tests&amp;rdquo; is your problem!&lt;/p&gt;

&lt;p&gt;This is a big (and contentious!) topic.  &lt;a href=&#34;http://martinfowler.com/bliki/TestPyramid.html&#34;&gt;Martin Fowler has written about it&lt;/a&gt;, Google wrote something I
completely disagree with (so I&amp;rsquo;m not even going to link to it,
but you&amp;rsquo;ll find references in the links in this paragraph), and my
ex-colleague Adrian &lt;a href=&#34;https://www.symphonious.net/2015/04/30/making-end-to-end-tests-work/&#34;&gt;talks about what we, at LMAX, meant by end-to-end tests&lt;/a&gt;. I
hope that&amp;rsquo;s enough to get you started, there&amp;rsquo;s plenty more out there too.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How did you go about getting buy in from the team to use Spock?&lt;/strong&gt;&lt;br /&gt;
I cover this in
&lt;a href=&#34;/presentation/groovy_vs_java&#34;&gt;my other presentation on the topic&lt;/a&gt; - the
short version is, I did a week-long spike to investigate whether Spock would
make testing easier for us, showed the pros and cons to the whole team, and
then led by example writing tests that (I thought) were more readable than
what we had before and, probably most importantly, much easier to write than
what we were previously doing. I basically got buy-in by showing how much
easier it was for us to use the tool than even JUnit (which we were all
familiar with). It did help that we were already using Gradle, so we already
had a development dependency on Groovy. It also helped that adding Spock made
no changes to the dependencies of the final Jar, which was very important.&lt;/p&gt;

&lt;p&gt;Over time, further buy-in (certainly from management) came when the new tests
started catching more errors - usually regressions in our code or regressions in
the server&amp;rsquo;s overnight builds. I don&amp;rsquo;t think it was Spock specifically
that caught more problems - I think it was writing more tests, and
better tests, that caught the issues.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can we do data driven style tests in frameworks like junit or cucumber?&lt;/strong&gt;&lt;br /&gt;
I don&amp;rsquo;t think you can in JUnit (although maybe there&amp;rsquo;s something out there). I
believe someone told me you can do it in
&lt;a href=&#34;http://testng.org/doc/index.html&#34;&gt;TestNG&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Are there drawbacks to having tests that only run in ci? I.e I have Java 8
on my machine, but the test requires Java 7&lt;/strong&gt;&lt;br /&gt;
Yes, definitely - the drawback is Time.  You have to commit your code to a
branch that is being checked by CI and wait for CI to finish before you find
the error.&lt;/p&gt;

&lt;p&gt;In practice, we found very little that was different between Java
7 and 8, for example, but this is a valid concern (otherwise you wouldn&amp;rsquo;t be
testing a complex matrix of dependencies at all).&lt;/p&gt;

&lt;p&gt;In our case, our Java 6 driver used Netty for async capabilities, as the
stuff we were using from Java 7 wasn&amp;rsquo;t available. This was clearly a
different code path that wasn&amp;rsquo;t tested by us locally as we were all running
Java 8. Probably more importantly for us is we were testing against at least
3 different major versions of the server, which all supported different
features (and had different APIs).  I would often find I&amp;rsquo;d broken the tests
for version 2.2 as I&amp;rsquo;d only been running it on 2.6, and had forgotten to
either turn off the new tests for the old server versions, or didn&amp;rsquo;t realise
the new functionality wouldn&amp;rsquo;t work there.&lt;/p&gt;

&lt;p&gt;So the main drawback is time - it takes a lot longer to find out about these
errors.  There are a few ways to get around this:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Commit often!! And to a branch that&amp;rsquo;s actually going to be run by CI&lt;/li&gt;
&lt;li&gt;Make your build as fast as possible, so you get failures fast (you
should be doing this anyway)&lt;/li&gt;
&lt;li&gt;You could set up virtual machines locally or somewhere cloudy to run these
configurations before committing, but that sounds kinda painful (and to my
mind defeats a lot of the point of CI).&lt;/li&gt;
&lt;li&gt;I set up Travis on my fork of the project, so I could have that running a
different version of Java and MongoDB when I committed to my own fork - I&amp;rsquo;d
be able to see some errors before they made it into the &amp;ldquo;real&amp;rdquo; project.&lt;/li&gt;
&lt;li&gt;If you can, you probably want these specific tests run first so they can
fail fast. E.g. if you&amp;rsquo;re running a Java 6 &amp;amp; MongoDB 2.2 configuration on
CI, run those tests that only work in that environment first.  Would
probably need some Gradle magic, and/or might need you to separate these
into a different set of folders.  The advantage of this approach though is
if you set up some aliases on your local machine you could sanity check
&lt;em&gt;just&lt;/em&gt; these special cases before checking in. For example, I had aliases to
start MongoDB versions/configurations from a single command, and to set
JAVA_HOME to whichever version I wanted.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Do you have any tips for unit tests that pass on dev machines but not on
Jenkins because it&amp;rsquo;s not as powerful as our own machines? E.g. Synchronous
calls timeout on the Jenkins builds intermittently.&lt;/strong&gt;&lt;br /&gt;
Erk! Yes, not uncommon. No, not really. We had our timeouts set longer than I
would have liked to prevent these sorts of errors, and they still
intermittently failed. You can also set some sort of retry on the test, and
get your build system to re-run those that fail to see if they pass later.
It&amp;rsquo;s kinda nasty though.&lt;/p&gt;

&lt;p&gt;At LMAX they were able to take testing seriously enough to &lt;a href=&#34;https://www.symphonious.net/2015/06/24/end-to-end-tests-lmax-update/&#34;&gt;really invest in
their testing
architecture&lt;/a&gt;, and, of course, this is The Correct Answer. Just
often very difficult to sell.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you ask where are tests and dev asks if code is correct? And you say yes.
Then dev asks why you&amp;rsquo;re delaying shipping value, how do you manage that?&lt;/strong&gt;&lt;br /&gt;
These are my opinions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Your code is &lt;em&gt;not&lt;/em&gt; complete without tests that show me it&amp;rsquo;s complete.&lt;/li&gt;
&lt;li&gt;Your code might do what you think it&amp;rsquo;s supposed to do right now, but given
Shared Code Ownership, anyone can come in and change it at any time, you
want tests in place to make sure they don&amp;rsquo;t change it to break what you
thought it did&lt;/li&gt;
&lt;li&gt;The tests are not so much to show it works right now, the tests are to
show it continues to work in future&lt;/li&gt;
&lt;li&gt;Having automated tests &lt;em&gt;will&lt;/em&gt; speed you up in future. You can refactor
more safely, you can fix bugs and know almost immediately if you broke
something, you can read from the test what the author of the code thought
the code should do, getting you up to speed faster.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t know you&amp;rsquo;re shipping value without tests - you&amp;rsquo;re only shipping
code (to be honest, you never know if you&amp;rsquo;re shipping value until much later
on when you also analyse if people are even using the feature).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Testing almost never slows you down in the long run. Show me the bits of your
code base which are poorly tested, and I bet I can show you the bits of your
code base that frequently have bugs (either because the code is not really
doing what the author thinks, or because subsequent changes break things in
subtle ways).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you say code is hard to understand and dev asks if you seriously don&amp;rsquo;t
understand the code, how do you explain you mean easy to understand without
thinking rather than &amp;lsquo;can I compile this in my head&amp;rsquo;?&lt;/strong&gt;&lt;br /&gt;
I have zero problem with saying &amp;ldquo;I&amp;rsquo;m too stupid to understand this code, and
I expect you&amp;rsquo;re much smarter than me for writing it. Can you please write it
in a way so that a less smart person like myself won&amp;rsquo;t trample all over your
beautiful code at a later date through lack of understanding?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;By definition, code should be easy to understand by someone who&amp;rsquo;s not the
author. If someone who is not the author says the code is hard to understand,
then the code is hard to understand. This is not negotiable. This is what
code reviews or pair programming should address.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is effective nagging like? (Whether or not you get what you want)&lt;/strong&gt;&lt;br /&gt;
Mmm, good question. Off the top of my head:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t make the people who are the target of the nagging feel stupid -
they&amp;rsquo;ll get defensive. If necessary, take the burden of &amp;ldquo;stupidity&amp;rdquo; on
yourself. E.g. &amp;ldquo;I&amp;rsquo;m just not smart enough to be able to tell if this test is
failing because the test is bad or because the code is bad. Can you walk me
through it and help me fix it?&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Do &lt;em&gt;at least&lt;/em&gt; your fair share of the work, if not more. When I wanted to
get the code to a state where we could fail style errors, I fixed 99% of the
problems, and delegated the handful of remaining ones that I just didn&amp;rsquo;t
have the context to fix. In the face of three errors to fix each, the team
could hardly say &amp;ldquo;no&amp;rdquo; after I&amp;rsquo;d fixed over 6000.&lt;/li&gt;
&lt;li&gt;Explain &lt;em&gt;why&lt;/em&gt; things need to be done. Developers are adults and don&amp;rsquo;t want
to be treated like children. Give them a good reason and they&amp;rsquo;ll follow the
rules. The few times I didn&amp;rsquo;t have good reasons, I could not get the team
to do what I wanted.&lt;/li&gt;
&lt;li&gt;Find carrots and sticks that work.  At LMAX, a short e-mail at the start
of the day summarising the errors that had happened overnight, who seemed to
be responsible, and whether they looked like real errors or
intermittencies, was enough to get people to fix their problems&lt;sup&gt;2&lt;/sup&gt; -
they didn&amp;rsquo;t like to look bad, but they also had enough information to get right
on it, they didn&amp;rsquo;t have to wade through all the build info.  On occasion,
when people were ignoring this, I&amp;rsquo;d turn up to work with bags of chocolate
that I&amp;rsquo;d bought with my own money, offering chocolate bars to anyone who
fixed up the tests. I was random with my carrot offerings so people didn&amp;rsquo;t
game the system.&lt;/li&gt;
&lt;li&gt;Give up if it&amp;rsquo;s not working. If you&amp;rsquo;ve tried to phrase the &amp;ldquo;why&amp;rdquo; in a
number of ways, if you&amp;rsquo;ve tried to show examples of the benefits, if you&amp;rsquo;ve
tried to work the results you want into a process, but it&amp;rsquo;s still not
getting done, just accept the fact that this isn&amp;rsquo;t working for the team.
Move on to something else, or find a new angle.
&lt;br/&gt;&lt;br/&gt;
&lt;sup&gt;1&lt;/sup&gt; I had a colleague at LMAX who was  working with a hypothesis that
All Private Methods Were Evil - they were clearly only sharable within
single class, so provided no reuse elsewhere, and if you have the same bit
of code being called multiple times from within the same class (but it&amp;rsquo;s
not valuable elsewhere) then maybe your design is wrong. I&amp;rsquo;m still
pondering this specific hypothesis 4 years on, and I admit I see its pros
and cons.&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt; This worked so well that this process was automated by
one of the guys and turned into a tool called AutoTrish, which as far as I
know is still used at LMAX.  Dave Farley talks about it in some of his
&lt;a href=&#34;https://www.parleys.com/tutorial/continuous-delivery-part-2-2&#34;&gt;Continuous Delivery talks&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;My talk that specifically looks at the
&lt;a href=&#34;presentation/groovy_vs_java/&#34;&gt;advantages of Spock over JUnit&lt;/a&gt;, plus some
Spock-specific resources.&lt;/li&gt;
&lt;li&gt;I &lt;em&gt;love&lt;/em&gt; Jay Fields book
&lt;a href=&#34;https://leanpub.com/wewut&#34;&gt;Working Effectively With Unit Tests&lt;/a&gt; - if I
could have made the whole team read this before moving to Spock, we might
have stuck with JUnit.&lt;/li&gt;
&lt;li&gt;Go read everything Adrian Sutton has written about testing at LMAX. If not
everything, definitely &lt;a href=&#34;https://www.symphonious.net/2015/06/05/testinglmax-abstraction-by-dsl/&#34;&gt;Abstraction by
DSL&lt;/a&gt;
and
&lt;a href=&#34;https://www.symphonious.net/2015/04/30/making-end-to-end-tests-work/&#34;&gt;Making End-to-End Tests Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you can&amp;rsquo;t make it all the way through Dave Farley and Jez Humble&amp;rsquo;s
excellent &lt;a href=&#34;http://www.amazon
.com/gp/product/0321601912/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;camp=1789
&amp;creative=9325&amp;creativeASIN=0321601912&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId
=I7ZAO2TETBFJIPHL&#34;&gt;Continuous Delivery book&lt;/a&gt;, do take a look at one of
Dave&amp;rsquo;s presentations on the subject, for example &lt;a href=&#34;http://www.infoq.com/presentations/cd-success&#34;&gt;The Rationale for Continuous
Delivery&lt;/a&gt; or &lt;a href=&#34;http://www.infoq.com/presentations/technology-practice-continuous-delivery&#34;&gt;The Process,
Technology and Practice of Continuous
Delivery&lt;/a&gt; - my own talk was
around testing, but I&amp;rsquo;m working off the assumption that you&amp;rsquo;re &lt;em&gt;at least&lt;/em&gt;
running some sort of Continuous Integration, if not Continuous Delivery.&lt;/li&gt;
&lt;li&gt;Martin Fowler has loads of &lt;a href=&#34;http://martinfowler.com/tags/testing.html&#34;&gt;interesting and useful articles on
testing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;i&gt;What can you do to help developers a) write tests b) write meaningful tests
and c) write readable tests?&lt;/p&gt;

&lt;p&gt;Trisha will talk about her experiences of working in a team that wanted to
build quality into their new software version without a painful overhead -
without a QA / Testing team, without putting in place any formal processes,
without slavishly improving the coverage percentage.&lt;/p&gt;

&lt;p&gt;The team had been writing automated tests and running them in a continuous
integration environment, but they were simply writing tests as another tick
box to check, there to verify the developer had done what the developer had
aimed to do. The team needed to move to a model where tests provided more
than this. The tests needed to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Demonstrate that the library code was meeting the requirements&lt;/li&gt;
&lt;li&gt;Document in a readable fashion what those requirements were, and what should happen under non-happy-path situations&lt;/li&gt;
&lt;li&gt;Provide enough coverage so a developer could confidently refactor the code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This talk will cover how the team selected a new testing framework (Spock, a
framework written in Groovy that can be used to test JVM code) to aid with
this effort, and how they evaluated whether this tool would meet the team’s
needs. And now, two years after starting to use Spock, Trisha can talk
about how both the tool and the shift in the focus of the purpose of tests
has affected the quality of the code. And, interestingly, the happiness
of the developers.&lt;/i&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java at 20</title>
      <link>http://trishagee.github.io/post/java_at_20/</link>
      <pubDate>Fri, 22 May 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>http://trishagee.github.io/post/java_at_20/</guid>
      <description>&lt;p&gt;I was asked three simple questions about my thoughts on Java turning 20, and ended up writing a
&lt;a href=&#34;https://www.voxxed.com/blog/2015/05/the-java-birthday-diaries-part-3-trisha-gee-on-ides-jigsaw-and/&#34;&gt;guest post for Voxxed&lt;/a&gt;.
 No wonder I can&amp;rsquo;t seem to find the time to write these days.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
