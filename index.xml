<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Trisha Gee </title>
    <link>https://trishagee.github.io/index.xml/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Fri, 04 Nov 2016 00:00:00 UTC</updated>
    
    <item>
      <title>What Can Men Do</title>
      <link>https://trishagee.github.io/post/what_can_men_do/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/what_can_men_do/</guid>
      <description>&lt;p&gt;So, I wrote a long email to the London Java Community in answer to an excellent question: &amp;ldquo;What can men do to support Women in Technology?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a bit of a brain dump, by no means comprehensive, and is in answer to a specific question in a specific context, but I&amp;rsquo;ve been asked
to make the information public so it can be useful in a broader context.  So here it is.&lt;/p&gt;

&lt;p&gt;I know one of the reasons men feel strongly about this topic is because they do want to help and don&amp;rsquo;t always know how, and can feel
excluded when it&amp;rsquo;s just presented as a women&amp;rsquo;s issue.&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve said in the past, the &lt;a href=&#34;https://www.meetup.com/Londonjavacommunity/&#34;&gt;LJC&lt;/a&gt; was the community that mentored me, and those mentors
were largely men: Barry, Martijn, Ben Evans, John Stevenson to name a few. These guys were not only open and friendly and willing to
listen to me, they pushed me (hard!).&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have all the answers, of course, and there are lots of blogs and articles on the internet about this topic (if anyone finds any
they like, feel free to post as a comment for all to see), but for me personally, my male mentors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Listened&lt;/em&gt; to me, and made me feel like I had a valid opinion.  They took things I said, assumed they were a valid hypothesis, and
made changes based on what I&amp;rsquo;d said.  I never felt like I had to change myself to fit in to the community.  Barry etc added different
types of events and different approaches to running events in order to accommodate feedback I&amp;rsquo;d given.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pushed&lt;/em&gt; me - Barry included me in the Associates, simultaneously recognising my value to the community but also forcing me to be
more active in running it and applying changes I thought were important.  Martijn and Ben practically forced me to give short
presentations at the LJC well before I was ready. But they also gave me loads of support, suggesting topics, checking through my slides
in advance, giving me presentation hints and tips when I asked for them. They were right, I was ready, even when I felt like I wasn&amp;rsquo;t.
I&amp;rsquo;ve talked before about &lt;a href=&#34;becoming_an_evangelist&#34;&gt;how this helped my career&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Validated&lt;/em&gt; me - By co-presenting with me, these men who were more well known (maybe even respected ;) ) in the community (not just
the LJC, but the global Java Community) not only gave me support to launch my own presenting career, but they also validated, there on
stage, that I was someone to listen to.  Martin Thompson, Todd Montgomery, Dan North, as well as those I&amp;rsquo;ve mentioned have all gone out
of their way to co-present with me.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, in answer to the question:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;If you&#39;re interested in supporting a Women in [some technology] group specifically, please do reach out to the organiser. Check what 
 the goals are for the community, and offer support.&lt;/li&gt;  
 &lt;li&gt;If you&#39;re interested in supporting women in technology generally (or specific women you know), read the following points.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;This is for &lt;em&gt;everyone&lt;/em&gt;: When you see a woman at a technical event (community, conference, etc) &lt;em&gt;assume she&amp;rsquo;s a techie&lt;/em&gt;.  I cannot tell
you
the number of times a man I was talking to at an LJC event assumed I was a recruiter or in HR because I was female.  It is &lt;em&gt;far&lt;/em&gt; better to
assume the woman is a techie and be corrected if she is not, than to assume the other way around.  And, &lt;em&gt;please&lt;/em&gt; assume she is a
competent, senior techie.  Again, much better for a student to correct you and tell you she&amp;rsquo;s junior, than for you to assume a seasoned
architect is junior just because she&amp;rsquo;s female.  This is by far the easiest thing for you to change in your behaviour, and probably the
most valuable thing you can do for the community to encourage women to simply turn up and keep turning up.&lt;/li&gt;
&lt;li&gt;If you know someone who&amp;rsquo;s interested in presenting, suggest she co-presents with you at a User Group event, internal company brown
bag, community conference, etc.  This is a great way to get started.  Or suggest she does a lightning talk at a User Group (some
conferences also offer Quickies for inexperienced speakers). If your local user group doesn&amp;rsquo;t currently do lightning talks, I&amp;rsquo;m sure they
can be started if there&amp;rsquo;s interest.  If you have the expertise, offer to check slides, and/or be there for a run-though of the talk
in advance.  This can even be over Skype or hangouts, there&amp;rsquo;s no need to take loads of time to travel to meet in person&lt;/li&gt;
&lt;li&gt;If you know women who you think would be great at writing, but who haven&amp;rsquo;t started their own blog yet, offer a place for them to write
for/with you. If you have a blog, they can write a guest post for you.  Again, offer to check the content before it goes live.  All of us
are super nervous about our stuff being &amp;ldquo;good enough&amp;rdquo;, receiving the green light from someone else is a nice confidence boost and helps
us feel better about publishing something.&lt;/li&gt;
&lt;li&gt;Mentor a woman. This is for anyone, male, female, non-gender-specific. Mentoring includes some of the activities mentioned above. Or
it can be something more code-focused.  Or helping them learn to play the politics of career (and believe me, techie roles and
companies are still full of politics, especially if you want to get promoted). In fact, I recently read that what&amp;rsquo;s really needed for
women is Sponsorship, not Mentoring.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;male mentors tend to sponsor rather than just mentor—similar to the difference between coaching
and selling. In fact&amp;hellip; women may actually be over-mentored, but under-sponsored. And that sponsoring—advocating to get somebody a job
or promotion, mentioning their name in an appointments meeting, actively helping that person advance—is what makes the real difference
in women helping women get ahead&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forbes.com/sites/peggydrexler/2014/03/04/can-women-succeed-without-a-mentor/#513dc3b542f6&#34;&gt;Forbes: Can Women Succeed Without A Mentor?&lt;/a&gt;&lt;br /&gt;
  You have to be senior and visible (either in the community or in your organisation) to sponsor, but it makes a big difference to women&amp;rsquo;s
careers. I remember the one time I had a male sponsor in one of my jobs is the only time I got a promotion.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just be encouraging.  And while I personally have a real problem with being encouraging without sounding patronising (I dunno how to
say something that doesn&amp;rsquo;t sound patronising!), it&amp;rsquo;s really important you try to be positive without being patronising or mentioning
something gender related.  I&amp;rsquo;ve heard comments like &amp;ldquo;&lt;a href=&#34;https://web.archive.org/web/20120409030606/http://www.thedeveloperday.com/my-top-5-qcon-london-2012-talks/&#34;&gt;it would be enough to say this talk was delivered by a beautiful lady packed with a
room of geeks but it deserves more praise&lt;/a&gt;&amp;rdquo;
(er, thanks?) and &amp;ldquo;It&amp;rsquo;s so great to hear women give technical
presentations!&amp;ldquo;.  Hmm. I know that&amp;rsquo;s trying to be supportive but it does make you feel a bit&amp;hellip; like an outsider, some sort of weird zoo
animal. So, before you open your mouth, This One Simple Trick Can Save You From Embarrassment: would you say this to a man? If it would
sound silly aimed at a male, re-phrase it until it sounds sensible.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re in a position to give feedback (e.g. at work a direct report, 360 reviews, or in the community someone who requests
feedback), give actionable feedback.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Researchers have found that women receive more &lt;a href=&#34;https://hbr.org/2016/04/research-vague-feedback-is-holding-women-back&#34;&gt;vague feedback&lt;/a&gt;
and &lt;a href=&#34;http://fortune.com/2014/08/26/performance-review-gender-bias/&#34;&gt;personality criticism&lt;/a&gt; in
performance evaluations, whereas men receive actionable advice tied to business outcomes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/tech-diversity-files/the-real-reason-women-quit-tech-and-how-to-address-it-6dfb606929fd#.a1hn4ztpy&#34;&gt;The Real Reason Women Quit Tech And How To Address It&lt;/a&gt;&lt;br /&gt;
As you can imagine, it&amp;rsquo;s much easier to improve with clear, actionable advice than with vague feedback.&lt;/p&gt;

&lt;p&gt;Really importantly, if a woman enjoys being technical, encourage her to stay technical.  Just because she has people skills as well doesn&amp;rsquo;t mean she should be promoted away from code to management, or moved into a Scrum Master position.  Just because she&amp;rsquo;s a woman presenting or writing about technology, does not mean she wants to present or write about being a woman in technology.&lt;/p&gt;

&lt;p&gt;Further reading:&lt;br /&gt;
I&amp;rsquo;ve already mentioned it, but this is excellent:
&lt;a href=&#34;https://medium.com/tech-diversity-files/the-real-reason-women-quit-tech-and-how-to-address-it-6dfb606929fd#.a1hn4ztpy&#34;&gt;The Real Read Women Quit Tech And How To Address It&lt;/a&gt;.
It contains links to tonnes of research in this area.&lt;br /&gt;
&lt;a href=&#34;https://hbr.org/ideacast/2010/08/women-are-over-mentored-but-un.html&#34;&gt;Women Are Over-Mentored (But Under-Sponsored)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://hbr.org/2010/09/why-men-still-get-more-promotions-than-women?referral=00134&#34;&gt;Why Men Still Get More Promotions Than Women&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you made it this far&amp;hellip;. well done!&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t have to do all these things.  But if you do care about diversity (and in my experience, I&amp;rsquo;ve met more white men who care about
 diversity than women who care about it, cos being a minority is sometimes helpful), read these and do &lt;em&gt;something&lt;/em&gt;. Even if it&amp;rsquo;s just
 that thing of assuming a woman you meet at a tech event is, in fact, a techie.&lt;/p&gt;

&lt;p&gt;PS if you are a woman in technology and want to ask me anything, please feel free to drop me a line at any time. I have HORRIBLE e-mail
latency but I will answer you eventually :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA for Eclipse Users</title>
      <link>https://trishagee.github.io/resources/intellij_for_eclipse_users/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/resources/intellij_for_eclipse_users/</guid>
      <description>&lt;p&gt;List of resources for those trying to make the switch from Eclipse to IntelliJ IDEA:&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/qKgzj8tZX9JDmA&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/4455&#34;&gt;Key Promoter&lt;/a&gt;, a plugin that tells you what the keyboard shortcut is
for every mouse action you perform.&lt;/li&gt;
&lt;li&gt;The printable &lt;a href=&#34;https://resources.jetbrains.com/assets/products/intellij-idea/IntelliJIDEA_ReferenceCard.pdf&#34;&gt;IntelliJ IDEA default keymap&lt;/a&gt; and &lt;a href=&#34;https://resources.jetbrains.com/assets/products/intellij-idea/IntelliJIDEA_ReferenceCard_mac.pdf&#34;&gt;Mac keymap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/getting-started-with-intellij-idea-as-an-eclipse-user/4/&#34;&gt;Eclipse-IntelliJ Keymap Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ZeroTurnaround&amp;rsquo;s rather excellent (and extensive!) article &lt;a href=&#34;https://zeroturnaround.com/rebellabs/getting-started-with-intellij-idea-as-an-eclipse-user/4/&#34;&gt;Getting Started With IntelliJ IDEA as an Eclipse User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video: &lt;a href=&#34;https://youtu.be/eq3KiAH4IBI&#34;&gt;42 IntelliJ IDEA Tips and Tricks&lt;/a&gt;. Watch this.  Regularly.&lt;/li&gt;
&lt;li&gt;If you have IntelliJ IDEA power users near you, get them to install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7345&#34;&gt;Presentation Assistant&lt;/a&gt; so you can see all the shortcuts they&amp;rsquo;re using.&lt;/li&gt;
&lt;li&gt;If you want, you can also use the Eclipse keymap and the Eclipse compiler.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s an extensive JetBrains article on &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/eclipse.html&#34;&gt;Migrating from Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check out
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/keyboard-shortcuts-you-cannot-miss.html&#34;&gt;Keyboard Shortcuts You Cannot Miss&lt;/a&gt;
and DZone&amp;rsquo;s &lt;a href=&#34;https://dzone.com/refcardz/intellij-idea-update&#34;&gt;IntelliJ IDEA Refcard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some of my own presentations are live coding using lots of IntelliJ IDEA features, watching them might give an
idea of what&amp;rsquo;s possible.  For example
&lt;a href=&#34;/presentation/angularjs_html5_groovy_java_mongodb_wcpgw&#34;&gt;AngularJS, HTML5, Groovy, Java and MongoDB All Together&lt;/a&gt;,
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 in Anger&lt;/a&gt; and &lt;a href=&#34;/presentation/refactoring_to_java_8&#34;&gt;Refactoring to Java 8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve written a few tutorials about specific topics performed in IntelliJ IDEA:
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-introduction-to-refactoring.html&#34;&gt;Introduction to Refactoring&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-test-driven-development.html&#34;&gt;Test Driven Development&lt;/a&gt;,
and &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the slides above, there&amp;rsquo;s a section &amp;ldquo;The Power of IntelliJ IDEA&amp;rdquo; with no content - that&amp;rsquo;s because that&amp;rsquo;s a place
for a live demo of working with IntelliJ IDEA. To create that demo, I jotted down some topics that I think are
interesting in IntelliJ IDEA, which are worth making a note of here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IntelliJ provides &lt;em&gt;Contextual Aid&lt;/em&gt; - hints, tips, help and advice at the point at which you need it.  For example:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/auto-completing-code.html&#34;&gt;Code completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The magic Alt+Enter to show &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/intention-actions.html&#34;&gt;intention actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/using-postfix-templates.html&#34;&gt;Postfix completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/gutter-icons.html?search=gutter%20icons&#34;&gt;Gutter icons&lt;/a&gt;, such as
icons to run tests, show implementations of a method, display the Functional Interface for a lambda expression,
etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/code-inspection.html&#34;&gt;Inspections&lt;/a&gt; are automatically run for the
current file and shown as warnings, which you can
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/resolving-problems.html&#34;&gt;usually fix with a quick fix&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/navigating-through-the-source-code.html&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/live-templates.html&#34;&gt;Live templates&lt;/a&gt;  might be one of my favourite
features - both &lt;a href=&#34;http://www.radcortez.com/getting-started-with-intellij-idea-live-templates/&#34;&gt;built in&lt;/a&gt; (try &lt;code&gt;sout&lt;/code&gt;,
&lt;code&gt;soutp&lt;/code&gt;, &lt;code&gt;psvm&lt;/code&gt;, &lt;code&gt;itar&lt;/code&gt; and &lt;code&gt;iter&lt;/code&gt;)
and &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/creating-and-editing-live-templates.html#scratch&#34;&gt;custom&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/refactoring-source-code.html&#34;&gt;Refactoring&lt;/a&gt; (check out my &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-introduction-to-refactoring.html&#34;&gt;Refactoring
Tutorial&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/code-inspection.html&#34;&gt;Inspections&lt;/a&gt; were mentioned above, but as well
as having the results on the current file, you can
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/customizing-profiles.html&#34;&gt;customise what you&amp;rsquo;re looking for&lt;/a&gt; and
the &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/running-inspections.html&#34;&gt;scope to check&lt;/a&gt;.
They&amp;rsquo;re very powerful for helping to either keep your code clean, or improve it further. I&amp;rsquo;ve written a tutorial on
how to use them to help
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-migrating-to-java-8.html&#34;&gt;migrate your code to use Java 8 idioms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/debugging.html&#34;&gt;Debugger&lt;/a&gt; is powerful but easy to use.&lt;/li&gt;
&lt;li&gt;All the things you get from the Java side of the IDE is also available for other languages you might be using too,
e.g. &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/databases-and-sql.html&#34;&gt;SQL&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/javascript-specific-guidelines.html&#34;&gt;JavaScript&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/editing-html-files.html&#34;&gt;HTML&lt;/a&gt;, etc. E.g. code completion,
refactoring and debugging, where appropriate.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/vcs-specific-procedures.html&#34;&gt;VCS support&lt;/a&gt; is sufficient for most
everyday use, and every new release adds more features.  If in the past the VCS support didn&amp;rsquo;t do what you
wanted, give it another try now, it&amp;rsquo;s constantly evolving.&lt;/li&gt;
&lt;li&gt;Also interesting for most developers is the &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/gradle.html&#34;&gt;Gradle&lt;/a&gt;
&amp;amp; &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/maven.html&#34;&gt;Maven&lt;/a&gt; integration, and
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/testing.html&#34;&gt;running tests&lt;/a&gt; with
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/code-coverage.html&#34;&gt;code coverage&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Anticipating Java 9 - Functionality and Tooling</title>
      <link>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</link>
      <pubDate>Thu, 22 Sep 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</guid>
      <description>

&lt;p&gt;Looking ahead to what functionality is available in Java 9, and IntelliJ IDEA&amp;rsquo;s support (current and future) for it.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;At JavaOne this year we&amp;rsquo;re learning all about what&amp;rsquo;s coming in Java 9, and it&amp;rsquo;s so much more than just Jigsaw.  But what we&amp;rsquo;re really wondering is, will it change the way we develop, like Java 8 did?  Will my tools break when I try to use it? Is it worth playing with it before it comes out, or should I just wait until everything stabilises?&lt;/p&gt;

&lt;p&gt;In this talk, Trisha will take a look at the features coming in Java 9, focusing on those that may be most useful to us in the day job.  She will demonstrate using some of these features in IntelliJ IDEA.  And finally, she&amp;rsquo;ll share the roadmap for Java 9 support in IntelliJ IDEA.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://jdk9.java.net/download/&#34;&gt;Download the latest Java JDK here&lt;/a&gt; (the talk uses build 136).&lt;/p&gt;

&lt;p&gt;At the time of writing, &lt;a href=&#34;https://confluence.jetbrains.com/display/IDEADEV/IDEA+2016.3+EAP&#34;&gt;IntelliJ IDEA 2016.3 EAP&lt;/a&gt; (build 163.4396) comes with
some support for jigsaw. In the talk I use build 163.4771, which builds with Java language level 9 without error and also supports
multi-module projects.  Keep an eye on the
&lt;a href=&#34;https://blog.jetbrains.com/idea/tag/2016-3/&#34;&gt;IntelliJ blog&lt;/a&gt; for further updates.&lt;/p&gt;

&lt;p&gt;The Jigsaw code I used was from the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Getting Started tutorial&lt;/a&gt;, and the &lt;a href=&#34;https://java.net/downloads/adoptopenjdk/REPL_Tutorial.pdf&#34;&gt;Java REPL
Tutorial&lt;/a&gt; helped me get started with JShell.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Help &amp;amp; Feedback&lt;/h2&gt;

&lt;p&gt;Get help and more information on JDK 9 from the
&lt;a href=&#34;https://community.oracle.com/community/java/java_desktop/java-se-early-access&#34;&gt;Oracle Community feedback forum&lt;/a&gt;. If you find a genuine
bug in the JDK, &lt;a href=&#34;http://bugreport.java.com/&#34;&gt;report it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can report bugs and request features for IntelliJ IDEA in
&lt;a href=&#34;https://youtrack.jetbrains.com/issues/idea/&#34;&gt;YouTrack&lt;/a&gt;. Some Java 9 tickets you may be interested in:&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161611&#34;&gt;IDEA-161611: Java REPL support for Java 9&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-154240&#34;&gt;IDEA-154240: IDEA should work with JDK module system&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161641&#34;&gt;IDEA-161641: Produce JLink Artefacts&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;More information&lt;/h2&gt;

&lt;p&gt;Joseph Darcy&amp;rsquo;s talk on
&lt;a href=&#34;https://youtu.be/vKYzmIi_1LM&#34;&gt;JDK 9 Language, Tooling and Library Features&lt;/a&gt; from JavaOne is a good summary of what&amp;rsquo;s coming (&lt;a href=&#34;https://blogs.oracle.com/darcy/resource/JavaOne/J1_2016-jdk9-lang-tools-libs.pdf&#34;&gt;slides
also available&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Aurelio Garcia Ribeyro has a talk summarising all the features in Java 9, I can only find a summary version
&lt;a href=&#34;https://youtu.be/Ws2uT2Av42I&#34;&gt;in Spanish&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The OpenJDK wiki provides &lt;a href=&#34;https://wiki.openjdk.java.net/display/Adoption/JDK+9+Outreach&#34;&gt;guidance on running your code with Java 9&lt;/a&gt;, and a
&lt;a href=&#34;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&#34;&gt;list of libraries and frameworks who are currently testing against Java 9&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upcoming Events</title>
      <link>https://trishagee.github.io/presentation/upcoming_events/</link>
      <pubDate>Fri, 16 Sep 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/upcoming_events/</guid>
      <description>&lt;p&gt;While the list in the &lt;a href=&#34;/presentation/public_appearances/&#34;&gt;talks section&lt;/a&gt; of my blog covers past presentations,
this page should list my confirmed upcoming events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;30 Sep - 1 Oct 2016&lt;/strong&gt;: &lt;a href=&#34;http://www.lambda.world/speakers/&#34;&gt;Lambda World, Cadiz - Java 8 in Anger&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;7-11 Nov&lt;/strong&gt;: &lt;a href=&#34;https://devoxx.be/&#34;&gt;DevoxxBE, Antwerp - Refactoring to Java 8&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;1-9 Dec&lt;/strong&gt;: &lt;a href=&#34;http://melbourne.yowconference.com.au/speakers/&#34;&gt;YOW! Melbourne, Brisbane, Sydney - Java 8 in Anger&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JavaZone 2016</title>
      <link>https://trishagee.github.io/post/javazone_2016/</link>
      <pubDate>Fri, 16 Sep 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/javazone_2016/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since I wrote a conference write up.  The short version of &amp;ldquo;why&amp;rdquo; is because I got a bit bored of doing it.  Plus, I
found I was attending conferences as a speaker &amp;ldquo;on the circuit&amp;rdquo;, and my experience of hanging out, catching up with my friends, chatting
 to other attendees to see what they&amp;rsquo;re up to and so forth, didn&amp;rsquo;t seem as useful to share with people who might want to find out
 whether a conference is worth attending from a content or atmosphere point of view.&lt;/p&gt;

&lt;p&gt;But I feel compelled to blog about &lt;a href=&#34;https://2016.javazone.no/&#34;&gt;JavaZone&lt;/a&gt;. I presented there back in &lt;a href=&#34;/post/javazone_oslo&#34;&gt;2013&lt;/a&gt;, but every year since then haven&amp;rsquo;t
made it for one reason or another (the fact that it&amp;rsquo;s near my birthday in no way impacts my scheduling…).  I made the effort this year, and
I&amp;rsquo;m so pleased.  Now I&amp;rsquo;ve been to many more conferences, of various sizes, various themes, all around the world, and I can definitely
state that JavaZone is up there as one of the best conferences around.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The content is great, JavaZone manages to attract a lot of great speakers who can present on topics that range from &lt;a href=&#34;https://vimeo.com/181814364&#34;&gt;deeply
technical&lt;/a&gt; to &lt;a href=&#34;https://vimeo.com/181925281&#34;&gt;more theoretical&lt;/a&gt; to concepts
&lt;a href=&#34;https://vimeo.com/182087729&#34;&gt;beyond just code and syntax&lt;/a&gt;.  They also really make an effort to encourage local presenters, and to offer
the option of lightning talks. I love this from the point of view of encouraging more from the community to get involved and present themselves, but also because you get more novel content - experience reports from developers deep in the trenches; teams who can tell you what they&amp;rsquo;ve found trying to implement things that we hear about at conferences; and other things from the point of view of real developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.45.36-coffee.jpg&#34; alt=&#34;Food and fantastic coffee&#34; title=&#34;Food and fantastic coffee&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The food is fantastic, and available all day.  I made half of a promise to myself not to rate conferences on the quality of the food
after I had a glimpse at how insanely hard it is for conference organisers to balance the requirements of keeping ticket costs low,
using an adequate venue in an accessible location, and providing some sort of catering through the day.  Especially when venues
themselves often restrict this.  I don&amp;rsquo;t know how JavaZone do it, but now I&amp;rsquo;m aware of all these issues, I&amp;rsquo;m even more impressed at the
variety and quality of their food.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.46.02-robots.jpg&#34; alt=&#34;Robots&#34; title=&#34;Robots&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The venue.  The location in the centre of Oslo is nice, often conference venues are out of town, making them hard to get to or, if
you&amp;rsquo;re staying near there, terribly isolated.  One of the reasons to travel to a conference is to see the city, and you get a chance to
do that at JavaZone. So it&amp;rsquo;s central, easy to get to, with plenty of great hotels nearby.  The venue itself also nicely laid out, with
presentation rooms circling a central exhibition space.  Which leads me to&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 09.46.18-exhibition.jpg&#34; alt=&#34;Exhibition&#34; title=&#34;The Exhibition&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The exhibition space is brilliant.  Because it&amp;rsquo;s central, most people spend their time between sessions in the exhibition hall.  As
an exhibitor (JetBrains had a stand there), this is obviously useful to us, but as an attendee it’s nice to know there&amp;rsquo;s a place to go
to hang out where other people will also be hanging out.  Especially when the vibe of the hall was so much fun, so energetic.  And the
stands themselves were impressive: some bribing us with excellent coffee; several with lego areas inviting you to sit down and play;
interactive VR headsets; modern and retro gaming centres (curses, I forgot to take a photo); interactive quizzes and games… As for us,
we had a sofa, and I loved that, it felt welcoming and relaxed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.45.20-games.jpg&#34; alt=&#34;Games&#34; title=&#34;Exhibition&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everyone is really friendly.  The crew and JUG people were easy to spot and friendly if you needed help. All attendees and speakers
were happy to strike up conversations short and long, on a variety of topics. People smiled.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s a big conference, there are a lot of attendees, but it doesn&amp;rsquo;t feel big and daunting.  Instead, you get the benefit of 8 tracks
of varied content, but don&amp;rsquo;t feel lost in the crowd.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 09.39.20-overflow.jpg&#34; alt=&#34;Overflow Room&#34; title=&#34;Overflow Room&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The overflow room is the best thing I&amp;rsquo;ve ever seen at a conference, and I&amp;rsquo;m seriously wondering if I can set up something similar at
home (on a much smaller scale!) to let me skim content from multiple talks when I&amp;rsquo;m doing research, or maybe just something to have
half an eye on while I&amp;rsquo;m entertaining the minion.&lt;/li&gt;
&lt;li&gt;It was, from my point of view as an attendee and speaker, incredibly well organised.  It felt smooth, and touches like the big
monitors flashing up relevant information was really nice.  I also loved that the video production quality and presentation of the
stages and so forth was really professional.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.46.36-stacks-coffee.jpg&#34; alt=&#34;Plenty of caffeine for the developers&#34; title=&#34;Plenty of caffeine for the developers&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I personally think it&amp;rsquo;s brilliant that the &lt;a href=&#34;https://vimeo.com/album/4133413&#34;&gt;videos are online&lt;/a&gt; really soon after you&amp;rsquo;ve presented.
Sometimes as a speaker you might want a delay on the video - conferences may be more likely to accept your talk if it&amp;rsquo;s not already widely available.  For me though,
especially when giving a new talk like we did here, it&amp;rsquo;s nice to be able to see the video so soon afterwards, to see how it went and
learn from it.  For speakers just starting on their presenting career, it&amp;rsquo;s also great - you have a video to use in your &amp;ldquo;portfolio&amp;rdquo; to
help you get your talk(s) accepted at other conferences.&lt;/li&gt;
&lt;li&gt;And I can&amp;rsquo;t leave this without mentioning diversity.  Now that I&amp;rsquo;m a world-weary veteran of conferences, I&amp;rsquo;m fairly blind to gender
balance unless I specifically look, or something out of the ordinary catches my attention.  I don&amp;rsquo;t know what the percentages were, but
I noticed so many women at the conference, women who were clearly professionals attending the conference and not hired booth babes or
staff of some other kind.  It was obvious and pleasing.  I&amp;rsquo;m not sure how the other women attendees felt, if it was their first
conference maybe they still noticed there were fewer women than men, but the difference to me was that whichever direction I looked
in, there was at least &lt;em&gt;one&lt;/em&gt; woman, usually more. I don&amp;rsquo;t know if there are more women developers in Up North, or if it&amp;rsquo;s just a
conference that somehow appeals more to women than other conferences. I&amp;rsquo;d be interested to find out if any special measures were taken
by the conference organisers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I know a bit more about conferences and how they work behind the scenes, I&amp;rsquo;m astounded at JavaZone.  It feels like  a lot of money has been spent getting it really right, and/or they&amp;rsquo;ve worked really hard to get the absolute most out of what budget they have.&lt;/p&gt;

&lt;p&gt;If I had to really hunt for a downside, it&amp;rsquo;s that all the free alcohol was beer and not wine.  Yep, a complaint about free beer.  But knowing how expensive wine is in Norway, I&amp;rsquo;m not at all surprised.  Plus, moaning about the exact type of free alcohol available seems churlish at best.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 16.28.07-jetbrains.jpg&#34; alt=&#34;The JatBrains stand&#34; title=&#34;The JetBrains stand&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you do get a chance to go to JavaZone as an attendee or speaker, I highly recommend it.  I hope to be going again.&lt;/p&gt;

&lt;p&gt;PS In case you&amp;rsquo;re interested, we were presenting a new talk,
&lt;a href=&#34;presentation/code_review_matters_and_manners&#34;&gt;Code Review Matters and Manners&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Review Matters and Manners</title>
      <link>https://trishagee.github.io/presentation/code_review_matters_and_manners/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/code_review_matters_and_manners/</guid>
      <description>

&lt;p&gt;Content and resources for the Code Review Matters and Manners talk, including links to additional information and
supporting material.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;A code review is basically a technical discussion which should lead to improvements in the code and/or sharing
knowledge in a team. As with any conversation, it should have substance and form.&lt;/p&gt;

&lt;p&gt;What’s involved in a good code review? What kind of problems do we want to spot and address? Trisha Gee will talk
about things a reviewer may consider when looking at changes:  what potential issues to look for; why certain
patterns may be harmful; and, of course, what NOT to look at.&lt;/p&gt;

&lt;p&gt;But when it comes to commenting on someone’s work, it may be hard to find the right words to convey a useful message
without offending the authors - after all, this is something that they worked hard on. Maria Khalusova will share
some observations, thoughts and practical tricks on how to give and receive feedback without turning a code review
into a battlefield.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/182087729&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/7wG1iGAnGsQ4F6&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;More Information&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Books&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;What to Look for in a Code Review&lt;/a&gt; - Trisha Gee (free!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=4f2f97b38b1e19961a4425340aef003b&#34;&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0735619670&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Steve McConnell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=86afa947570d6d5c8d03f7c4d495c449&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0132350882&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Robert C. Martin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/&#34;&gt;What to look for in a Code Review&lt;/a&gt;, the article that started all of this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/03/what-to-look-for-in-a-code-review-tests/&#34;&gt;What to look for in a Code Review: Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/06/what-to-look-for-in-a-code-review-performance/&#34;&gt;What to look for in a Code Review: Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/20/what-to-look-for-in-a-code-review-data-structures/&#34;&gt;What to look for in a Code Review: Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/31/what-to-look-for-in-a-code-review-solid-principles-2/&#34;&gt;What to look for in a Code Review: SOLID Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/05/what-to-look-for-in-a-code-review-security/&#34;&gt;What to look for in a Code Review: Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/19/what-to-look-for-in-a-code-review-upsource-quick-wins/&#34;&gt;What to look for in a Code Review: Upsource Quick Wins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2016/08/03/what-to-look-for-in-java-8-code/&#34;&gt;What to look for in: Java 8 code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/code-reviews-just-do-it/&#34;&gt;Code Reviews: Just Do It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.fullstory.com/what-we-learned-from-google-code-reviews-arent-just-for-catching-bugs-b125a13aa292#.mktgod79l&#34;&gt;What we learned from Google: code reviews aren’t just for catching bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infragistics.com/community/blogs/erikdietrich/archive/2016/06/29/the-human-cost-of-tech-debt.aspx&#34;&gt;The Human Cost of Tech Debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2016/06/21/pick-battles-software-team/&#34;&gt;How to Pick Your Battles on a Software Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;And, of course&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can &lt;a href=&#34;https://www.jetbrains.com/upsource/&#34;&gt;download Upsource&lt;/a&gt;, it&amp;rsquo;s free for up to 10 users.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Year? Really?</title>
      <link>https://trishagee.github.io/post/what_a_year.md/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/what_a_year.md/</guid>
      <description>&lt;p&gt;So I came to the blog to update my &lt;a href=&#34;//presentation/upcoming_events/&#34;&gt;upcoming events&lt;/a&gt; (at least something stays up to date) only to find
it&amp;rsquo;s been nearly a year since I last blogged!  This is terrible!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not that I haven&amp;rsquo;t written anything in a year, it&amp;rsquo;s that a lot of my writing energy goes into
stuff for the actual day job.  Which is good, because that&amp;rsquo;s pretty much what I wanted from the day job, but the blog makes it look like
I don&amp;rsquo;t write any more.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m going to cheat.  Here&amp;rsquo;s the stuff I&amp;rsquo;ve written in the last 12 months.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A whole series of articles off the back of last year&amp;rsquo;s &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Java 8 in Anger&lt;/a&gt; talk:
&lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features That You Won’t Be Able to Live Without&lt;/a&gt;,
&lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8?&lt;/a&gt;, and &lt;a href=&#34;https://community.oracle.com/docs/DOC-920950&#34;&gt;Java SE 8 in Practice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A tutorial on &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-test-driven-development.html&#34;&gt;TDD in IntelliJ IDEA&lt;/a&gt;. I have video
clips to turn this into a screencast as well, but that&amp;rsquo;s Yet Another thing I didn&amp;rsquo;t get around to.&lt;/li&gt;
&lt;li&gt;A tutorial on how IntelliJ IDEA helps you &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-migrating-to-java-8.html&#34;&gt;migrate code to Java 8&lt;/a&gt;.  This evolved into the other thing I&amp;rsquo;ve been working on this year, my latest live demo
presentation, &lt;a href=&#34;/presentation/refactoring_to_java_8/&#34;&gt;Refactoring to Java 8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A whole series of blog posts on &lt;a href=&#34;https://blog.jetbrains.com/upsource/category/practices/&#34;&gt;&amp;ldquo;What to look for in a code review&amp;rdquo;&lt;/a&gt;. This was fun and satisfying to write.&lt;/li&gt;
&lt;li&gt;&amp;hellip;which got &lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;turned into a book&lt;/a&gt;. Yes, I&amp;rsquo;m finally the author of a book!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2016/07/java-8-top-tips/&#34;&gt;Java 8 Top Tips&lt;/a&gt;, with a bunch of IntelliJ-specific tips&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve taken over &lt;a href=&#34;https://blog.jetbrains.com/idea/tag/java-annotated/&#34;&gt;Java Annotated Monthly&lt;/a&gt;, so at least you get to hear from me
once a month with that. I try really hard not to be too sarcastic, jokey or British when I write the newsletter. I don&amp;rsquo;t always succeed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve also done a bunch of screencasts &amp;amp; webinars for &lt;a href=&#34;https://www.youtube.com/user/intellijideavideo/videos&#34;&gt;IntelliJ IDEA&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/playlist?list=PLQ176FUIyIUa50f13M4v5Nvp6b-IBNB4e&#34;&gt;Upsource
and Team City&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh yeah, and I had a baby.  I&amp;rsquo;m contemplating blogging about being a working parent, but I&amp;rsquo;m a bit concerned that Of Course a woman is
going to blog about Being A Mother, when previously I just blogged about&amp;hellip; well, come to think about it I blogged about all sorts of
things, including &lt;a href=&#34;/post/why_the_customer_isnt_always_right/&#34;&gt;haircuts&lt;/a&gt; and
&lt;a href=&#34;/post/what_my_hangovers_can_teach_you_about_agile/&#34;&gt;hangovers&lt;/a&gt;, so I guess I could probably get away with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Applying Java 8 Idioms to Existing Code</title>
      <link>https://trishagee.github.io/presentation/refactoring_to_java_8/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/refactoring_to_java_8/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Understand how to improve performance with your Java code using Java 8 language features.&lt;/li&gt;
&lt;li&gt;Learn hands on techniques to discover and implement common Java 8 refactorings.&lt;/li&gt;
&lt;li&gt;Understand when you should and should not apply key refactorings in Java 8.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;While we’re drawing ever closer to Java 9, and even hearing about features in Java 10, many of us are still working with an older version. Even if your project has technically adopted Java 8, and even if you’re using it when coding new features, it’s likely that the majority of your code base is still not making the most of what’s available in Java 8 - features like Lambda Expressions, the Streams API, and new Date/Time. And this is a shame, since Java 8 provides not only nicer syntax for developers, but (usually) better application performance.&lt;/p&gt;

&lt;p&gt;In this presentation, Trisha will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight the performance benefits of using Java 8 - after all, you’ll probably have to persuade &amp;ldquo;The Management&amp;rdquo; that tampering with
existing code is worthwhile&lt;/li&gt;
&lt;li&gt;Demonstrate how to identify areas of code that can be updated to use Java 8 features, and how to pick which changes will give you the
most benefit&lt;/li&gt;
&lt;li&gt;Demonstrate how to automatically refactor your code to make use of features like lambdas and streams&lt;/li&gt;
&lt;li&gt;Cover some of the pros and cons of using the new features - including suggestions of when refactoring may NOT be the best idea.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;p&gt;Most recent version, containing performance analysis, is on the
&lt;a href=&#34;https://www.infoq.com/presentations/java8-lambda-streams&#34;&gt;InfoQ website&lt;/a&gt;, and InfoQ also has a nice summary of the &lt;a href=&#34;https://www.infoq.com/articles/qcon-new-york-2016#_Toc456084721&#34;&gt;points covered in
the talk&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first appearance was at &lt;a href=&#34;https://www.youtube.com/watch?v=dlzMV83RTtw&#34;&gt;DevoxxUK&lt;/a&gt;.&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/xPhKtRN9aOsHZd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;You can purchase a more in-depth tutorial on
&lt;a href=&#34;http://www.informit.com/store/refactoring-to-modern-java-livelessons-video-training-9780134653594&#34;&gt;informIT&lt;/a&gt;, and is also available via
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/refactoring-to-modern/9780134653617/&#34;&gt;Safari Books Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The IntelliJ-specific features of some of the refactoring shown are covered in my
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Article: &lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features You Won&amp;rsquo;t Be Able to Live Without&lt;/a&gt;&lt;br /&gt;
Video and Research: &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Building a Java 8 Application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The project we&amp;rsquo;re refactoring is &lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt;. You can see the &amp;ldquo;after&amp;rdquo; of the chosen refactorings on the
 &lt;a href=&#34;https://github.com/trishagee/morphia/tree/r2j8&#34;&gt;r2j8&lt;/a&gt; branch.&lt;/p&gt;

&lt;p&gt;The performance tests that were written and run specifically for this talk are in the &lt;a href=&#34;https://github.com/trishagee/j8-morphia-perf-tests&#34;&gt;j8-morphia-perf-tests repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Performance&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Lambda Expressions&lt;/h3&gt;

&lt;p&gt;Video: &lt;a href=&#34;http://medianetwork.oracle.com/video/player/2623576348001&#34;&gt;Lambda Performance&lt;/a&gt; and &lt;a href=&#34;http://www.oracle
.com/technetwork/java/jvmls2013kuksen-2014088.pdf&#34;&gt;talk slides&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood&#34;&gt;Java 8 Lambdas - A Peek Under the Hood&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href=&#34;https://youtu.be/MLksirK9nnE&#34;&gt;Lambdas in Java: A Peek under the Hood - Brian Goetz&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Streams&lt;/h4&gt;

&lt;p&gt;Video: &lt;a href=&#34;https://www.infoq.com/presentations/java8-stream-performance&#34;&gt;Let’s Get to the Rapids: Java 8 Stream Performance&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://jaxenter
.com/java-performance-tutorial-how-fast-are-the-java-8-streams-118830.html&#34;&gt;Java performance tutorial: How fast are the Java 8 streams? - Angelika Langer&lt;/a&gt; Notable Quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, the for-loop is faster that the sequential stream operation, but the difference on an ArrayList is not nearly as significant as
it was on an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will find that there is no measurable difference any more between for-loop and sequential stream if the functionality is heavily cpu
 bound.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The point to take home is that sequential streams are no faster than loops. If you use sequential streams then you don’t do it for
performance reasons; you do it because you like the functional programming style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reality check via our benchmark yields a ratio (sequential / parallel) of only 1.6 instead of 2.0, which illustrates the amount of
overhead that is involved in going parallel and how (well or poorly) it is overcompensated (on this particular platform).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this in mind it is fair to say that the performance model of streams is not a trivial one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;you need to benchmark a lot in order to find out for a given context whether going parallel is worth doing or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The realisation is: Yes, parallel stream operations are easy to use and often they run faster than sequential operations, but don’t
expect miracles. Also, don’t guess; instead, benchmark a lot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.takipi
.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/&#34;&gt;Benchmark: How Misusing Streams Can Make Your Code 5 Times Slower&lt;/a&gt; -
interesting comparison of different iteration styles.  Also shows that things like boxing might add more cost than streams (but that you
don&amp;rsquo;t realise you&amp;rsquo;re boxing)&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance/&#34;&gt;Stream Performance&lt;/a&gt; - some interesting benchmarks based on Angelika Langer&amp;rsquo;s
article&lt;br /&gt;
Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance-your-ideas/&#34;&gt;Follow up on Stream Performance&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Date and Time&lt;/h3&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://java-performance.info/jsr-310-java-8-datetime-library-performance-well-joda-time-2-3-j-u-calendar/&#34;&gt;JSR 310 – Java 8 Date/Time library performance (as well as Joda Time 2.3 and j.u.Calendar)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Benchmarking&lt;/h3&gt;

&lt;p&gt;I used a bunch of techniques to produce the benchmarks on the talk.  I&amp;rsquo;d like to summarise them more thoroughly when I get a chance, but
for now here&amp;rsquo;s my background reading:&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&#34;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tool: &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;&lt;br /&gt;
Tool: &lt;a href=&#34;https://github.com/artyushov/idea-jmh-plugin&#34;&gt;IntelliJ JMH Plugin&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;http://java-performance.info/jmh/&#34;&gt;Introduction to JMH&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;&amp;ldquo;Best Practice&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I dislike the term &amp;ldquo;Best Practice&amp;rdquo; as it implies a &amp;ldquo;one size fits all&amp;rdquo; approach, and I believe that our job is to
make difficult decisions based on various pros and cons and differing situations.  However, here I will collect
resources that may help us make some of those decisions&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://martinfowler.com/articles/refactoring-pipelines.html&#34;&gt;Refactoring with Loops and Collection Pipelines&lt;/a&gt; -
Martin Fowler&lt;br /&gt;
Slides: &lt;a href=&#34;http://martinfowler.com/articles/workflowsOfRefactoring/&#34;&gt;Workflows of Refactoring&lt;/a&gt; - Martin Fowler&lt;br /&gt;
Book: &lt;a href=&#34;https://www.amazon.com/gp/product/0201485672/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201485672&amp;amp;linkId=11d0b95e050a492112eeac6fb6b2bcb0&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; - Martin Fowler&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.joda.org/2014/11/optional-in-java-se-8.html&#34;&gt;Using Optional in Java SE 8&lt;/a&gt; - Stephen Colebourne&lt;br /&gt;
Article: &lt;a href=&#34;http://zeroturnaround.com/rebellabs/java-8-best-practices-cheat-sheet/&#34;&gt;Java 8 Best Practices Cheat Sheet&lt;/a&gt; - ZeroTurnaround&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 3 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session3/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session3/</guid>
      <description>&lt;p&gt;Last night was the final get-together to discuss the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt;. Any
event hosted in August in a city that is regularly over 40&amp;deg;C is going to face challenges, so it was great that
we had attendees from earlier sessions plus new people too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/java8mooc/lesson3.jpg&#34; alt=&#34;Woohoo lambdas!&#34; title=&#34;Woohoo lambdas!&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The aim of this session was to talk about Lesson 3, but also to wrap up the course as a whole: to talk about what we
liked and what we would have improved (about both the course itself and our user group events).&lt;/p&gt;

&lt;p&gt;As in the previous &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;/post/java_8_mooc_session2&#34;&gt;posts&lt;/a&gt;, let&amp;rsquo;s outline our
discussion areas:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findAny--&#34;&gt;findAny()&lt;/a&gt;
vs &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findFirst--&#34;&gt;findFirst()&lt;/a&gt;&lt;/strong&gt;: Why do we
need both of these methods, and when would you use them?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;findFirst()&lt;/code&gt; is the deterministic version, which will return you the first element in the Stream (according to
encounter order - see the section on
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;Ordering in the documentation&lt;/a&gt;).
So, regardless of whether you run the operation in parallel or serial, if you&amp;rsquo;re looking for &amp;ldquo;A&amp;rdquo; and use &lt;code&gt;findFirst&lt;/code&gt;
with this list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;rsquo;ll get the element at index 3 - the first &amp;ldquo;A&amp;rdquo; in the list.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;findAny()&lt;/code&gt; is non-deterministic, so will return you any element that matches your criteria - it could return the
element at index 3, or the one at position 6. Realistically, if the stream is on an ordered collection like a list,
when you run &lt;code&gt;findAny&lt;/code&gt; on a sequential stream, I expect it will return the same result as &lt;code&gt;findFirst&lt;/code&gt;.  The real
use-case for &lt;code&gt;findAny&lt;/code&gt; is when you&amp;rsquo;re running this on a parallel stream. Let&amp;rsquo;s take the above list, and assume that
when you run this on a parallel stream it&amp;rsquo;s processed by two separate threads:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;,    // processed by thread 1 
 &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]     // processed by thread 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible that thread 2 finds its &amp;ldquo;A&amp;rdquo; (the one at position 6) before thread 1 finds the one at position 3, so
this will be value that&amp;rsquo;s returned. By configuring the Stream to return any one of the values that matches the
criteria, you can potentially execute the operation faster when running in parallel.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;findAny&lt;/code&gt; is (potentially) faster in parallel and (probably) returns the same value as &lt;code&gt;findFirst&lt;/code&gt; when running in
serial, why not use that all the time?  Well, there are times when you really do want the first item. If you have a
list of DVDs ordered by year the film was released, and you want to find the original &amp;ldquo;King Kong&amp;rdquo; (for
example), you&amp;rsquo;ll want &lt;code&gt;findFirst&lt;/code&gt; to find the one released in 1933, not the one that was released in 1976 or the
one from 2005.&lt;/p&gt;

&lt;p&gt;Plus, &lt;code&gt;findFirst&lt;/code&gt; is not always going to be slower than &lt;code&gt;findAny&lt;/code&gt;, even in parallel.  Going back to our list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trying to &lt;code&gt;findFirst&lt;/code&gt; or &lt;code&gt;findAny&lt;/code&gt; for &amp;ldquo;H&amp;rdquo; could be the same performance for both methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collectors&lt;/strong&gt;: Maybe it&amp;rsquo;s just me who doesn&amp;rsquo;t really see the big picture for collectors.  I&amp;rsquo;m perfectly content with
the built in collectors like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toList())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toSet())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s easy to see what they do, and work out when you need to use them.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also very happy to have discovered &lt;code&gt;joining&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.joining(&amp;quot;,&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a super-useful way to create Comma Separated Values (CSVs) that I use in my
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where things get a bit murky for me is where we start chaining up collectors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.mapping(...).combiner().andThen(...).apply(...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(it should be obvious from my lack of clear example that I&amp;rsquo;m not 100% certain under which circumstances these are
useful).&lt;/p&gt;

&lt;p&gt;As a group, we think the chained collectors are kinda ugly - not because we&amp;rsquo;re against chaining (we like Streams),
but maybe because it&amp;rsquo;s another chain inside a param to a chain.&lt;/p&gt;

&lt;p&gt;We think this is an area where some good, solid examples and a bit of daily use will make it much clearer to
developers. We hope.&lt;/p&gt;

&lt;p&gt;Related to this, the course didn&amp;rsquo;t go into creating your own collectors at all. My personal (under-informed) opinion
is that I guess most developers should be able to use either the out-of-the-box collectors (&lt;code&gt;toList&lt;/code&gt; etc) or use the
collector chaining to build what they need. If you need a custom collector, perhaps you haven&amp;rsquo;t considered everything
that&amp;rsquo;s already available to you. But as a group, we decided we would have liked to see this topic anyway so that we
could get a deeper understanding of what collectors are and how they work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercises for lesson 3:&lt;/strong&gt; Well. What can we say? I really hope there are people reading this who haven&amp;rsquo;t finished
the course yet, because the Sevilla Java User group would like to say to you: don&amp;rsquo;t despair, the lesson 3 exercises
are &lt;em&gt;substantially&lt;/em&gt; harder than those for lessons 1 and 2. Honestly, the whole group considered it less of a learning
curve and more of a massive cliff to climb.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://herbookthoughts.reads-it.com/wp-content/uploads/2014/06/d6a1143f571184db25f94613edd43b40af6d3a629221aba00d9efdcfef5efd84.jpg&#34; alt=&#34;I have no idea what I am doing&#34; title=&#34;I have no idea 
what I am doing&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I mean, it was great to have something so challenging to end on, but it probably would have been less ego-destroying
if we could have got up to that level gradually instead of having it sprung on us.&lt;/p&gt;

&lt;p&gt;The good thing about Part 2 of the lesson 3 exercises was that we had three very different answers to discuss
in the group. None of us were super happy with any of them, but we could see definite pros and cons of each approach,
and that&amp;rsquo;s something you really want to learn in a course like this.&lt;/p&gt;

&lt;p&gt;It was also really great to have a rough performance test to run on your own computer, so that you could really see
the impact of your choices on the performance of the stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more info&lt;/strong&gt;&lt;br /&gt;
I&amp;rsquo;m going to add a shameless plug to a friend&amp;rsquo;s book here. I&amp;rsquo;ve been reading a lot about Java 8 for this course, for
my &lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;, and to generally get up to speed. My favourite book for getting to
grips with lambdas and streams
is &lt;a href=&#34;http://www.amazon.com/gp/product/B00J3B3J3C/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00J3B3J3C&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=IX6U2YT4FADY4JY6&#34;&gt;Java 8 Lambdas: Pragmatic Functional Programming&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=B00J3B3J3C&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
by &lt;a href=&#34;https://twitter.com/RichardWarburto&#34;&gt;Richard Warburton&lt;/a&gt;. This book also contains more info about collectors too,
so maybe some of our questions around how to use these in more complex situation are answered in here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Summary&lt;/strong&gt;&lt;br /&gt;
We really enjoyed the MOOC, and the sessions to get together to discuss it. We particularly liked that the meetups
were a safe place to ask questions and discuss alternative solutions, and that we weren&amp;rsquo;t expected to be genius-level
experts in order to participate fully.&lt;/p&gt;

&lt;p&gt;If/when Oracle re-runs the MOOC, if you didn&amp;rsquo;t get a chance to take part this time I highly recommend signing up.
And if you can find (or run) a local meetup to discuss it, it makes the experience much more fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 2 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session2/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session2/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;last week&lt;/a&gt;, the &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Sevilla Java User Group&lt;/a&gt;
is working towards completing the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt; on
lambdas and streams. We&amp;rsquo;re running &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223677436/&#34;&gt;three sessions&lt;/a&gt;
to share knowledge between people who are doing the course.&lt;/p&gt;

&lt;p&gt;The second week&amp;rsquo;s lesson was about
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt; - how you can use the
new stream API to transform data. There was also a whole section on
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;, which initially seemed like
rather a lot, but it turns out that &lt;code&gt;Optional&lt;/code&gt; can do rather more than I originally thought.&lt;/p&gt;

&lt;p&gt;In the meetup session, we talked about:&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;&lt;/strong&gt;: we were pretty
comfortable,
I think, with using &lt;code&gt;Optional&lt;/code&gt; to
prevent a &lt;code&gt;NullPointerException&lt;/code&gt;. What we weren&amp;rsquo;t so clear on were the examples of
&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; - if you were getting your &lt;code&gt;Optional&lt;/code&gt; values from a stream, why wouldn&amp;rsquo;t you do the map and the
filter on the stream first? For example, why do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s -&amp;gt; s.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when you could map and filter in the stream to get the first non-empty value? That certainly seems like an
interesting question in relation to streams.&lt;/p&gt;

&lt;p&gt;I can see &lt;code&gt;Optional&lt;/code&gt; being more useful when other APIs fully
support Java 8 and return &lt;code&gt;Optional&lt;/code&gt; values, then you can perform additional operations on return values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That terminal operation&amp;rsquo;s not actually terminal??&lt;/strong&gt;: We ran into this a couple of times in our examples in the
session, one example is the code above (let&amp;rsquo;s copy it down here so we can look at it more closely):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isn&amp;rsquo;t &lt;code&gt;findFirst()&lt;/code&gt; a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps&#34;&gt;terminal operation&lt;/a&gt;? How
can you carry on doing more operations on that?&lt;/p&gt;

&lt;p&gt;The answer is, of course, that the return type of the terminal operation can also lead to further operations.  The
above is actually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Optional&amp;lt;String&amp;gt; result = list.stream()
                              .findFirst();
result.map(String::trim)
      .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
      .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our terminal operation returns an optional, which allows you to do further operations. Another example of this
confusion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .collect(toList())
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;collect()&lt;/code&gt; is a terminal operation, but it returns a list, which also allows &lt;code&gt;forEach()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; results = list.stream()
                           .map(String::toLowerCase)
                           .collect(toList());
results.forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So be aware that just because it&amp;rsquo;s called a terminal operation, doesn&amp;rsquo;t mean you can&amp;rsquo;t perform other operations on
the returned value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel/sequential/parallel&lt;/strong&gt;: there had been a question in the previous week about why you could write code like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .parallel()
    .map(String::trim)
    .sequential()
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .parallel()
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and whether that would let you dictate which sections of the stream were parallel and which were to be processed in
serial.  Lesson two set the lesson straight, declaring &amp;ldquo;the last operator wins&amp;rdquo; - meaning &lt;em&gt;all&lt;/em&gt; of the above code will
be run as a parallel stream. I can&amp;rsquo;t find any documentation for this, I&amp;rsquo;ll edit this post if I locate it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#unordered--&#34;&gt;Unordered&lt;/a&gt;&lt;/strong&gt;: &amp;ldquo;Why
would you ever want your stream to be unordered?&amp;rdquo; - the answer is that &lt;code&gt;unordered()&lt;/code&gt; &lt;a href=&#34;http://stackoverflow.com/a/21350234/653519&#34;&gt;doesn&amp;rsquo;t turn
your sorted collection into one with no order&lt;/a&gt;, it just says that when
this code is executed, the order of elements doesn&amp;rsquo;t matter.  This might make processing faster on a parallel stream,
but as a group we figured it would probably be pointless on a sequential stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficiency optimisations and order of stream operations&lt;/strong&gt;: We had a &lt;em&gt;long&lt;/em&gt; conversation about the order in which you
perform
operations in a stream. The MOOC (in fact, most documentation around Streams) tells us that a) streams are
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;lazy&lt;/a&gt;, and
not evaluated until a terminal operator is encountered and b) this enables optimisation of the operations in the
stream.  That lead to a discussion about the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The filter operation should result in less items to process in the stream. Given that the &lt;code&gt;map()&lt;/code&gt; operation doesn&amp;rsquo;t
change anything that &lt;code&gt;filter()&lt;/code&gt; relies on, will this code be optimised somehow under the covers so that the filter
is actually executed first? Or are optimisations still going to respect the order of operations on a stream?&lt;/p&gt;

&lt;p&gt;Our case is actually a very specific case, because a) the &lt;code&gt;map()&lt;/code&gt; returns the same type as the params passed in (i.e.
it doesn&amp;rsquo;t map a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;) and b) the &lt;code&gt;map()&lt;/code&gt; doesn&amp;rsquo;t change the characteristic the &lt;code&gt;filter()&lt;/code&gt; is
looking at (i.e. length). But generally speaking, you can&amp;rsquo;t expect these conditions to be true - in fact I bet in a
large number of cases they are &lt;em&gt;not&lt;/em&gt; true. So pipeline operations are &lt;a href=&#34;http://stackoverflow.com/a/22056258/653519&#34;&gt;performed in the order in which they are
written&lt;/a&gt;, meaning that our &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; will not be re-ordered into
a more efficient order.&lt;/p&gt;

&lt;p&gt;A good rule of thumb seems to be to do filtering as early in the stream as possible - that way you can potentially
cut down the number of items you process in each step of the stream. Therefore our code would probably be better as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .map(String::toLowerCase)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Flat Map&lt;/strong&gt;: what&amp;hellip;?
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-&#34;&gt;&lt;code&gt;flatMap()&lt;/code&gt;&lt;/a&gt;
is one of those methods that makes total sense once you get the hang of it, and you don&amp;rsquo;t
understand why it was so confusing. But the first time you encounter it, it&amp;rsquo;s confusing - how is &lt;code&gt;flatMap()&lt;/code&gt;
different to &lt;code&gt;map()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;flatMap&lt;/code&gt; is used to squish (for example) a stream of streams into just a simple stream. It&amp;rsquo;s like turning a
2-dimensional array into a single dimension so that you can iterate over all the items without needing nested
for-loops. There&amp;rsquo;s &lt;a href=&#34;http://stackoverflow.com/a/22384132/653519&#34;&gt;an example on StackOverflow&lt;/a&gt;, and some more examples
in answer to &lt;a href=&#34;http://stackoverflow.com/questions/26684562/java-8-map-and-flatmap-methods&#34;&gt;this question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparators&lt;/strong&gt;: We&amp;rsquo;ve probably all written comparators at some point, it&amp;rsquo;s probably one of those examples where we
really did use anonymous inner classes &amp;ldquo;in the olden days&amp;rdquo; and were looking forward to replacing them with lambdas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(new Comparator&amp;lt;String&amp;gt;() {
          @Override
          public int compare(String o1, String o2) {
              return ???;
          }
      })
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sadly, using a lambda still doesn&amp;rsquo;t answer the question &amp;ldquo;do I minus o1 from o2, or o2 from o1?&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted((o1, o2) -&amp;gt; ??? )
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;rsquo;s yet another new method in Java 8 here that can save us, one that is not nearly as well publicised as it
should be. There&amp;rsquo;s a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-&#34;&gt;&lt;code&gt;Comparator.comparing()&lt;/code&gt;&lt;/a&gt;
that you can use to really easily define what to compare on. The JavaDoc and signature looks kinda confusing, but
this is one of those places where method references suddenly make loads of sense:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(comparingInt(String::length))
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Here we&amp;rsquo;re actually using the &lt;code&gt;comparingInt&lt;/code&gt; method as we&amp;rsquo;re going to compare on a primitive value). Personally this
is one of my favourite new features in Java 8.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
Join us next week for the &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223910762/&#34;&gt;last session on Java 8 - Lambdas and Streams&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What to look for in a Code Review</title>
      <link>https://trishagee.github.io/post/code_reviews_1/</link>
      <pubDate>Mon, 27 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/code_reviews_1/</guid>
      <description>&lt;p&gt;I wrote a post for the JetBrains Upsource blog about some of the &lt;a href=&#34;http://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/&#34;&gt;things you should be looking for when you do code
reviews&lt;/a&gt; (and some of the things
you should not be looking at).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d love to get feedback in the comments for the post of things that you look for in code reviews.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Extraordinary Team Of Developers</title>
      <link>https://trishagee.github.io/presentation/the_extraordinary_team_of_developers/</link>
      <pubDate>Thu, 23 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/the_extraordinary_team_of_developers/</guid>
      <description>

&lt;p&gt;Daniel Bryant and I did a keynote at Devoxx UK about how individuals can add something to a team to make the team
more productive, and overall more awesome.&lt;/p&gt;

&lt;p&gt;&lt;div data-parleys-presentation=&#34;keynote-extraordinary-team-developers&#34; style=&#34;width:100%;height:300px&#34;&gt;&lt;script type = &#34;text/javascript&#34; src=&#34;//parleys.com/js/parleys-share.js&#34;&gt;&lt;/script&gt;&lt;a href=&#34;https://www.parleys.com/play/keynote-extraordinary-team-developers&#34;&gt;Watch on Parleys.com&lt;/a&gt;&lt;/div&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;We mention a number of books, so I&amp;rsquo;ve made a list of them here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.amazon.com/gp/product/1594484805/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1594484805&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=GSO6AH7236C37XUL&#34;&gt;Drive: The Surprising Truth About What Motivates
Us&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1594484805&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/1491919019/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1491919019&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=S3PUS65PBYMVIK4U&#34;&gt;Badass: Making Users Awesome&lt;/a&gt;&lt;img 
src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1491919019&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0316346624/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0316346624&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=JSKRNEPP3R3RTZH4&#34;&gt;The Tipping Point: How Little Things Can Make a
Big Difference&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0316346624&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0321356683/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0321356683&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=WFSI2OVJKEBPD7YA&#34;&gt;Effective Java (2nd Edition)&lt;/a&gt;&lt;img 
src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0321356683&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/0982201222/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0982201222&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=26DOP5D3JV2MWTGW&#34;&gt;The Servant as Leader&lt;/a&gt;&lt;img src=&#34;http://ir-na
.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=0982201222&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;br /&gt;
&lt;a href=&#34;http://www.amazon.com/gp/product/1591842697/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=1591842697&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=NJ42CVES4P6F7FEA&#34;&gt;The Back of the Napkin: Solving Problems and Selling Ideas with Pictures&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=1591842697&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;toc_0&#34;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Rock stars are dead. Ninjas are banished. There are simply too many trashed hotel rooms, dead bodies and failed
projects. The age of the individual superhero coder is over.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But if we’re still striving for excellence, what’s replaced the rock-star-ninja-hero programmer?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The team. The team that’s greater than the sum of its parts. Like The Avengers, but with less latex.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In the same way those without super powers, genius levels of intelligence and pots of money were vital to The
Avengers, every developer, no matter how much or how little experience they have, brings something important to the
team and has the potential to make it better: a nicer place to work, an openness to learning, a focus on clean code or a deeper understanding of the business’ needs.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;How can a collection of good developers become a super-performing business-impact-delivering team? What do you, as
an individual, add to the mix?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Daniel and Trisha will share stories of individuals and teams who have made an impact (both good and bad!) and offer
  suggestions for steps we, as individuals, can take to level up our teams.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 1 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session1/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session1/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Sevilla Java User Group&lt;/a&gt; is working together towards completing the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt; on
lambdas and streams. As part of this, we&amp;rsquo;re running &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223677436/&#34;&gt;three sessions&lt;/a&gt;
during the course so we can, as a group, ask  questions about the lectures, get help with the homework, and (if we&amp;rsquo;re
feeling very smart!) help people who may be struggling (or might not have watched the videos).&lt;/p&gt;

&lt;p&gt;Last night we had the first session which went really well. We had a small-ish group, about half of whom had
completed the homework and the quiz (for the first lesson) and half had not. We worked through the homework exercises
together, saw how there were multiple solutions for each problem, and explored how to balance conciseness with
longer, more descriptive code.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;First offline session for lesson 1 of the lambdas and streams mooc &lt;a href=&#34;https://twitter.com/hashtag/java8?src=hash&#34;&gt;#java8&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/40gradosAlaSombra?src=hash&#34;&gt;#40gradosAlaSombra&lt;/a&gt; &lt;a href=&#34;http://t.co/hJgPrLl3C5&#34;&gt;pic.twitter.com/hJgPrLl3C5&lt;/a&gt;&lt;/p&gt;&amp;mdash; SVQ JUG (@SVQJUG) &lt;a href=&#34;https://twitter.com/SVQJUG/status/623199430158778368&#34;&gt;July 20, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;On the whole people thought the videos for the course were very clear and well-explained, although we also went
through how to run the videos at 1.5 speed, as most people wanted to run through them faster! I thought the pace of the
videos was especially good for those who aren&amp;rsquo;t so comfortable with listening in English, and it&amp;rsquo;s easy to add
subtitles and speed it up if you feel comfortable with the material.&lt;/p&gt;

&lt;p&gt;The first lesson covers lambdas, and their use in some of the new Java 8 methods (specifically on collections, but
&lt;em&gt;not&lt;/em&gt; streams).&lt;/p&gt;

&lt;p&gt;The areas we discussed most, the ones that needed more clarity were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/FunctionalInterface.html&#34;&gt;Functional Interfaces&lt;/a&gt;:
what does &lt;a href=&#34;https://dzone.com/articles/introduction-functional-1&#34;&gt;Single Abstract Method (SAM)&lt;/a&gt; really mean? Also, we
were interested in the &amp;ldquo;exception&amp;rdquo; of methods declared on &lt;code&gt;Object&lt;/code&gt; as well as an interface (e.g. &lt;code&gt;equals()&lt;/code&gt;), but we
came
to the conclusion that it was easier to simply think of looking for only one method without any form of
implementation at all - methods defined on &lt;code&gt;Object&lt;/code&gt; must have an implementation, since &lt;code&gt;Object&lt;/code&gt; is not an
abstract class or interface.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html&#34;&gt;Method References&lt;/a&gt;: we looked at
examples of the three types that aren&amp;rsquo;t constructor references, what they look like in lambda form and how they
differ. Method references are&amp;hellip; not difficult to understand, but do look a bit awkward in the code if you&amp;rsquo;re not
used to them, and can be confusing as all your types, parameters and return values disappear.&lt;/li&gt;
&lt;li&gt;Parallel execution: The first lesson talks a lot about how lambdas are here to make parallelisation and
concurrency easier for developers, so obviously there was a question about how the code in the homework examples would
be executed in a multi-CPU environment. I assumed (although I&amp;rsquo;m waiting for clarification) that methods like
&lt;code&gt;removeIf&lt;/code&gt; are not parallelised, since in the case of Streams you have to explicitly state you want to go parallel.
We also talked a bit about
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#parallel--&#34;&gt;parallel()&lt;/a&gt; and
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Collection.html#parallelStream--&#34;&gt;parallelStream()&lt;/a&gt;, even
though the lesson didn&amp;rsquo;t cover Streams at all. We wanted to understand a bit more about the pros and cons of going
parallel.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, I also snuck in some demos of &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&amp;rsquo;s&lt;/a&gt; awesomeness, including
its magical support for creating lambdas and turning things into (and from) method references.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/java8mooc/ReplaceWithMethodReferenceMac.gif&#34; alt=&#34;Converting code to Java 8&#34; title=&#34;Converting code to Java 8&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;It was a great, collaborative session, with most people getting a chance to demonstrate their code (if they wanted
to!). And at the end we had solutions to the five exercise problems and had discussed all the areas people wanted
more clarity on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Interviewed by InfoQ</title>
      <link>https://trishagee.github.io/post/interviewed_for_infoq/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/interviewed_for_infoq/</guid>
      <description>&lt;p&gt;While I was at QCon New York (probably my business conference this year!) I was
interviewed by Ralph Winzinger for InfoQ. It felt like a short interview at the time,
but we covered a lot of ground - Java 8, Java vs other JVM languages, the effectiveness
of the JCP, and the future of Java.&lt;/p&gt;

&lt;p&gt;Video and the transcript are &lt;a href=&#34;http://www.infoq.com/interviews/trisha-gee-java-eco-system&#34;&gt;available on InfoQ&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My Path To Evangelism</title>
      <link>https://trishagee.github.io/post/becoming_an_evangelist/</link>
      <pubDate>Thu, 02 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/becoming_an_evangelist/</guid>
      <description>&lt;p&gt;So, I get asked a lot about how I got into technical advocacy /
evangelism&lt;sup&gt;1&lt;/sup&gt;,
so it seems like the most cost-effective way to answer this question is to
write a post about it. Warning: it&amp;rsquo;s a long one!&lt;/p&gt;

&lt;p&gt;Firstly, let me caveat this (I always have caveats, don&amp;rsquo;t I?) with, &amp;ldquo;this is
my personal experience&amp;rdquo;.  There may be other ways to get into this role.&lt;/p&gt;

&lt;p&gt;Any long-time readers of the blog (I love you guys!!) will
know that I started blogging before I did any of this
running-around-the-world-speaking-at-conferences lark.  I started blogging
for a number of reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Even &amp;ldquo;back then&amp;rdquo; (probably around 2007), it was definitely an advantage to
have something external to the day job to differentiate you from other job
candidates.  I didn&amp;rsquo;t feel comfortable with open source, Stack Overflow
wasn&amp;rsquo;t invented yet (and even if it had been, I&amp;rsquo;m not sure I would have felt
knowledgeable enough to answer questions), and most of what I had learnt in
order to level-up my skills
was via blogs like &lt;a href=&#34;http://www.joelonsoftware.com/&#34;&gt;Joel Spolsky&amp;rsquo;s&lt;/a&gt; and
&lt;a href=&#34;http://randsinrepose.com/&#34;&gt;Rands in Repose&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I really enjoyed writing. One of the (many) things I had wanted to be
&amp;ldquo;when I grew up&amp;rdquo; was a writer or a journalist. I didn&amp;rsquo;t take that path
because I thought if I did I would be Poor Forever.  However, if I started
practising my writing in a blog, I would learn to find my voice, and have
something to show book publishers if I ever did get around to writing a
book, like I had always wanted to do.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If  you&amp;rsquo;ve ever started a blog, you know the problem is thinking of things to
write about. I generally documented things I&amp;rsquo;d had difficulty getting
working, because a) if I had trouble with the existing documentation, other
people would too and b) I have a memory like a goldfish, so it would be
useful for me if nothing else. But it took me years to really take the blog
seriously.&lt;/p&gt;

&lt;p&gt;At the end of 2008, I joined the
&lt;a href=&#34;http://www.meetup.com/Londonjavacommunity/&#34;&gt;London Java Community&lt;/a&gt;, largely
because I had returned to London from a year working in New York, and a) I needed a new job (during
the height of the crisis, when my recent experience was all financial
markets!) and b) although I had friends in London, I needed to rebuild my
social networks, and I was using meetup.com to do this. I tried lots of other
meetup groups, but like many geeks, I found it hard to connect to people
without the common ground of tech or code to talk about.&lt;/p&gt;

&lt;p&gt;Eventually I ended up working for &lt;a href=&#34;http://www.lmax.com/&#34;&gt;LMAX Exchange&lt;/a&gt;, and
because we were always looking
for keen, bright developers, I started getting much more involved in the LJC
so that I could help us hire people I actually wanted to work with. During
this time, people like &lt;a href=&#34;https://twitter.com/karianna&#34;&gt;Martijn&lt;/a&gt;,
&lt;a href=&#34;https://twitter.com/kittylyst&#34;&gt;Ben&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jr0cket&#34;&gt;John&lt;/a&gt;
and, of course, &lt;a href=&#34;https://twitter.com/bcrecworks&#34;&gt;Barry&lt;/a&gt; were
encouraging me, consciously or not, to do a bit of technical presenting. I saw
a lot of different talks there, some from professional evangelists from
vendors, but many from &amp;ldquo;ordinary&amp;rdquo; developers like me. It made me think that
a) I should do this (awesome for your profile/career etc) and b) I &lt;em&gt;could&lt;/em&gt;
do this.&lt;/p&gt;

&lt;p&gt;Of course, I saw very few women presenting (I do remember an
awesome presentation from &lt;a href=&#34;https://twitter.com/fabianenardon&#34;&gt;Fabiane&lt;/a&gt;) and
also very few women members. Many members
assumed I was a recruiter, even before I started trying to chat to people
to, well, recruit them for LMAX. In the first 2 minutes of meeting someone,
if they didn&amp;rsquo;t ask me directly if I was in recruitment or HR, I would always
make it clear that I was a Java developer. It was tedious but something I
just got used to. Interestingly, once it was clear I was a Java person,
people seemed to accept that and just treat me like any other techie.&lt;/p&gt;

&lt;p&gt;I think this is one of the reasons I decided to start doing presentations - I
could a) show my own technical credentials, so I would spend less time having
these tiresome conversations (which, by the way, seems to have worked) and
b) make it more normal to see women techies, hopefully minimising the number
times other women faced the same assumptions (I&amp;rsquo;m not sure if this worked or
not, as I only have my own experiences to look at).&lt;/p&gt;

&lt;p&gt;But these thoughts were only floating around my mind, I didn&amp;rsquo;t actually
&lt;em&gt;do&lt;/em&gt; anything.  During this time, while working at LMAX, it seemed like there were lots of
things I &lt;em&gt;could&lt;/em&gt; blog about, or talk about, but I never really got round to it.
Plus, I wasn&amp;rsquo;t really sure what I was allowed to talk about and what I shouldn&amp;rsquo;t be
talking about. So apparently during these two years I only wrote a total of 6
posts, and I never did a single presentation at the LJC.&lt;/p&gt;

&lt;p&gt;However, I really wanted to do presenting and have time/inspiration for the
blog, so I chose to leave LMAX and join
&lt;a href=&#34;http://www.thoughtworks.com/&#34;&gt;ThoughtWorks&lt;/a&gt; - they were looking for
consultants and I knew this was a company that valued blogging and
presenting, and I&amp;rsquo;d had some exposure to their guys through the LJC and,
years before, I&amp;rsquo;d seen them speaking at
&lt;a href=&#34;http://mechanitis.blogspot.com.es/2007/03/qcon-london.html&#34;&gt;QCon London&lt;/a&gt;,
which had actually been my initial inspiration for blogging.
I told LMAX that was why I was leaving, and off I went.&lt;/p&gt;

&lt;p&gt;So it&amp;rsquo;s 2011, and I&amp;rsquo;ve joined ThoughtWorks. I revived the blog while I was
unassigned to a project, I invested that time in porting the blog to a
more sensible platform, and trying to write a blog a day. Again, I picked
topics I could comfortably talk about - I spoke about my experiences as a
&lt;a href=&#34;/post/my_experiences_with_android_development/&#34;&gt;beginner trying Android for the first
time&lt;/a&gt; (sometimes people will be arsey
with beginners, but in reality many real human beings can&amp;rsquo;t tell you you&amp;rsquo;re
wrong when you&amp;rsquo;re just talking about your own experiences), and despite my
original intent to blog with zero gender identity (I was genuinely afraid
that if I wrote about tech subjects and I was wrong, or very junior, I would
give women programmers a bad name) I decided to blog about &amp;ldquo;the women in
technology subject&amp;rdquo;. Again, here I went for my personal opinion/experiences,
for which only mean people can criticise you (mean people are easier to
ignore than correct people :) )&lt;/p&gt;

&lt;p&gt;I was also fortunate enough to meet &lt;a href=&#34;http://martinfowler.com/&#34;&gt;Martin Fowler&lt;/a&gt;
in person while he was over
in London. We were talking over drinks (this is London, after all) about the
women in technology thing (ThoughtWorks are really big on this subject, and
determined to do something positive in this area), and I was complaining about
the lack of women at a particular conference. He asked me if I had submitted
a talk for the conference.  Me?? Of course not! I&amp;rsquo;m not ready for that! I&amp;rsquo;ve
got nothing to talk about. I haven&amp;rsquo;t been given permission to do this, or
guidance on how to do it. I haven&amp;rsquo;t even presented at the user group yet. But
it did make me think - I said I wanted to present, so what was stopping me?
Did I need someone to guide me through it, to assign it to me as a task? It
was going to be up to me to make this happen. And if Martin Fowler, who
had just met me 5 minutes beforehand, thinks I&amp;rsquo;m ready to do this, then who&amp;rsquo;s
to tell me I&amp;rsquo;m not? What&amp;rsquo;s the worst that could happen?&lt;/p&gt;

&lt;p&gt;Of course life then got in the way - I was assigned to a couple of projects,
so the blogging stopped. I was interested in attending or
speaking at conferences, but wasn&amp;rsquo;t going to have anything ThoughtWorksy to
talk about for quite a while. And now, because I was commuting to my assigned
project, I had very little time even for the LJC.&lt;/p&gt;

&lt;p&gt;At this point, LMAX called
to let me know that the talk they&amp;rsquo;d done at QCon San Francisco,
&lt;a href=&#34;http://www.infoq.com/presentations/LMAX&#34;&gt;&amp;ldquo;How to Do 100K TPS at Less than 1ms Latency&amp;rdquo;&lt;/a&gt; had been
enormously popular, and they were open sourcing
&lt;a href=&#34;https://github.com/LMAX-Exchange/disruptor&#34;&gt;The Disruptor&lt;/a&gt; and wanted to do
some evangelism around this - did I want to come back and help a) do
evangelism and b) co-ordinate the company&amp;rsquo;s evangelism?  Yes, yes I did. So,
after just 3 months, I quit TW and went back to LMAX&lt;sup&gt;2&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Back at LMAX, I started to take evangelism more seriously.&lt;/p&gt;

&lt;p&gt;I tried to blog every week - I set aside Sundays for blogging (at the time
I was, fortunately for my particular choices, single and not overburdened
with a social life outside of the LJC). I wasn&amp;rsquo;t going to sit all alone in my
tiny flat, so I&amp;rsquo;d go to the pub with my shiny new Macbook Air, bought
specially for blogging (thanks ThoughtWorks, you spoiled me - I needed a mac
after I&amp;rsquo;d invested 3 months getting to grips with the one you gave me) and
write &lt;em&gt;something&lt;/em&gt;. It wasn&amp;rsquo;t always amazing, but I&amp;rsquo;d do something. During the
week, when ideas came to me, I&amp;rsquo;d make a note of the title in the blogging
tool so that when Sunday came I&amp;rsquo;d pick one and go with it.  Early on it was
fairly easy - we&amp;rsquo;d released a white paper on the Disruptor, but I found it
hard to understand what it really meant, so I spent Sundays writing shorter
articles breaking down how it worked and how to use it. I needed a LOT of
help from &lt;a href=&#34;http://www.real-logic.co.uk/about.html&#34;&gt;Martin Thompson&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/mikeb2701&#34;&gt;Mike
Barker&lt;/a&gt; to understand it, but they were patient
with me (plus I think they were happy that &lt;em&gt;someone&lt;/em&gt; was writing this and it
didn&amp;rsquo;t
have to be them). They took the heavier, more complicated subjects and I
pitched my stuff at developers like myself. When I ran out of Disruptor
stuff, I moved on to the topics I had in the backlog - I generally had more
ideas for blogs than time to blog, so I ended up with quite a long list to
pick from. The key is to make a note of it at the time you think of it, and
not try and think of a topic when you sit down with time to blog.&lt;/p&gt;

&lt;p&gt;I coordinated our events and publicised them on the new LMAX blog I&amp;rsquo;d created.
&lt;a href=&#34;https://twitter.com/davefarley77&#34;&gt;Dave Farley&lt;/a&gt; was often presenting on
something Continuous Delivery related since
&lt;a href=&#34;http://amzn.to/1NyUQ53&#34;&gt;his book&lt;/a&gt; had been released, and Martin was talking
about hardcore concurrency stuff.&lt;/p&gt;

&lt;p&gt;Mike and I got even more involved in the LJC, not just to recruit people.  We
got involved in the JCP and OpenJDK - since LMAX was doing cutting edge
technology stuff with Java, we wanted to see where the language was going
and influence it too if possible.&lt;/p&gt;

&lt;p&gt;Martijn must&amp;rsquo;ve got fed up my lack of drive in the presenting area, as he
pretty much forced me to do my first presentation.  In a
nice way! But he told me I was ready, he checked my content before I did it,
and I did a short talk on the JCP.&lt;/p&gt;

&lt;p&gt;At this point, my plan was to spend this first year of presenting doing short
talks at the JUG, maybe work my way up to a longer talk by the end of the year, or maybe
the following year, then the year after that to submit to conferences.&lt;/p&gt;

&lt;p&gt;Well, with amazing mentors like mine, that didn&amp;rsquo;t happen. Martin Thompson was
due to
give a talk at JavaOne at the end of that year (still 2011), and I was lucky
enough to get a ticket at the last minute (we won the &lt;a href=&#34;https://www.java.net/dukeschoice/2011&#34;&gt;Duke&amp;rsquo;s Choice Award
for Innovative Programming Framework&lt;/a&gt;,
and LMAX was awesome enough to let me have the ticket to the
conference to receive the award, since the evangelism efforts and blogging
had had a direct influence on us winning this award). Martin
asked if I wanted to co-present with him. Of course this was terrifying! I
hadn&amp;rsquo;t even done a full length talk at the LJC, I had barely even been to a
conference, let alone presented at the largest Java conference In The World!
So I said yes. These opportunities do not come up every week. It&amp;rsquo;s a talk
Martin had given various times before, he would be there to pick up the slack
if I freaked out, and I knew this material, I&amp;rsquo;d been blogging about it and
answering questions for the last 6 months.&lt;/p&gt;

&lt;p&gt;It really was as terrifying as I thought.  But.  It went well. I answered
difficult questions. We got great feedback.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/post/javaone_2011_roundup/&#34;&gt;JavaOne 2011&lt;/a&gt;
was an important milestone in my evangelism career.  Not only
did I get to put this presentation on my CV, I got to meet a lot of people in
this network: Martin introduced me to a lot of high performance specialists;
Martijn and Ben introduced me to people involved in the JCP, to other Java
User Group leaders, and we somehow got in to the O&amp;rsquo;Reilly party -
I finally got to meet a book publisher and get one step closer to my dream
of writing a book. I also met the ladies behind &lt;a href=&#34;http://jduchess.org/&#34;&gt;Duchess&lt;/a&gt;,
and they introduced me to
&lt;a href=&#34;https://twitter.com/Stephan007&#34;&gt;Stephan&lt;/a&gt; who runs Devoxx. This turned out
to be an important step in turning an idea I had for a panel into a Devoxx
reality.&lt;/p&gt;

&lt;p&gt;This is October.  By the end of the year I had also presented at &lt;a href=&#34;/presentation/video_of_our_jax_london_session/&#34;&gt;JAX London
with Mike&lt;/a&gt;, and at
&lt;a href=&#34;/post/why_we_shouldnt_target_women/&#34;&gt;Devoxx Belgium on a panel&lt;/a&gt;,
largely thanks to the contacts I
had made and the prestige of having a JavaOne talk under my belt.  So I went
from basically zero at the start of that year (my blog had been dormant for
years and I had no experience presenting) to having a blog with thousands of
hits a month and being an &amp;ldquo;international conference speaker&amp;rdquo;. In many ways I
got lucky, because the Disruptor was a really interesting, technical topic
that is in an area developers feel they should understand (high performance).
But I believe it was more a) determination to make this work, even if it
meant using my own time to write blogs and prepare presentations and b)
fantastic mentors who pushed me to do it and opened up their networks to me,
that facilitated this rapid rise.&lt;/p&gt;

&lt;p&gt;Honestly, after that things were a lot easier - I had the experience
presenting at conferences, I had Martin and Martijn suggesting conferences to
me (and introducing me to the right people where appropriate), which got me
into the QCon/GOTO loop and into OSCON. With videos of my presentations
availble, combined with the reach of my blog, I also had people approaching
me to do other events, like user groups in the cities I was visiting, and
conferences I had never heard of.  I think it helped that I&amp;rsquo;m a woman,
because conferences are always actively looking to increase their diversity
(whatever it might seem like at times!), but I think that anyone could follow
these sorts of steps with a similar outcome.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not going to talk much about my career after that, because really that&amp;rsquo;s
the tipping point - after that it was more of the same, really. I will say
that I left LMAX because the pressure to be a full time developer &lt;em&gt;and&lt;/em&gt; do
advocacy is hard, especially when you&amp;rsquo;re no longer single and you don&amp;rsquo;t have
the spare time you used to have. I joined
&lt;a href=&#34;https://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt; because they were well known for
understanding the technical community, and because they were looking for an
evangelist who would continue to be an engineer (although not for 40 hours a
week every week). I think they might have hired me without the previous
experience, but the blogging and presenting experience was a big selling
point for the guy who became my boss.  I eventually left
them for &lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;JetBrains&lt;/a&gt; because you learn, over
time, what your sweet spots are as an advocate/educator, and what your
interests are. After two years of MongoDB, I knew I really wanted to focus
on Java and the JVM, and JetBrains is a much better fit for that. I&amp;rsquo;m pretty
certain I would &lt;em&gt;not&lt;/em&gt; have got this job without a) having the
conference-presenting experience and therefore b) being known to the team
already through the conference circuit.&lt;/p&gt;

&lt;p&gt;Well. That was a massive post. That&amp;rsquo;s why I&amp;rsquo;ve been putting off
writing this for ages. That&amp;rsquo;s just my own story, I have another post in my
head about the challenges that face you on trying to sell the value of
evangelism/advocacy to your organisation (and maybe some suggestions). But
that&amp;rsquo;s for another day.&lt;/p&gt;

&lt;p&gt;In closing, I shall try to leave you with take-away points that I hope will
be helpful if you either want to become a technical advocate, or are interested
in just some aspects, like writing or presenting:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Join a user group.  I cannot, &lt;em&gt;cannot&lt;/em&gt; stress how important the LJC was to
my career. If you do nothing else, this is the one thing that can help you.
You will meet people who will inspire you or give you the kick up the
backside you need. Try to remember that many of these people, like me, were
developers like you before they became bloggers/authors/speakers. If they
can, you can. These people also have networks, and whether you like it or
not, it really is not what you know but who you know (but don&amp;rsquo;t let that put
you off - meeting the right people can be easier than becoming some sort of
super-expert!)&lt;/li&gt;
&lt;li&gt;Present at the user group. Preferably get them to video it - you can use
this in submissions to conferences, if it&amp;rsquo;s not a blind CFP they will like to
see examples of your style. Having an example, even one that you think isn&amp;rsquo;t
awesome, is much, much better than having nothing at all. (Also, and this is
not a blog post about becoming a better speaker, but do watch your own
videos - it&amp;rsquo;s &lt;em&gt;insanely&lt;/em&gt; painful the first few times, but it gets easier and
will help you to improve).&lt;/li&gt;
&lt;li&gt;Be prepared to commit your own time to this. I blogged and prepared talks
at weekends, even for companies that valued evangelism. I gave up evenings
to attend the user group.  This will be
especially important in the early days when you probably have a day job too.
This investment should pay off, either your company will learn to see the
value of it and give you more time (having developers attend and speak at the
LJC was enormously successful for recruitment for LMAX), or you will get a
job better suited to what you want to do.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t have to have something awesome to talk about. I got lucky with
the Disruptor, true. But our most in-demand topics at the Sevilla Java User
Group are &amp;ldquo;Introduction to&amp;hellip;&amp;rdquo; topics, especially for things that are
no-longer cutting edge - not all developers were early adopters, and now they
need an overview of &amp;ldquo;why NoSQL&amp;rdquo; or &amp;ldquo;what&amp;rsquo;s Docker&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;You don&amp;rsquo;t have to be awesome. Your blog doesn&amp;rsquo;t have to be perfect English
(especially if you&amp;rsquo;re not a native). It just needs to clearly describe the
thing you&amp;rsquo;re trying to explain. You don&amp;rsquo;t
have to be &lt;a href=&#34;http://www.infoq.com/author/Damian-Conway&#34;&gt;Damian Conway&lt;/a&gt;(one of
my favourite presenters) when you speak - in my experience, a presenter
can get away with either &lt;em&gt;only&lt;/em&gt; great content or &lt;em&gt;only&lt;/em&gt; great delivery, you
actually don&amp;rsquo;t need both. I&amp;rsquo;ve been to conferences where presenters haven&amp;rsquo;t
really had either - you have to start somewhere, and audiences are
surprisingly forgiving (especially at user groups).&lt;/li&gt;
&lt;li&gt;Find mentors. Listen to them. You might not even meet them, you can watch
what they do. But I&amp;rsquo;d encourage you to find real human beings who are a step
or two closer to where you want to be. Talk to them, let them know what you
want. And let them bully you into doing scary things.&lt;/li&gt;
&lt;li&gt;Be yourself. Figure out your strengths and interests, and play to them. I
was scared of being a woman developer on show, via the blog or via
conferences, but it turns out to be an advantage. I was afraid that because
I&amp;rsquo;m not Martin Thompson I can&amp;rsquo;t possibly talk about difficult technical
subjects. But I don&amp;rsquo;t have to be him, I can be me - I can explain things to
the level that I need to understand them, so other developers like me can
catch up with me. We don&amp;rsquo;t need to all be genius-level.&lt;/li&gt;
&lt;li&gt;Do things that scare you. The terrifying things are the things that got me
the furthest.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I hope this helps someone.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt;Evangelism / Technical Advocacy - I use these terms fairly
interchangeably. Evangelism was the common name some years back, but many
are uncomfortable with the religious overtones, so instead prefer Advocacy.&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt; This is why I often talk about being at ThoughtWorks for a
minute and a half - I really loved a lot of things about the company, but what
I really wanted to do was offered to me in a company I already knew, where I
could get going straight away without any ramp up&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
