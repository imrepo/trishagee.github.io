<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on Trisha Gee </title>
    <link>https://trishagee.github.io/index.xml/</link>
    <language>en-us</language>
    <author>Trisha Gee</author>
    <rights>Copyright (c) 2011 - 2014, Trisha Gee; all rights reserved.</rights>
    <updated>Mon, 02 Apr 2018 00:00:00 UTC</updated>
    
    <item>
      <title>Being a Developer Advocate at JetBrains</title>
      <link>https://trishagee.github.io/post/my_job/</link>
      <pubDate>Mon, 02 Apr 2018 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/my_job/</guid>
      <description>&lt;p&gt;&lt;em&gt;Mandatory initial exclamation about how little I have blogged here lately.  Over a year without
updates, oh dear!  But a) I have been blogging quite a lot for the
&lt;a href=&#34;https://blog.jetbrains.com/idea/author/trishagee/&#34;&gt;IntelliJ IDEA&lt;/a&gt; and
&lt;a href=&#34;https://blog.jetbrains.com/upsource/author/trishagee/&#34;&gt;Upsource&lt;/a&gt; blogs, and b) I had another
baby, which kept me quite busy.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So on that topic (more or less) I get a lot of questions about my job: what&amp;rsquo;s involved in the
job, what&amp;rsquo;s it like working for JetBrains, what does a Developer Advocate do, what&amp;rsquo;s it like
working remotely etc etc.  Given I also rather generously&lt;sup&gt;1&lt;/sup&gt; recently offered to answer
people&amp;rsquo;s questions about my job, I thought the most scalable way was to write-once-read-many,
i.e. write it in a single blog post for everyone to read.&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Also, if you&amp;#39;re vaguely contemplating a move into an advocacy-type role and interested to find out what&amp;#39;s involved (and/or if it will suit you) feel free to Tweet/DM/e-mail me with questions and I&amp;#39;ll do my best to brain-dump my experience onto you&lt;/p&gt;&amp;mdash; Trisha Gee (@trisha_gee) &lt;a href=&#34;https://twitter.com/trisha_gee/status/979014330631979010?ref_src=twsrc%5Etfw&#34;&gt;March 28, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This is a Very Long Post.  It&amp;rsquo;s also a bit of a brain dump and is not well organised, sorry.  I
take comfort in the fact that if you don&amp;rsquo;t care about the role you won&amp;rsquo;t read it, and if you do
care you&amp;rsquo;re probably interested in all this.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;One of the most common questions I get is &amp;ldquo;How does one become a Developer Advocate?&amp;rdquo;. I&amp;rsquo;ve already
written about &lt;a href=&#34;/post/becoming_an_evangelist&#34;&gt;My Path to Evangelism&lt;/a&gt;, which covers how I got into
this job.  My route is not the only route, but at the bottom of that post there are some things you
can do to a) see if you like doing this kind of thing b) improve your skills in this area and c) get the
 experience and visibility you need to make it easier for someone to hire you to do this
 professionally.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What do I do?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a &lt;a href=&#34;https://www.linkedin.com/in/trishagee/&#34;&gt;Developer Advocate for JetBrains&lt;/a&gt;. Developer
Advocates/Evangelists come in various different shapes and sizes depending upon the individual
and the organisation.  At JetBrains advocates do advocacy first and foremost (see the next
section which explains a bit about what I mean).  For me, this means I:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Physically go to &lt;em&gt;conferences&lt;/em&gt; and &lt;em&gt;give presentations&lt;/em&gt;.  I prefer live coding demos, because I
think a) it makes me look clever and b) it showcases the tools nicely. This is not a requirement
of the role, it&amp;rsquo;s something I personally chose because I thought it was good for my personal
&amp;ldquo;brand&amp;rdquo; (this is linked a bit to the fact that I&amp;rsquo;m a female developer, more on that later).
&lt;a href=&#34;https://twitter.com/hhariri&#34;&gt;Hadi&amp;rsquo;s&lt;/a&gt; talks are more varied than mine, he has plenty that aren&amp;rsquo;t
specifically code-related.&lt;br /&gt;
From JetBrains point of view, if you&amp;rsquo;re out at conferences giving popular talks, that makes
the company look good.&lt;/li&gt;
&lt;li&gt;While I am physically in a country/city I may also seek out &lt;em&gt;user groups&lt;/em&gt; and &lt;em&gt;customers&lt;/em&gt; to go
and see. This is not a requirement of the job, but it&amp;rsquo;s something I want to do more of and get
better at.  It&amp;rsquo;s very effective and fairly limited extra overhead to also give the same talk you&amp;rsquo;re
giving at some conference to the local user group and some customers.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Customer meetings&lt;/em&gt;. When I originally took this role,
I thought I&amp;rsquo;d be doing a bit of consulting as part of the job, e.g. going to a customer and
trouble-shooting their TeamCity installation or running tailored training courses on IntelliJ
IDEA.  I&amp;rsquo;ve been here three years and I haven&amp;rsquo;t done that.  I have, however, done pre-sales
trips to demo a particular product (usually &lt;a href=&#34;https://www.jetbrains.com/upsource/&#34;&gt;Upsource&lt;/a&gt; and answer questions about it: what does
it do, how does it scale, where will it fit into this company&amp;rsquo;s process, etc. I&amp;rsquo;ve only
physically had to travel for these a couple of times, usually a company is more than happy to
have me present this via a private webinar.  These webinars can sometimes be to a huge number of
developers (hundreds), more usually to 10-20 techies, occasionally just to one or two people.
Whether it&amp;rsquo;s a webinar or a physical meeting, I always, always have backup to help me with
things I don&amp;rsquo;t know.  I&amp;rsquo;m a technical advocate, I understand how to use the tool really well. I
don&amp;rsquo;t necessarily know everything on the roadmap (that&amp;rsquo;s usually the PMM), nor do I know all
the technical limitations (a lead techy will know this). It scares me a bit going into these
meetings knowing that I don&amp;rsquo;t know everything, but sometimes I have someone with me (either
physically at the meeting or online with me during the webinar) and I always have someone
available via Slack to answer any questions I don&amp;rsquo;t know the answer to. I don&amp;rsquo;t believe my
credibility has suffered when I&amp;rsquo;ve said &amp;ldquo;I don&amp;rsquo;t know the answer to that, let me quickly find
out&amp;rdquo;, especially when there&amp;rsquo;s almost always a fast response. If there&amp;rsquo;s no adequate response
there and then, I make a note of the question and promise to get back to them. I usually end
the meeting by repeating the next steps and listing the information I believe I have to find
out for them, and always follow up with an email. If the answers were quick to find, all the
answers will be in the follow up email. If the answers are still pending, I will tell them
that in the quick response and get back to them later with the answers (e.g. I don&amp;rsquo;t leave
them hanging with no response, it looks bad.)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Webinars&lt;/em&gt;.  I&amp;rsquo;m not a fan of giving webinars, it&amp;rsquo;s like doing a conference presentation, only
with
waaaaay more real-time viewers and almost zero real-time feedback. It&amp;rsquo;s like talking into the
void.  Some people like giving webinars precisely because they CAN&amp;rsquo;T see the audience.  I used
to hate them because the lack of feedback is very unnerving, but with practice (like anything)
I&amp;rsquo;ve become more comfortable with them.  I probably give maybe 3 public webinars a year (like my
upcoming &lt;a href=&#34;https://blog.jetbrains.com/idea/2018/03/live-webinar-java-10-and-intellij-idea/&#34;&gt;webinar on Java 10&lt;/a&gt;, and maybe 6 or so private ones a year.  These numbers may be
totally incorrect, but that&amp;rsquo;s what it feels like.  The public webinars are frequently one of my
conference talks just presented online, the private ones are less formal/practiced and may be
something like a short-ish live demo (10-20 mins) followed by questions and further
customer-driven demos (i.e. &amp;ldquo;can you show me how you&amp;hellip;?&amp;rdquo;)&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Screencasts&lt;/em&gt;. I hadn&amp;rsquo;t done any screencasts before I came to JetBrains and they&amp;rsquo;re a totally
different skillset.  Not only do you have to learn how to use a brand new tool (I use Camtasia)
that requires a set of skills you probably don&amp;rsquo;t have already (i.e. video editing), but putting
together a 5 minute video of features is a VERY different thing to taking 40-60 minutes exploring
a concept in real-time with an audience. You have to work out up-front what it is you&amp;rsquo;re trying
to demo, figure out a sensible real-world use case for it, and then record the video and
narration that effectively shows this to users. I record those two things separately and edit
them together, others like to record the whole lot together. Because this area in particular is
one where probably most of the team was new to the skills needed, we&amp;rsquo;ve shared our knowledge a
few times here to try and improve ourselves and to try to get some consistency in approach. I
quite like doing screencasts because they&amp;rsquo;re a good way to poke at particular features in a tool,
and I like finding the use case that makes the feature make sense. But they can be quite a lot
of work. A screencast like my
&lt;a href=&#34;https://youtu.be/szlAxgchyXU&#34;&gt;VCS features in IntelliJ IDEA 2018.1&lt;/a&gt; can take less than a day
to
put together (most of which is editing), because this is an area of the tool I know well, and I
have a lot of example projects that showcase different use cases of Git workflows.  A
screencast on Spring features is more likely to take 2 or more days, most of which is locating
the right sort of code example that shows the features. It&amp;rsquo;s an area of the tool I haven&amp;rsquo;t used
much in a real development environment, a framework I&amp;rsquo;m familiar with but again don&amp;rsquo;t use
much, and also a framework that moves very rapidly, so I spend a lot of time getting up to
speed on the new parts of the framework and finding examples.  Screencasts generally fall into
two categories.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s New in {Product} {Version} (e.g. &lt;a href=&#34;https://www.youtube.com/playlist?list=PLPZy-hmwOdEXtJTNC65GCuw8f7sR13UK9&#34;&gt;IntelliJ IDEA 2017.2&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;More &lt;a href=&#34;https://www.youtube.com/playlist?list=PLPZy-hmwOdEXdOtXdFzyx_XCnrF_oD2Ft&#34;&gt;general tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Blogging&lt;/em&gt;. I love writing. It&amp;rsquo;s what got me into this. It&amp;rsquo;s why this blog post is SO much
longer than it really ought to be. For JetBrains I blog about:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;New releases/features for IntelliJ IDEA and Upsource (e.g. &lt;a href=&#34;https://blog.jetbrains.com/idea/2017/12/intellij-idea-2017-3-debugger-improvements/&#34;&gt;IntelliJ IDEA 2017.3: Debugger
Improvements&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Topics related to the tool but aren&amp;rsquo;t necessarily features of the tool (e.g.
&lt;a href=&#34;https://blog.jetbrains.com/idea/tag/code-smells/&#34;&gt;Code Smells&lt;/a&gt; for
IntelliJ IDEA, &lt;a href=&#34;https://blog.jetbrains.com/upsource/tag/code-review-workflows/&#34;&gt;Code Review Processes&lt;/a&gt; for Upsource)&lt;/li&gt;
&lt;li&gt;A specific topic that&amp;rsquo;s relevant to readers of the blog that either is relevant at a
particular time (e.g. &lt;a href=&#34;https://blog.jetbrains.com/idea/2017/09/java-9-and-intellij-idea/&#34;&gt;Java 9 and IntelliJ IDEA&lt;/a&gt;), or is something I&amp;rsquo;ve discovered myself
(&lt;a href=&#34;https://blog.jetbrains.com/idea/2017/10/creating-multi-release-jar-files-in-intellij-idea/&#34;&gt;Creating Multi-Release JAR Files in IntelliJ IDEA&lt;/a&gt;) or&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/tag/java-annotated/&#34;&gt;Annotated monthly&lt;/a&gt;: takes me a day every
month to put together the newsletter, but it&amp;rsquo;s worth it as it forces me to stay up to date.&lt;/li&gt;
&lt;li&gt;Or sometimes something that I think is interesting or cool and is vaguely
development-/Java-related.
I probably average 1-2 blog posts a month.  Probably not that much actually, it depends a lot on my travel and other workloads.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Twitter&lt;/em&gt;. I have access to Tweet on &lt;a href=&#34;https://twitter.com/intellijidea&#34;&gt;intellijidea&lt;/a&gt; and
&lt;a href=&#34;http://twitter.com/upsource_jb&#34;&gt;upsource_jb&lt;/a&gt;. I&amp;rsquo;m not the only one behind
those handles though. I post links to the videos, blog posts and other content I produce, and I
also create content for the &lt;a href=&#34;https://twitter.com/hashtag/DriveToDevelop?src=hash&#34;&gt;Twitter Tips&lt;/a&gt;
for both of those products. I use Camtasia to record
short videos and convert them to GIFs.  The most painful part of this process is thinking of
something interesting to Tweet about.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I also &lt;em&gt;Tweet from my own personal account&lt;/em&gt;. As I have gained more followers I have been more
and more careful/restrained about what I Tweet from there. I recently realised these days I
retweet a lot and occasionally tweet things I think are interesting to developers. I spend less
and less time ranting on there or making personal observations, although I would quite like to
bring back a more personal element to my Tweets.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Theoretically I also &lt;em&gt;answer questions via
Twitter/&lt;a href=&#34;https://stackoverflow.com/users/653519/trisha&#34;&gt;StackOverflow&lt;/a&gt;/other social media&lt;/em&gt; about
our
tools.  I don&amp;rsquo;t get around to doing this very often, I should work it into my schedule/routine,
but sometimes I find it takes a disproportionally long time to replicate a problem and work out a
fix, by which time someone else has already answered or the original user has worked it out. If
someone addresses me directly I always try to respond, even if it&amp;rsquo;s just to ask someone to file
a ticket in YouTrack.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;em&gt;Admin&lt;/em&gt;.  I actually have to do quite a lot of mundane admin stuff.  Part of it might be because
of my particular perfectionism, part of it might be because my situation really does require it.
For example, I have to book my own travel for a lot of the conferences, usually this means
flights and accommodation. I tried a travel agent for this, but I found a lot of the
complications were not around the actual booking process, but coordinating with everyone (my
family included) which times/days work best, am I bringing the family, am I going to do customer
visits, which customers might want to see me, when works for them etc. Also since I&amp;rsquo;m
travelling from Seville, we do have an airport but I&amp;rsquo;m very limited for flight choices, which
always bites me even though it&amp;rsquo;s five years since I was spoiled by living in London.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;How are the advocates organised at JetBrains?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;When I was at MongoDB, the Advocates were engineers who spent most of
their time working on language drivers for the database and some of their time blogging and
speaking at conferences.  At JetBrains, the Advocate position is a full time job doing the
advocacy stuff. We don&amp;rsquo;t report to engineering, we don&amp;rsquo;t report to marketing, our &lt;a href=&#34;https://www.linkedin.com/in/hadi-hariri-b0368a83/&#34;&gt;Boss Person&lt;/a&gt; reports directly to the CEO.&lt;/p&gt;

&lt;p&gt;The advocates all belong to the same team, but each advocate has their own product(s) and
specialties.  In terms of co-ordinating what we&amp;rsquo;re actually going to work on, we talk to the PMMs
 (Product Marketing Managers) for our product and they&amp;rsquo;ll let us know what they need from us.
 Each PMM and each product is different, so they have different interests/focuses/plans.  With
 IntelliJ IDEA I spend quite a lot of time working with the PMM on each of the 3 releases a year,
 and most of the rest of the content is driven by me: it&amp;rsquo;s either connected to something else I&amp;rsquo;m
  working on (like one of my conference talks) or a Java release or something. Working in this
  way is quite familiar if you&amp;rsquo;ve been a consultant: in this model, the PMM is basically my
  customer and not my manager.&lt;/p&gt;

&lt;p&gt;Physically, our team is almost entirely remote. The JetBrains development teams are based in St
Petersburg and Munich, which means that those of us on a European timezone have an easier time of
 it. Our American team members tend to be dragged out of bed earlier than they would probably
 like in order to dial in to meetings.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do I still code?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Yes and no. I don&amp;rsquo;t write enterprise code any more, and I don&amp;rsquo;t write code that goes into the
IntelliJ IDEA codebase.  I do, however, spend a good chunk of the year creating projects that
demonstrate particular things, and live-coding within these projects.  I also occasionally still
contribute to &lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt;, although mostly I use that as an
example code base to demo various things
- I love the Morphia code because it&amp;rsquo;s real lived-in code that is very similar to the sort of
code that real developers will be working with, it&amp;rsquo;s not just a nice clean toy project that bears
 zero resemblance to real life.&lt;/p&gt;

&lt;p&gt;On a weekly basis I don&amp;rsquo;t spend a lot of time coding, but every now and then I will devote a day
or two (or sometimes a week or two) to playing with something to scratch that itch.  This is
often used in blog posts or demos but sometimes it&amp;rsquo;s enough just to learn something new.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What did I need to learn on the job?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I had been doing advocacy before I got to JetBrains, but there were still plenty of things I
needed to learn or level-up when I got here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Screencasts: I had zero experience here, and I struggled to begin with. But then the whole
team had a number of discussions about how we did them. At first I was scared to talk about
didn&amp;rsquo;t know or what I was struggling with, but I found that when I opened up (both on Slack and
during one of our annual actual-face-to-face get togethers) about my pain points, I found a)
lots of the others struggle too and b) some people had answers that worked for me.  Also c)
turned out I knew things other people didn&amp;rsquo;t know, and that gave me a big confidence boost. A
lot of this is now documented on Confluence, so new people won&amp;rsquo;t have to struggle as much&lt;/li&gt;
&lt;li&gt;Webinars: I&amp;rsquo;d done two at MongoDB and I really didn&amp;rsquo;t like them.  For the first year at
JetBrains I still didn&amp;rsquo;t really like them, but we gather feedback from attendees and on the
whole people liked my webinars, and those that didn&amp;rsquo;t usually gave constructive feedback, so I
gained confidence and I think I&amp;rsquo;ve improved in this area too.  Also, it became clear I
absolutely had to pay a lot more for my home internet connection, since the major complaint was
always that my sound would frequently cut out or get out of sync. Now I have faster internet and
it&amp;rsquo;s made my (work) life all round much better.&lt;/li&gt;
&lt;li&gt;Self management: I&amp;rsquo;ve worked a lot at &amp;ldquo;proper&amp;rdquo; enterprises, where there&amp;rsquo;s a clear chain of
command.  I&amp;rsquo;ve also worked for consultancies, where customers have clear expectations of you.
I&amp;rsquo;ve worked at startups, at one of which my manager liked to micromanage everyone, down to the
lines of code they wrote. JetBrains is not like any of those.  It is genuinely a flat
organisation (as I mentioned above, there&amp;rsquo;s very little management between me and the head boss
person), and people are given the freedom to work on what they want to, more or less however
they want to.  This can be quite a change if you&amp;rsquo;re used to formal management.  It&amp;rsquo;s even more
difficult when you&amp;rsquo;re remote, because you have to speak to a lot of individuals to figure out
what&amp;rsquo;s happening when where and how.  On the plus side, you&amp;rsquo;re trusted to get on with your job
(and expected to ask for help and support when you need it).  Self management is a skill, and
not everyone likes it.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;How much travel is involved?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Over the last 5 years of doing advocacy I have been to quite a lot of conferences.  Every year I
say I&amp;rsquo;ll do less, and every year I end up doing much more than I expected/wanted. Last year I &amp;ldquo;only&amp;rdquo;
did 7 events, and I was unable fly/on maternity leave for nearly 3 months.  That&amp;rsquo;s slightly more
than the one-every-other-month I wanted to do, but quite a bit less than previous years.  This year
I&amp;rsquo;m currently signed up for only two conferences, I expect that to at least double by the end of
the year.&lt;/p&gt;

&lt;p&gt;Not everyone travels as much as me though, many of the other advocates only do a couple a year.&lt;br /&gt;
This is something that is more or less up to you, although there are a couple of big conferences
through the year (for me at least) that are about as close to mandatory for me to attend as is
possible in this self-managed environment.&lt;/p&gt;

&lt;p&gt;I expect our technical writers won&amp;rsquo;t have to travel at all, except perhaps occasionally to the
office to connect with people.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What&amp;rsquo;s it like working remotely?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll be honest, it doesn&amp;rsquo;t suit everyone.  And there&amp;rsquo;s a skill to it too.  I tend to like to work
 10ish-6ish because if I don&amp;rsquo;t work normal office hours I&amp;rsquo;m worried I won&amp;rsquo;t be doing enough. I
 also track how much time I spend on things, mostly to see where all my time is spent on those
 weeks where I feel like I haven&amp;rsquo;t done anything.&lt;/p&gt;

&lt;p&gt;JetBrains uses Slack a lot, so us remote people do have a direct line to what&amp;rsquo;s going on, even
into the teams that are all sat together in an office.  The Developer Advocates have our own
Slack channel, of course, and that tends to be full of &amp;ldquo;witty banter&amp;rdquo; / water cooler conversation
.  It&amp;rsquo;s also the first place I go to ask questions about anything, and I&amp;rsquo;m no longer scared of
looking stupid if I ask a &amp;ldquo;dumb&amp;rdquo; question.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve &lt;a href=&#34;/post/adjusting_to_working_remotely&#34;&gt;worked remotely in the past&lt;/a&gt;, it&amp;rsquo;s better here than
other places because JetBrains
understands there are remote workers and that we have rights and needs. It&amp;rsquo;s also good for me
because I&amp;rsquo;m in Europe, so although I&amp;rsquo;m physically separate at least I don&amp;rsquo;t have the
&lt;a href=&#34;/post/tales_from_the_other_side_confessions_of_an_offshore_resource/&#34;&gt;timezone problem&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Working remotely is great for flexibility, of course.  And although I do try to work 10-6ish, in
my office upstairs where the children can&amp;rsquo;t get to me, I am around if one of them needs me
immediately. I also don&amp;rsquo;t have a commute, so my hours are a lot shorter than if I worked (for
example) in London. I don&amp;rsquo;t believe I could have gone back to work after just 4 months of
maternity leave if I had to work in an office - I&amp;rsquo;m still breastfeeding and this would have been
impossible if I didn&amp;rsquo;t work from home.&lt;/p&gt;

&lt;p&gt;Of course this has its pros and cons, working at home also comes with distractions (although it&amp;rsquo;s
 nice to be able to get the laundry done throughout the week rather than have to do it all at the
  weekend). Pros: a good excuse for a nice computer and exactly the desk / chair / office setup
  you want; close to the family and much more available than in an office. Cons: can be quite
  isolated, can be easily distracted, can be quite noisy (currently both the 5-month-old and the
  two-year-old are crying: is OK to be writing a blog now, would be a terrible time to record a
  screencast).&lt;/p&gt;

&lt;p&gt;Remote working is a big topic of its own.  If you&amp;rsquo;ve done it before, you know the deal.  And
JetBrains is better than most places because they recognise us as real workers. But also probably
 because the whole team is remote, so it&amp;rsquo;s not just one or two people cut off.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re in the process of working on an employee handbook which will help us remote people a lot
too, there&amp;rsquo;s a lot of knowledge stored in people&amp;rsquo;s brains that isn&amp;rsquo;t documented anywhere.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What is the team like?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There are a dozen or so advocates on the team, all with different technology backgrounds and
covering different tools.  Hadi and Svetlana cover Kotlin, which also tends to overlap with
IntelliJ IDEA. I do IntelliJ IDEA (I guess I&amp;rsquo;m the main IDEA advocate, I do all the release
material etc) and I&amp;rsquo;m the only one who really does Upsource, and have so far been nearly 100%
Java-the-language. Anton does TeamCity and because he&amp;rsquo;s Java &amp;amp; Kotlin there&amp;rsquo;s some overlap there
with IntelliJ IDEA.  Other team members cover C++, Python, Go, .NET, Web technologies (this last
is an area we&amp;rsquo;re looking for specific expertise) and related tools (Resharper, Rider, GoLand,
CLion, PyCharm, WebStorm) and I have probably forgotten a load of them too. I see us as
individuals doing a similar job but with surprisingly little overlap. This is one reason being
remote actually works for us, we don&amp;rsquo;t need to co-ordinate much. But we are trying to get better
at reusing stuff between tools, and/or taking other people&amp;rsquo;s ideas and content and reworking it
for our communities (for example, I stole a load of Paul&amp;rsquo;s PyCharm tip tweets and did them for
IntelliJ IDEA).&lt;/p&gt;

&lt;p&gt;The average age of the team is somewhere up in the late thirties.  I myself am just about to
cross into the 40s - eeeek!  We&amp;rsquo;re all experienced developers with an interest in our
technologies.  We&amp;rsquo;re laid back and passionate, which sounds like a weird combination but works
well for us. There&amp;rsquo;s no such thing as a stupid question in our team, and even though we don&amp;rsquo;t
work super closely on everything, we all support each other and do our best to make the team
happy and productive.  We definitely have room for improvement for working together (Gary and I
had fun recording our &lt;a href=&#34;https://youtu.be/o-2fvj7GsOQ&#34;&gt;series of Git videos&lt;/a&gt; but we haven&amp;rsquo;t managed
 to do anything similar since)
but it&amp;rsquo;s not because we don&amp;rsquo;t want to work together.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are the good parts?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being remote&lt;/li&gt;
&lt;li&gt;Managing myself&lt;/li&gt;
&lt;li&gt;Picking my own code projects&lt;/li&gt;
&lt;li&gt;Learning new technologies and tools&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;li&gt;Travel&lt;/li&gt;
&lt;li&gt;My office&lt;/li&gt;
&lt;li&gt;Where I live&lt;/li&gt;
&lt;li&gt;The coffee&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What are the bad parts?&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Being remote&lt;/li&gt;
&lt;li&gt;Managing myself&lt;/li&gt;
&lt;li&gt;Not having enough time to code&lt;/li&gt;
&lt;li&gt;Learning new technologies and tools&lt;/li&gt;
&lt;li&gt;Travel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Yep.  The plus sides are also the downsides.  I probably don&amp;rsquo;t have to explain why, but if anyone
 is interested in the specifics drop a note in the comments below.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;What are we looking for in a developer advocate / technical writer?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This was all sparked by our need to
&lt;a href=&#34;https://www.jetbrains .com/company/jobs/&#34;&gt;hire a couple of people&lt;/a&gt;, and wanting to be really transparent
 about what the role was like, ideally to attract people who might not have considered this role
 for themselves.&lt;/p&gt;

&lt;p&gt;JetBrains is currently
&lt;a href=&#34;https://www.jetbrains.com/company/jobs/&#34;&gt;hiring a bunch of people&lt;/a&gt;, but the two roles that
sparked this whole
conversation are a Web Technologies Developer Advocate and an Engineering Technical Writer. I&amp;rsquo;m
not the one making the hiring decisions, and on top of that there&amp;rsquo;s no real hard and fast rules
about what makes a good hire into these roles, but I think these things are interesting to
us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Ideally you will have at least 10 years of experience as a developer. You don&amp;rsquo;t need to have
been an architect/tech lead or other &amp;ldquo;senior&amp;rdquo; role, but you do need to have a very good
understanding of what it&amp;rsquo;s like to be a developer, what the pain points are for people in this
role, how developers use technology and how they learn it.  In our
writing / presentations / screencasts we try to present information in a way that makes
developers awesome at their jobs (see Kathy Sierra&amp;rsquo;s
&lt;a href=&#34;https://amzn.to/2EdyIOH&#34;&gt;Badass: Making Users Awesome&lt;/a&gt;), which means our content is usually
pretty technical and targeted at developers.  Having a good chunk of experience as a developer
makes this substantially easier.&lt;/li&gt;
&lt;li&gt;You use our tools. Yes, it&amp;rsquo;s possible for anyone to learn on the job.  As developers this is
pretty much all we do.  But it&amp;rsquo;s going to be much easier for you to talk about how our tools make
developer&amp;rsquo;s lives easier / improve people&amp;rsquo;s productivity if you&amp;rsquo;ve actually used the tools in
real life,
have really felt their benefits, and have a good enough understanding of how to use
them to look like a power user (at least in the context you&amp;rsquo;ll be showing them). You don&amp;rsquo;t have
to have used all of our tools all of the time, but to be a developer advocate of a particular
IDE, you really should have used that IDE to code in the day job and have used it as more than
just a text editor&lt;sup&gt;2&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Ideally you&amp;rsquo;ll have some public profile that demonstrates you are not only interested in some
technology community (ideally the one we&amp;rsquo;re hiring for, e.g. web technologies) but are active in
that community.  We&amp;rsquo;re not looking for Rock Star Ninja Fully-Established Famous Developers.  But
this role is very much about being visible to developers, so it would be nice to see that you are
capable of interacting with other techies in a community.  What do I mean by this? I mean you
don&amp;rsquo;t have to have tens of thousands of followers on Twitter &lt;em&gt;and&lt;/em&gt; thousands of points on
StackOverflow &lt;em&gt;and&lt;/em&gt; have been speaking at conferences for years &lt;em&gt;and&lt;/em&gt; be the leader of a user
group &lt;em&gt;and&lt;/em&gt; have an established blog &lt;em&gt;and&lt;/em&gt; have written a book. What we would like to see though
is maybe one (or more) of the following:

&lt;ul&gt;
&lt;li&gt;Have presented at a conference (ideally with a video so we can see your style)&lt;/li&gt;
&lt;li&gt;Active involvement in User Group(s) - e.g. organiser, regular presenter, active on mailing
list etc&lt;/li&gt;
&lt;li&gt;Have a technical blog&lt;/li&gt;
&lt;li&gt;Have a profile on StackOverflow which demonstrates the ability to provide valuable answers to
questions&lt;/li&gt;
&lt;li&gt;Have a GitHub (or similar) profile which showcases involvement in open source code and/or has
demo projects / code that other developers have found useful.&lt;/li&gt;
&lt;li&gt;Have a Twitter profile that shows an interest in relevant technologies, and that you post
content that&amp;rsquo;s valuable to other developers (e.g. re-tweeting/linking to interesting content)
To re-iterate: we&amp;rsquo;re not looking for you to have &lt;em&gt;all&lt;/em&gt; of these things, and there may be other
types of public (or public-ish) activity which is just as good.  The key point is that you are
involved in the technical community outside of the day job and that you have demonstrated that
you give back to this community in some way&lt;sup&gt;3&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Related to point three, you have to be able to demonstrate truly excellent communication
skills.  I have been involved in hiring developers at all sorts of organisations, and
communication skills is always seen as an important part of the role.  But for a role like this,
the job is almost entirely about communicating to people: to developers / architects / even
management about why and how to use our tools, and between you and the product marketing managers
for
the tool you&amp;rsquo;re the advocate for (more on that above).  Add to that the fact that we are
largely remote, it&amp;rsquo;s that much more difficult both to express what we mean to our colleagues and
to get a feel for what our colleagues are trying to tell us. You need to be able to communicate
potentially very technical ideas to other techies, you may need to be able to understand process
and talk about how a tool fits into a process (or what process works for a tool set), you need to
be able to work out with potentially multiple stakeholders what your priorities are and talk
honestly to set expectations.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Ability to be self-managed.  Our boss is the busiest man I know, and he really doesn&amp;rsquo;t want to
manage people.  He wants us to get on with our job, talking directly to the right people (like
the PMM, or the developers who worked on a specific feature) and only come to him when he&amp;rsquo;s
needed to unblock something.  This is another reason why the team is generally staffed with very
experienced people.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Call to women.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right, so, I didn&amp;rsquo;t really want to do this because I hate trying to suggest that different
genders have different needs by singling out a particular gender. I also have found that my
advice &amp;ldquo;for women&amp;rdquo; works really well for almost everyone anyway.&lt;/p&gt;

&lt;p&gt;But I do very specifically want to talk to &lt;em&gt;you&lt;/em&gt; if you are a woman developer (or other minority,
 but I can only speak from my experience of being a woman) and are even vaguely interested in
 developer advocacy as a career.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you think you maybe could do this, but you&amp;rsquo;re not ready yet, you probably are ready. For
every time you&amp;rsquo;ve thought you couldn&amp;rsquo;t present at a conference, think of those talks you&amp;rsquo;ve seen
where you&amp;rsquo;ve though &amp;ldquo;I could do that. I could do better than that.&amp;rdquo;. You don&amp;rsquo;t have to be
perfect straight away and you don&amp;rsquo;t have to be better than everyone immediately. You simply
have to be good enough.&lt;/li&gt;
&lt;li&gt;You already have the skills you need for managing the social media side of this job.  I had an
excellent question last week on Twitter about how I handle the fact that my Twitter feed is
effectively a public representation of JetBrains as a company. And I realised I don&amp;rsquo;t freak out
about this - partly because JetBrains is really cool about &amp;ldquo;the voice&amp;rdquo; of the company and is
happy to have us just being ourselves, but mostly because as a woman, particularly a woman
developer, I am already super-conscious of what I post, how I word things, how I appear on
social media. Doing this as a job required almost zero adjustment for me.&lt;/li&gt;
&lt;li&gt;My experience in the Java/JVM community has shown me being a woman is a massive advantage for
things like getting in to speak at conferences.  I&amp;rsquo;ve been on the programme committee for a
couple of conferences, and I&amp;rsquo;ve seen the CFPs generally dominated by submissions from men. We&amp;rsquo;ve
actively looked for those from women and generally said &amp;ldquo;yes&amp;rdquo; to them unless there was a
compelling reason not to.  You will often get emails from conference organisers saying &amp;ldquo;I&amp;rsquo;d
really love for you to submit to this conference because we don&amp;rsquo;t have enough women speakers&amp;rdquo;,
and while that particular approach makes me roll my eyes (what, you don&amp;rsquo;t care about the
content, you just care about my vagina?) it is something you can use to your advantage.  And to
be fair, they wouldn&amp;rsquo;t invite you if you were crap.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re worried about being taken seriously as a developer when you&amp;rsquo;re a woman, I can tell
you from my own personal experience that being semi-famous in this space has reduced the number
of &amp;ldquo;are you a real developer?&amp;rdquo; questions at conferences and events to zero. If you&amp;rsquo;ve got
&amp;ldquo;speaker&amp;rdquo; on your lanyard, if you&amp;rsquo;ve just given a live demo showing you can code, you no longer
have to prove yourself to anyone, it&amp;rsquo;s out there for everyone to see.&lt;/li&gt;
&lt;li&gt;I don&amp;rsquo;t want to draw attention to this side of things because I don&amp;rsquo;t want you to worry about
it if you hadn&amp;rsquo;t already thought about it, but it&amp;rsquo;s something that I was scared of right at the
beginning: I was worried I might get shit over Twitter or on the blog for being a woman.  So far
(fingers crossed) I haven&amp;rsquo;t had the sort of thing I was afraid of. I do get mansplained at
sometimes, and I do have to respond to idiots on Twitter.  But a) I see my (white, male)
colleagues suffering the same thing all the time and b) my team, JetBrains and even my Twitter
followers etc have my back.  I have a support network.  The fear is still real though.&lt;/li&gt;
&lt;li&gt;If there are more of us doing this job, there will be fewer people looking at the single woman
developer thinking she represents all women developers.  If half a dozen women&amp;rsquo;s voices are out
there, it becomes clearer we don&amp;rsquo;t all want the same things or work the same way, And That&amp;rsquo;s OK.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are a woman developer and are considering applying for this role, I urge you to please
apply.  And if you have any questions, queries, doubts etc, please do contact me directly.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;d really love to see more applications from women developers. That&amp;rsquo;s not to say we discourage
or dislike applications from men or that we&amp;rsquo;ll reject you if you&amp;rsquo;re not female, but if you are a
woman developer and are even marginally interested in this role, please, please go for it!&lt;/p&gt;

&lt;hr/&gt;

&lt;p&gt;&lt;sup&gt;1&lt;/sup&gt; It&amp;rsquo;s not generous at all, it&amp;rsquo;s totally self-serving for JetBrains since we&amp;rsquo;re trying
 to hire
developer advocates and technical writers&lt;br /&gt;
&lt;sup&gt;2&lt;/sup&gt; I was a power user of IntelliJ IDEA, and I had done live coding demos with it in the
past when I joined, and that was probably a large part of why I was hired.  However, I hadn&amp;rsquo;t used
Upsource or TeamCity before I came to JetBrains and I have done advocacy for both
tools, so you don&amp;rsquo;t need to be an expert in all JB tools. But the fact that I
had used other code review tools before and felt a LOT of pain while using them made Upsource a
joy to advocate, since it fixes so many of the pain points I&amp;rsquo;ve felt with other tools.  And the
fact that I&amp;rsquo;ve worked in Continuous Delivery environments, and had experience with Jenkins, also
made it easier for me to see where TeamCity fits, what it does well, why you might use it.&lt;br /&gt;
&lt;sup&gt;3&lt;/sup&gt; Now I have children I seriously appreciate that physically getting out to user group
events or
conferences is very challenging for developers who are parents.  That&amp;rsquo;s why this list also includes
things which are a little easier to do on what can laughably be called the &amp;ldquo;spare time&amp;rdquo; when the
children aren&amp;rsquo;t demanding 100% of your attention, e.g. blogs/Twitter/StackOverflow/mailing lists.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upcoming Events</title>
      <link>https://trishagee.github.io/presentation/upcoming_events/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/upcoming_events/</guid>
      <description>&lt;p&gt;While the list in the &lt;a href=&#34;/presentation/public_appearances/&#34;&gt;talks section&lt;/a&gt; of my blog covers past presentations,
this page should list my confirmed upcoming events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7 Mar&lt;/strong&gt;: QCon London - &lt;a href=&#34;https://qconlondon.com/london2018/presentation/boilerplate-code-really-so-bad&#34;&gt;Is boilerplate code really so bad?&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is boilerplate code really so bad?</title>
      <link>https://trishagee.github.io/presentation/boilerplate/</link>
      <pubDate>Wed, 21 Feb 2018 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/boilerplate/</guid>
      <description>

&lt;p&gt;It&amp;rsquo;s exhausting staying up to date with the evolution of Java and the myriad other JVM languages.  Is it worth it? What
do modern languages give us?&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Abstract&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Many JVM languages promote &amp;ldquo;less boilerplate code&amp;rdquo; as one of their selling points. Even updates to Java in recent years
 have removed unnecessary syntax. While this is clearly meant to be a Good Thing, many of us - particularly if we&amp;rsquo;ve been writing Java for a long time - think &amp;ldquo;so what?&amp;rdquo;. Our IDEs can generate code, and our brains get used to ignoring the stuff that doesn&amp;rsquo;t matter.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Is the removal of extraneous code from the syntax of a language necessary, or just a gimmick? How does it impact our
ability to write and read code?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this talk, Trisha will explore common coding scenarios using Java and Kotlin. We&amp;rsquo;ll see what a language designed for
 developer productivity looks like: what&amp;rsquo;s important for developers to write (and, more importantly, read) and what can
 be removed. We&amp;rsquo;ll also see how Java has evolved to improve our productivity as producers and consumers of code, and why staying up to date with the features of a language like Java can ultimately make your life easier.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Slides&lt;/h1&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Videos&lt;/h1&gt;

&lt;p&gt;The code examples from this talk are shamelessly reused from Hadi Hariri&amp;rsquo;s London Software Craftsmanship
Conference talk, &lt;a href=&#34;https://youtu.be/pAFiPjXEOtg&#34;&gt;The Importance of Syntax In Clean Code&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;toc_3&#34;&gt;Code&lt;/h1&gt;

&lt;p&gt;The code &lt;a href=&#34;https://github.com/trishagee/boilerplate&#34;&gt;lives here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Version information&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://qconlondon.com/london2018/presentation/boilerplate-code-really-so-bad&#34;&gt;QCon London&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Java&amp;trade; SE Runtime Environment 18.3 (build 10+45)&lt;/li&gt;
&lt;li&gt;Kotlin: 1.2.21&lt;/li&gt;
&lt;li&gt;IDE: IntelliJ IDEA 2018.1 EAP (Ultimate Edition) Build #IU-181.3986.9&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Resources&lt;/h1&gt;

&lt;h2 id=&#34;toc_6&#34;&gt;Java&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Java 5: &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/generics/index.html&#34;&gt;Generics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 7: &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/guides/language/type-inference-generic-instance-creation.html&#34;&gt;Diamond operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/IntStream.html&#34;&gt;IntStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 8: &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html&#34;&gt;Lambda Expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 9: &lt;a href=&#34;http://www.baeldung.com/java-9-optional&#34;&gt;More methods on Optional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 9: &lt;a href=&#34;http://openjdk.java.net/jeps/269&#34;&gt;Convenience Factory Methods for Collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java 10: &lt;a href=&#34;http://openjdk.java.net/jeps/286&#34;&gt;Local-variable type inference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/10/&#34;&gt;JDK 10 early access releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk/10/&#34;&gt;Java 10 Open JDK page&lt;/a&gt; (tracks which features are currently going into
Java 10)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk/11/&#34;&gt;Java 11 Open JDK page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://openjdk.java.net/jeps/302&#34;&gt;JEP 302: Lambda Leftovers (including underscore for param)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://openjdk.java.net/jeps/305&#34;&gt;JEP 305: Pattern Matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://openjdk.java.net/jeps/325&#34;&gt;JEP 325: Switch expressions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java??: &lt;a href=&#34;http://cr.openjdk.java.net/~briangoetz/amber/datum.html&#34;&gt;Data Classes for Java&lt;/a&gt; and &lt;a href=&#34;https://www.infoq.com/news/2018/02/data-classes-for-java&#34;&gt;Brian Goetz on Data Classes
for Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_7&#34;&gt;Kotlin&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/data-classes.html&#34;&gt;Data Classes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/lambdas.html&#34;&gt;Lambdas and higher order functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/properties.html&#34;&gt;Properties (var/val)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/equality.html&#34;&gt;Equality (== vs ===)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/typecasts.html&#34;&gt;Type Checks and Casts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/null-safety.html&#34;&gt;Null Safety&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/control-flow.html&#34;&gt;when&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/functions.html#default-arguments&#34;&gt;Default arguments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html&#34;&gt;Sequences&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/ranges.html&#34;&gt;Ranges&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kotlinlang.org/docs/reference/collections.html&#34;&gt;Collections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;Other&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2017/08/code-smells-null/&#34;&gt;Null is a Code Smell&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_9&#34;&gt;Presented at&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/SVQJUG/events/247799741/&#34;&gt;JUG&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Real World Java 9</title>
      <link>https://trishagee.github.io/presentation/real_world_java_9/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/real_world_java_9/</guid>
      <description>

&lt;p&gt;How is Java 9 going to change the way developers work?&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;The feature we always hear about whenever Java 9 is in the news is Jigsaw, modularity.  But this doesn&amp;rsquo;t scratch the same developer itch that Java 8&amp;rsquo;s lambdas and streams did, and we&amp;rsquo;re left with a vague sensation that the next version might not be that interesting.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Java 9 actually has a lot of great additions and changes to make development a bit nicer.  These features can&amp;rsquo;t be lumped under an umbrella term like Java 8&amp;rsquo;s lambdas and streams, the changes are scattered throughout the APIs and language features that we regularly use.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this presentation Trisha will show, via live coding:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;What the Java Platform Module System is and how to make your code modular&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;The improvements to the Streams API that make it easier to control infinite streams&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;How the Collections convenience methods simplify code&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;Along the way we&amp;rsquo;ll bump into other Java 9 features, including some of the additions to interfaces and Optional, and a number of other small changes that make coding in Java a bit nicer than it was before.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;These are all the available videos, with the most recent at the top.  Usually, the more recent the talk the more polished, therefore usually they&amp;rsquo;re better.  With this talk, it&amp;rsquo;s more a case of showcasing / focusing on different aspects in different versions.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/QqmQ_0tV978&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This JetBrains webinar is the most up-to-date version of the talk, and includes more Java 9 features than any of the
others, including a quick look at JShell. It has almost no content on Reactive Streams though, so check out one of
the other videos if this is what you&amp;rsquo;re interested in.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/QAssmRMXMXo&#34;&gt;vJUG, September 2017&lt;/a&gt;.  Lucky to have 90 minutes to cover the material.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/watS54iWH9U&#34;&gt;GOTO Amsterdam&lt;/a&gt;. Less reactive streams, less Jigsaw, marginally more time for the &amp;ldquo;other&amp;rdquo; Java 9 features.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/wZLDDx-5KJg&#34;&gt;J on the Beach, Malaga&lt;/a&gt;. Pretty much the same as the DevoxxUK version.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/GkP83hvdeMk&#34;&gt;DevoxxUK&lt;/a&gt;. More focus on Jigsaw / Java Modules.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/java9-flow-stream-api&#34;&gt;QCon London&lt;/a&gt;. Much more focus on Reactive Streams: what they are, how they work, and how to migrate an app to use the Reactive Streams API.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/5WKfdU7WjMOQkd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;These are the latest slides.  For earlier versions, see &lt;a href=&#34;https://www.slideshare.net/trishagee/&#34;&gt;Slideshare&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;The code for this presentation was originally created to demonstrate Java 8 code in
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 in Anger&lt;/a&gt;, take a look at the videos there to see more background on the application and how it used Java 8 Streams and Lambda Expressions for the core business logic. The code and the presentation
evolved &lt;a href=&#34;https://youtu.be/sKozumGWAOo&#34;&gt;to include some Java 9 features&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have another Java 9 talk based off this code, &lt;a href=&#34;/presentation/java_9_are_we_there_yet&#34;&gt;Anticipating Java 9 - Functionality and Tooling&lt;/a&gt;, which demos more individual Java 9 features and talks specifically about IntelliJ IDEA&amp;rsquo;s support for it.&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Articles &amp;amp; More Detail&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;ve expanded upon the examples in this presentation in a couple of articles about adopting Java 9:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Java Magazine: &lt;a href=&#34;http://www.javamagazine.mozaicreader.com/JulyAug2017#&amp;amp;pageSet=17&amp;amp;page=0&#34;&gt;Migrating from Java 8 to Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;InfoQ: &lt;a href=&#34;https://www.infoq.com/articles/Java-Jigsaw-Migration-Guide&#34;&gt;Painlessly Migrating to Java Jigsaw Modules - a Case Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JetBrains Blog: &lt;a href=&#34;https://blog.jetbrains.com/idea/2017/10/real-world-java-9/&#34;&gt;Real World Java 9 Summary and FAQs&lt;/a&gt;
in this blog post I answer audience questions about the module system mostly, some questions relate to other Java 9
features.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Code&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trishagee/sense-nine&#34;&gt;https://github.com/trishagee/sense-nine&lt;/a&gt;.
The full application with all Java 9 code is currently under the
&lt;em&gt;working-system&lt;/em&gt; branch, the presentation builds off the code in &lt;em&gt;start_point&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Original Java 8 code comes from &lt;a href=&#34;https://github.com/trishagee/sense&#34;&gt;https://github.com/trishagee/sense&lt;/a&gt;, the &lt;em&gt;master&lt;/em&gt; branch has the most up-to-date final working Java 8 application.  JUnit 5 tests come from the &lt;em&gt;junit-5&lt;/em&gt; branch. Java 8 and 9 features live side-by-side in &lt;em&gt;yow-brisbane&lt;/em&gt;. That app was built with Java build 9-ea+146, but does not work with build 9-ea+156&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;IntelliJ IDEA&lt;/h3&gt;

&lt;p&gt;The earliest version of this talk runs on IntelliJ IDEA 2017.1, which supports
Jigsaw much better than pre-2017 versions.  However, I&amp;rsquo;m currently using
&lt;a href=&#34;https://www.jetbrains.com/idea/nextversion/&#34;&gt;2017.3 EAP&lt;/a&gt;, as this has the best support for Java 9/JPMS
and also a basic version of the &lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161611&#34;&gt;Java Console&lt;/a&gt;.
Read a &lt;a href=&#34;https://blog.jetbrains.com/idea/2017/09/java-9-and-intellij-idea/&#34;&gt;summary of the Java 9 support in IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a 5-minute version of IntelliJ IDEA&amp;rsquo;s support for modularity, watch
&lt;a href=&#34;https://twitter.com/jonnyzzz&#34;&gt;@jonnyzzz&lt;/a&gt;&amp;rsquo;s
&lt;a href=&#34;https://youtu.be/UNg9lmk60sg?t=6903&#34;&gt;demo during the JavaOne Keynote&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Java 9&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/jdk9-downloads-3848520.html&#34;&gt;Oracle&amp;rsquo;s JDK 9&lt;/a&gt; or &lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;OpenJDK&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/whatsnew/toc.htm&#34;&gt;What&amp;rsquo;s New in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oracle.com/java/java9-screencasts.html&#34;&gt;Java 9 Expert Insights&lt;/a&gt; series of short videos&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jdk9/&#34;&gt;JDK 9 Project Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;Download JDK 9 EA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.rainfocus.com/oracle/oraclecode17/sess/1485992822413001Yd6N/PF/Cool%20in%20Java%208,%20and%20new%20in%20Java%209.pdf&#34;&gt;What is cool in Java 8 and new in 9&lt;/a&gt;(Slides: Java 9 content starts at Slide 40)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/ultimate-guide-to-java-9/&#34;&gt;The Ultimate Guide to Java 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-i/&#34;&gt;Inside Java 9 – Version Schema, Multi-Release JARs, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-ii/&#34;&gt;Inside Java 9 – Performance, Compiler, and More&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3169388/java-language/java-9s-other-new-enhancements-part-2.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 2: Milling Project Coin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://download.java.net/java/jdk9/docs/index.html&#34;&gt;Java Platform Standard Edition 9 Early Access Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://download.java.net/java/jdk9/docs/api/overview-summary.html&#34;&gt;Java 9 Javadoc&lt;/a&gt; (note the new search feature!)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Jigsaw / JPMS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/&#34;&gt;Project Jigsaw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/261&#34;&gt;JEP 261: The Java Platform Module System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Quick Start Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/spec/sotms/&#34;&gt;The State of the Module System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mreinhold.org/blog/jigsaw-module-system&#34;&gt;Project Jigsaw: The module system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/Latest-Project-Jigsaw-Usage-Tutorial&#34;&gt;Programming with Modularity and Project Jigsaw. A Tutorial Using the Latest Early Access Build&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2015/11/first-steps-with-java9-jigsaw-part-1&#34;&gt;First steps with Java 9 and Project Jigsaw – Part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codecentric.de/en/2015/12/first-steps-with-java9-jigsaw-part-2/&#34;&gt;First steps with Java 9 and Project Jigsaw – Part 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joda.org/2017/04/java-9-modules-jpms-basics.html&#34;&gt;Java 9 modules - JPMS basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joda.org/2017/04/java-se-9-jpms-modules-are-not-artifacts.html?m=1&#34;&gt;Java SE 9 - JPMS modules are not artifacts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.joda.org/2017/04/java-se-9-jpms-module-naming.html&#34;&gt;Java SE 9 - JPMS module naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/doc/ModulesAndJavac.pdf&#34;&gt;Modules and javac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_9&#34;&gt;jlink&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;docs.oracle.com/javase/9/tools/jlink.htm&#34;&gt;jlink Reference Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idrsolutions.com/2017/05/java-9-jlink-explained-in-5-minutes/&#34;&gt;Java 9 jlink Explained in 5 Minutes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The Jigsaw &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Quick Start Tutorial&lt;/a&gt; also has a section on jlink&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_10&#34;&gt;Migrating to Java 9 (and Jigsaw)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/migrate/&#34;&gt;Java 9 Migration Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/czhSo8rotC4&#34;&gt;Migrating to Modules&lt;/a&gt; (video) Highly recommended.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codefx.org/java/dev/how-java-9-and-project-jigsaw-may-break-your-code/&#34;&gt;How Java 9 And Project Jigsaw May Break Your Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mail.openjdk.java.net/pipermail/jigsaw-dev/2017-March/011763.html&#34;&gt;The Jigsaw &amp;ldquo;kill switch&amp;rdquo;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/tools/jdeps.htm#JSWOR690&#34;&gt;jdeps Tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_11&#34;&gt;Reactive Programming and RxJava&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reactive-streams.org/&#34;&gt;Reactive Streams API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reactive-streams.org/announce-1.0.0#implementations&#34;&gt;Reactive Streams Implementations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.oracle.com/docs/DOC-1006738&#34;&gt;Reactive Programming with JDK 9 Flow API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ReactiveX/RxJava/wiki&#34;&gt;RxJava Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/rxjava2-by-example&#34;&gt;RXJava2 by Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.vogella.com/tutorials/RxJava/article.html&#34;&gt;RxJava 2.0 - Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/rxjava-for-easy-concurrency-and-backpressure&#34;&gt;RxJava for easy concurrency and backpressure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.danlew.net/2016/06/13/multicasting-in-rxjava/&#34;&gt;Multicasting in RxJava&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/streams-jdk&#34;&gt;Reactive Streams, j.u.concurrent, &amp;amp; beyond!&lt;/a&gt; (video)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spring.io/blog/2016/04/19/understanding-reactive-types&#34;&gt;Understanding Reactive Types&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/rolandkuhn/reactive-streams&#34;&gt;Reactive Streams: Handling Data-Flow the Reactive Way&lt;/a&gt;(slides)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/reactor-by-example/&#34;&gt;Reactor by Example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_12&#34;&gt;Multi-Release JAR Files&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/238&#34;&gt;JEP 238&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/inside-java-9-part-i/#multireleasejars&#34;&gt;Simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thoughtfulsoftware.wordpress.com/2016/08/22/java-9-multi-release-jar-files-part-ii/&#34;&gt;Multi-release JAR files tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_13&#34;&gt;Stack-Walking API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/259&#34;&gt;JEP 259&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/deep-dive-into-java-9s-stack-walking-api/&#34;&gt;Deep Dive into the Stack-Walking API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3188289/core-java/java-9s-other-new-enhancements-part-5-stack-walking-api.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 5: Stack-Walking API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_14&#34;&gt;Process API&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/jeps/102&#34;&gt;JEP 102&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.javaworld.com/article/3176874/java-language/java-9s-other-new-enhancements-part-3.html&#34;&gt;Java 9&amp;rsquo;s other new enhancements, Part 3: The Process API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iteratrlearning.com/java/2017/03/12/java9-process-api.html&#34;&gt;Java 9 Process API: The Shape of Things to Come&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_15&#34;&gt;JShell (the REPL)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm&#34;&gt;JShell User&amp;rsquo;s Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://openjdk.java.net/projects/kulla/&#34;&gt;REPL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jclarity.com/2015/04/15/java-9-repl-getting-started-guide/&#34;&gt;Java 9 REPL – Getting started guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_16&#34;&gt;HTML5 Javadoc&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.voxxed.com/2016/10/java-9-series-html5-javadoc/&#34;&gt;Java 9 series: HTML5 and Javadoc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.idrsolutions.com/2017/05/how-html5-javadocs-in-java-9-will-make-your-life-easier/&#34;&gt;How HTML5 Javadocs in Java 9 will make your life easier&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_17&#34;&gt;Other&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/gof-design-patterns-using-java-02&#34;&gt;GoF - Adapter Pattern&lt;/a&gt; (required to adapt between Java 9 Flow API and the Reactive Streams API)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Career Advice for Programmers</title>
      <link>https://trishagee.github.io/presentation/career_advice_for_programmers/</link>
      <pubDate>Fri, 12 May 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/career_advice_for_programmers/</guid>
      <description>

&lt;p&gt;One developer&amp;rsquo;s journey to find the perfect job.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Do you know how to remain a programmer? To avoid being “promoted” into
positions away from technology and code? Did they teach you at university
that you need social skills to be a good developer? What other skills do you
need that aren&amp;rsquo;t technical? Did you know that all development roles are not
created equal? Is it true that moving jobs a lot is a Bad Thing? In this
session, Trisha Gee (Java Champion, 2015 MongoDB Master, 2016 / 2014 / 2012
JavaOne Rock Star &amp;amp; Technical Advocate for JetBrains) will share some lessons
she learnt the hard way over nearly twenty years of managing her career as a Java developer. She&amp;rsquo;ll talk about what&amp;rsquo;s really important to developers when thinking about their careers, and give you tools for working out what your next steps are. If nothing else, you’ll get to laugh at the (many) mistakes I’ve made in my search for The Perfect Job.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/l8V7GYWY3pl2GG&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Videos&lt;/h2&gt;

&lt;p&gt;This talk has been videoed twice:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/LlAn452X4Lc&#34;&gt;GOTO Aarhus&lt;/a&gt;: this version of the talk
covers a wide variety of topics&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://yow.eventer.com/yow-2013-1080/career-advice-for-programmers-by-trisha-gee-1380&#34;&gt;YOW Australia&lt;/a&gt;: this
version has a better structure, but doesn&amp;rsquo;t cover as many topics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Other links&lt;/h2&gt;

&lt;p&gt;Links and resources mentioned in the talk are largely from my own blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://trishagee.github.io/post/life_on_both_sides_of_the_interview_table/&#34;&gt;Life on both sides of the interview table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/post/how_to_make_your_cv_not_suck/&#34;&gt;How to make your CV not suck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/post/staying_ahead_of_the_curve/&#34;&gt;Staying Ahead of the Curve&lt;/a&gt; (original blog post)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/presentation/staying_ahead_of_the_curve/&#34;&gt;Staying Ahead of the Curve&lt;/a&gt;(conference talk)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trishagee.github.io/presentation/becoming_buzzword_compliant/&#34;&gt;Becoming Fully Buzz Word Compliant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Becoming Fully Buzzword Compliant</title>
      <link>https://trishagee.github.io/presentation/becoming_buzzword_compliant/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/becoming_buzzword_compliant/</guid>
      <description>

&lt;p&gt;How do you keep your skills up to date in this fast-moving and turbulant
industry?&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Abstract&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;It’s all about Containers, Serverless and Reactive Programming right now!
ProgSCon London will explore these trends with leading industry experts. Several talks will also feature Blockchain, Microservices and Big Data.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;You’re here at ProgSCon to hear all about the latest trends in technology,
to learn about them and decide which ones to apply and figure out how. But
it’s a tall order, learning to be a fully buzzword compliant developer, architect or lead, especially when What’s Hot changes on practically a daily basis.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;During this talk, Trisha will give an irreverent overview of the current
technical landscape and present a survival guide for those who want to stay ahead in this turbulent industry.&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;toc_1&#34;&gt;Slides&lt;/h1&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/4uySiObJeca3dX&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h1 id=&#34;toc_2&#34;&gt;Resources&lt;/h1&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;News&lt;/h2&gt;

&lt;p&gt;These are the sources I mention in the talk and some of the tools I personally
use to help organise my news.  Definite slant towards the Java / JVM world.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sites&lt;/strong&gt;&lt;br /&gt;
You can subscribe to receive regular updates via email too if you prefer.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/&#34;&gt;InfoQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dzone.com&#34;&gt;DZone&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infoworld.com&#34;&gt;InfoWorld&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Newsletters&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://androidweekly.net/&#34;&gt;Android Weekly Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groovycalamari.com/&#34;&gt;Groovy Calamari Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.kotlinweekly.net/&#34;&gt;Kotlin Weekly Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scalatimes.com/&#34;&gt;Scala Times Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sitepoint.com/java/&#34;&gt;Sitepoint Java Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.baeldung.com/java-web-weekly/&#34;&gt;Baeldung Weekly Roundup&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://info.jetbrains.com/Java-Annotated-Subscription.html&#34;&gt;Java Annotated Monthly Newsletter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Tools&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://feedly.com&#34;&gt;Feedly&lt;/a&gt; - RSS Feed Aggregator&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://getpocket.com&#34;&gt;Pocket&lt;/a&gt; - Lets you save articles for reading
later, including offline.  Useful for commuting.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;More Info&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Blockchain&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;These are literally the first articles I found with the search &amp;ldquo;blockchain
bluffers guide&amp;rdquo;. I am in no position to qualify how good they are, but they
gave me enough of an overview to make me feel comfortable I wouldn&amp;rsquo;t make any
stupid mistakes in 2 minutes of mentioning Blockchain.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.forbes.com/sites/bernardmarr/2017/01/24/a-complete-beginners-guide-to-blockchain/#373d2d46e607&#34;&gt;A Complete Beginner&amp;rsquo;s Guide To Blockchain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dataconomy.com/2015/10/wtf-is-the-blockchain-a-guide-for-total-beginners/&#34;&gt;WTF is the Blockchain? A Guide for Total Beginners&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blockgeeks.com/guides/what-is-blockchain-technology/&#34;&gt;What is Blockchain Technology? A Step-by-Step Guide For Beginners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Reactive&lt;/strong&gt;&lt;br /&gt;
I&amp;rsquo;ve already listed resources for my research in this area in &lt;a href=&#34;/presentation/real_world_java_9&#34;&gt;Real World
Java 9&lt;/a&gt;, but these are particularly used in
this presentation:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/ideas/reactive-programming-vs-reactive-systems&#34;&gt;Reactive Programming vs Reactive Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Reactive_programming&#34;&gt;Reactive Programming Definition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://rxmarbles.com/&#34;&gt;RxMarbles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_5&#34;&gt;Credits&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://flic.kr/p/b99vsi&#34;&gt;Enigma Machine Photo: Adam Foster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/File:Technology-Adoption-Lifecycle.png&#34;&gt;Crossing the Chasm Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bamedia.co.uk/?pg=portfolio&amp;amp;sp=onboard&#34;&gt;BA Business Life Magazine Image&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://flic.kr/p/zhyKQx&#34;&gt;Terminator 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.bitcoin.it/wiki/Bitcoin_symbol&#34;&gt;Bitcoin Symbol&lt;/a&gt;, actual image
from &lt;a href=&#34;http://www.unicode.org/L2/L2015/15229-bitcoin-sign.pdf&#34;&gt;Proposal for addition of bitcoin sign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_6&#34;&gt;Related Presentations&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/presentation/staying_ahead_of_the_curve&#34;&gt;Staying Ahead of the Curve&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/presentation/yow_2013_career_advice_for_programmers&#34;&gt;Career Advice for Programmers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Anticipating Java 9 - Functionality and Tooling</title>
      <link>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/java_9_are_we_there_yet/</guid>
      <description>

&lt;p&gt;Looking ahead to what functionality is available in Java 9, and IntelliJ IDEA&amp;rsquo;s support (current and future) for it.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Seems like we’ve been waiting for Java 9 for eternity.  We’ve been hearing all about Jigsaw since Java 7, so we’ll be forgiven for thinking that’s the most interesting thing about the next Java release.  What we should be wondering is, will Java 9 it change the way we develop, like Java 8 did?  Will my tools break when I try to use it? Is it worth playing with it before it comes out, or should I just wait until everything stabilises?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;In this talk, Trisha will take a look at some of the features in Java 9, including modularity, the REPL, and the nice new Collections features.  Trisha will demonstrate, via live coding, these features in IntelliJ IDEA, and talk a bit about the current and future support for Java 9 in IntelliJ IDEA.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Video&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/eDV1JUMqMDU&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Slides&lt;/h2&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/ePGXu8U5H0CSh&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Resources&lt;/h2&gt;

&lt;p&gt;See also &lt;a href=&#34;/presentation/real_world_java_9&#34;&gt;Real World Java 9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://jdk.java.net/9/&#34;&gt;Download the latest Java JDK here&lt;/a&gt; (the
talk uses build 161).&lt;/p&gt;

&lt;p&gt;IntelliJ IDEA 2017.1
&lt;a href=&#34;https://blog.jetbrains.com/idea/2017/03/support-for-java-9-modules-in-intellij-idea-2017-1/&#34;&gt;introduced basic support for modules&lt;/a&gt;.
This support has evolved a little since then, I&amp;rsquo;m now using the
&lt;a href=&#34;https://www.jetbrains.com/idea/nextversion/&#34;&gt;2017.2 EAP&lt;/a&gt; to get the best support for Java 9.&lt;/p&gt;

&lt;p&gt;The Jigsaw code I used was from a workshop by Brian Goetz.  But to start playing with Jigsaw, take a look at
the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/quick-start&#34;&gt;Getting Started tutorial&lt;/a&gt;.  I used the &lt;a href=&#34;https://java.net/downloads/adoptopenjdk/REPL_Tutorial.pdf&#34;&gt;Java REPL
Tutorial&lt;/a&gt; to help me get started with JShell.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Help &amp;amp; Feedback&lt;/h2&gt;

&lt;p&gt;Get help and more information on JDK 9 from the
&lt;a href=&#34;https://community.oracle.com/community/java/java_desktop/java-se-early-access&#34;&gt;Oracle Community feedback forum&lt;/a&gt;. If you find a genuine
bug in the JDK, &lt;a href=&#34;http://bugreport.java.com/&#34;&gt;report it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can report bugs and request features for IntelliJ IDEA in
&lt;a href=&#34;https://youtrack.jetbrains.com/issues/idea/&#34;&gt;YouTrack&lt;/a&gt;. Some Java 9 tickets you may be interested in:&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161611&#34;&gt;IDEA-161611: Java REPL support for Java 9&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-154240&#34;&gt;IDEA-154240: IDEA should work with JDK module system&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-161641&#34;&gt;IDEA-161641: Produce JLink Artefacts&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_5&#34;&gt;More information&lt;/h2&gt;

&lt;p&gt;Joseph Darcy&amp;rsquo;s talk on
&lt;a href=&#34;https://youtu.be/vKYzmIi_1LM&#34;&gt;JDK 9 Language, Tooling and Library Features&lt;/a&gt; from JavaOne is a good summary of what&amp;rsquo;s coming (&lt;a href=&#34;https://blogs.oracle.com/darcy/resource/JavaOne/J1_2016-jdk9-lang-tools-libs.pdf&#34;&gt;slides
also available&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://static.rainfocus.com/oracle/oraclecode17/sess/1485992822413001Yd6N/PF/Cool%20in%20Java%208,%20and%20new%20in%20Java%209.pdf&#34;&gt;What is cool in Java 8 and new in 9&lt;/a&gt;(Slides: Java 9 content starts at Slide 40)&lt;/p&gt;

&lt;p&gt;The OpenJDK wiki provides &lt;a href=&#34;https://wiki.openjdk.java.net/display/Adoption/JDK+9+Outreach&#34;&gt;guidance on running your code with Java 9&lt;/a&gt;, and a
&lt;a href=&#34;https://wiki.openjdk.java.net/display/quality/Quality+Outreach&#34;&gt;list of libraries and frameworks who are currently testing against Java 9&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>What Can Men Do</title>
      <link>https://trishagee.github.io/post/what_can_men_do/</link>
      <pubDate>Fri, 04 Nov 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/what_can_men_do/</guid>
      <description>&lt;p&gt;So, I wrote a long email to the London Java Community in answer to an excellent question: &amp;ldquo;What can men do to support Women in Technology?&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a bit of a brain dump, by no means comprehensive, and is in answer to a specific question in a specific context, but I&amp;rsquo;ve been asked
to make the information public so it can be useful in a broader context.  So here it is.&lt;/p&gt;

&lt;p&gt;I know one of the reasons men feel strongly about this topic is because they do want to help and don&amp;rsquo;t always know how, and can feel
excluded when it&amp;rsquo;s just presented as a women&amp;rsquo;s issue.&lt;/p&gt;

&lt;p&gt;As I&amp;rsquo;ve said in the past, the &lt;a href=&#34;https://www.meetup.com/Londonjavacommunity/&#34;&gt;LJC&lt;/a&gt; was the community that mentored me, and those mentors
were largely men: Barry, Martijn, Ben Evans, John Stevenson to name a few. These guys were not only open and friendly and willing to
listen to me, they pushed me (hard!).&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have all the answers, of course, and there are lots of blogs and articles on the internet about this topic (if anyone finds any
they like, feel free to post as a comment for all to see), but for me personally, my male mentors:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Listened&lt;/em&gt; to me, and made me feel like I had a valid opinion.  They took things I said, assumed they were a valid hypothesis, and
made changes based on what I&amp;rsquo;d said.  I never felt like I had to change myself to fit in to the community.  Barry etc added different
types of events and different approaches to running events in order to accommodate feedback I&amp;rsquo;d given.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Pushed&lt;/em&gt; me - Barry included me in the Associates, simultaneously recognising my value to the community but also forcing me to be
more active in running it and applying changes I thought were important.  Martijn and Ben practically forced me to give short
presentations at the LJC well before I was ready. But they also gave me loads of support, suggesting topics, checking through my slides
in advance, giving me presentation hints and tips when I asked for them. They were right, I was ready, even when I felt like I wasn&amp;rsquo;t.
I&amp;rsquo;ve talked before about &lt;a href=&#34;becoming_an_evangelist&#34;&gt;how this helped my career&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Validated&lt;/em&gt; me - By co-presenting with me, these men who were more well known (maybe even respected ;) ) in the community (not just
the LJC, but the global Java Community) not only gave me support to launch my own presenting career, but they also validated, there on
stage, that I was someone to listen to.  Martin Thompson, Todd Montgomery, Dan North, as well as those I&amp;rsquo;ve mentioned have all gone out
of their way to co-present with me.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, in answer to the question:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;If you&#39;re interested in supporting a Women in [some technology] group specifically, please do reach out to the organiser. Check what 
 the goals are for the community, and offer support.&lt;/li&gt;  
 &lt;li&gt;If you&#39;re interested in supporting women in technology generally (or specific women you know), read the following points.&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
&lt;li&gt;This is for &lt;em&gt;everyone&lt;/em&gt;: When you see a woman at a technical event (community, conference, etc) &lt;em&gt;assume she&amp;rsquo;s a techie&lt;/em&gt;.  I cannot tell
you
the number of times a man I was talking to at an LJC event assumed I was a recruiter or in HR because I was female.  It is &lt;em&gt;far&lt;/em&gt; better to
assume the woman is a techie and be corrected if she is not, than to assume the other way around.  And, &lt;em&gt;please&lt;/em&gt; assume she is a
competent, senior techie.  Again, much better for a student to correct you and tell you she&amp;rsquo;s junior, than for you to assume a seasoned
architect is junior just because she&amp;rsquo;s female.  This is by far the easiest thing for you to change in your behaviour, and probably the
most valuable thing you can do for the community to encourage women to simply turn up and keep turning up.&lt;/li&gt;
&lt;li&gt;If you know someone who&amp;rsquo;s interested in presenting, suggest she co-presents with you at a User Group event, internal company brown
bag, community conference, etc.  This is a great way to get started.  Or suggest she does a lightning talk at a User Group (some
conferences also offer Quickies for inexperienced speakers). If your local user group doesn&amp;rsquo;t currently do lightning talks, I&amp;rsquo;m sure they
can be started if there&amp;rsquo;s interest.  If you have the expertise, offer to check slides, and/or be there for a run-though of the talk
in advance.  This can even be over Skype or hangouts, there&amp;rsquo;s no need to take loads of time to travel to meet in person&lt;/li&gt;
&lt;li&gt;If you know women who you think would be great at writing, but who haven&amp;rsquo;t started their own blog yet, offer a place for them to write
for/with you. If you have a blog, they can write a guest post for you.  Again, offer to check the content before it goes live.  All of us
are super nervous about our stuff being &amp;ldquo;good enough&amp;rdquo;, receiving the green light from someone else is a nice confidence boost and helps
us feel better about publishing something.&lt;/li&gt;
&lt;li&gt;Mentor a woman. This is for anyone, male, female, non-gender-specific. Mentoring includes some of the activities mentioned above. Or
it can be something more code-focused.  Or helping them learn to play the politics of career (and believe me, techie roles and
companies are still full of politics, especially if you want to get promoted). In fact, I recently read that what&amp;rsquo;s really needed for
women is Sponsorship, not Mentoring.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;male mentors tend to sponsor rather than just mentor—similar to the difference between coaching
and selling. In fact&amp;hellip; women may actually be over-mentored, but under-sponsored. And that sponsoring—advocating to get somebody a job
or promotion, mentioning their name in an appointments meeting, actively helping that person advance—is what makes the real difference
in women helping women get ahead&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.forbes.com/sites/peggydrexler/2014/03/04/can-women-succeed-without-a-mentor/#513dc3b542f6&#34;&gt;Forbes: Can Women Succeed Without A Mentor?&lt;/a&gt;&lt;br /&gt;
  You have to be senior and visible (either in the community or in your organisation) to sponsor, but it makes a big difference to women&amp;rsquo;s
careers. I remember the one time I had a male sponsor in one of my jobs is the only time I got a promotion.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Just be encouraging.  And while I personally have a real problem with being encouraging without sounding patronising (I dunno how to
say something that doesn&amp;rsquo;t sound patronising!), it&amp;rsquo;s really important you try to be positive without being patronising or mentioning
something gender related.  I&amp;rsquo;ve heard comments like &amp;ldquo;&lt;a href=&#34;https://web.archive.org/web/20120409030606/http://www.thedeveloperday.com/my-top-5-qcon-london-2012-talks/&#34;&gt;it would be enough to say this talk was delivered by a beautiful lady packed with a
room of geeks but it deserves more praise&lt;/a&gt;&amp;rdquo;
(er, thanks?) and &amp;ldquo;It&amp;rsquo;s so great to hear women give technical
presentations!&amp;ldquo;.  Hmm. I know that&amp;rsquo;s trying to be supportive but it does make you feel a bit&amp;hellip; like an outsider, some sort of weird zoo
animal. So, before you open your mouth, This One Simple Trick Can Save You From Embarrassment: would you say this to a man? If it would
sound silly aimed at a male, re-phrase it until it sounds sensible.&lt;/li&gt;
&lt;li&gt;If you&amp;rsquo;re in a position to give feedback (e.g. at work a direct report, 360 reviews, or in the community someone who requests
feedback), give actionable feedback.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Researchers have found that women receive more &lt;a href=&#34;https://hbr.org/2016/04/research-vague-feedback-is-holding-women-back&#34;&gt;vague feedback&lt;/a&gt;
and &lt;a href=&#34;http://fortune.com/2014/08/26/performance-review-gender-bias/&#34;&gt;personality criticism&lt;/a&gt; in
performance evaluations, whereas men receive actionable advice tied to business outcomes&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/tech-diversity-files/the-real-reason-women-quit-tech-and-how-to-address-it-6dfb606929fd#.a1hn4ztpy&#34;&gt;The Real Reason Women Quit Tech And How To Address It&lt;/a&gt;&lt;br /&gt;
As you can imagine, it&amp;rsquo;s much easier to improve with clear, actionable advice than with vague feedback.&lt;/p&gt;

&lt;p&gt;Really importantly, if a woman enjoys being technical, encourage her to stay technical.  Just because she has people skills as well doesn&amp;rsquo;t mean she should be promoted away from code to management, or moved into a Scrum Master position.  Just because she&amp;rsquo;s a woman presenting or writing about technology, does not mean she wants to present or write about being a woman in technology.&lt;/p&gt;

&lt;p&gt;Further reading:&lt;br /&gt;
I&amp;rsquo;ve already mentioned it, but this is excellent:
&lt;a href=&#34;https://medium.com/tech-diversity-files/the-real-reason-women-quit-tech-and-how-to-address-it-6dfb606929fd#.a1hn4ztpy&#34;&gt;The Real Reason Women Quit Tech And How To Address It&lt;/a&gt;.
It contains links to tonnes of research in this area.&lt;br /&gt;
&lt;a href=&#34;https://hbr.org/ideacast/2010/08/women-are-over-mentored-but-un.html&#34;&gt;Women Are Over-Mentored (But Under-Sponsored)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&#34;https://hbr.org/2010/09/why-men-still-get-more-promotions-than-women?referral=00134&#34;&gt;Why Men Still Get More Promotions Than Women&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you made it this far&amp;hellip;. well done!&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t have to do all these things.  But if you do care about diversity (and in my experience, I&amp;rsquo;ve met more white men who care about
 diversity than women who care about it, cos being a minority is sometimes helpful), read these and do &lt;em&gt;something&lt;/em&gt;. Even if it&amp;rsquo;s just
 that thing of assuming a woman you meet at a tech event is, in fact, a techie.&lt;/p&gt;

&lt;p&gt;PS if you are a woman in technology and want to ask me anything, please feel free to drop me a line at any time. I have HORRIBLE e-mail
latency but I will answer you eventually :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IntelliJ IDEA for Eclipse Users</title>
      <link>https://trishagee.github.io/resources/intellij_for_eclipse_users/</link>
      <pubDate>Wed, 05 Oct 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/resources/intellij_for_eclipse_users/</guid>
      <description>&lt;p&gt;List of resources for those trying to make the switch from Eclipse to IntelliJ IDEA:&lt;/p&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/qKgzj8tZX9JDmA&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt; 

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://plugins.jetbrains.com/plugin/4455&#34;&gt;Key Promoter&lt;/a&gt;, a plugin that tells you what the keyboard shortcut is
for every mouse action you perform.&lt;/li&gt;
&lt;li&gt;The printable &lt;a href=&#34;https://resources.jetbrains.com/assets/products/intellij-idea/IntelliJIDEA_ReferenceCard.pdf&#34;&gt;IntelliJ IDEA default keymap&lt;/a&gt; and &lt;a href=&#34;https://resources.jetbrains.com/assets/products/intellij-idea/IntelliJIDEA_ReferenceCard_mac.pdf&#34;&gt;Mac keymap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zeroturnaround.com/rebellabs/getting-started-with-intellij-idea-as-an-eclipse-user/4/&#34;&gt;Eclipse-IntelliJ Keymap Cheat Sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ZeroTurnaround&amp;rsquo;s rather excellent (and extensive!) article &lt;a href=&#34;https://zeroturnaround.com/rebellabs/getting-started-with-intellij-idea-as-an-eclipse-user/4/&#34;&gt;Getting Started With IntelliJ IDEA as an Eclipse User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Video: &lt;a href=&#34;https://youtu.be/eq3KiAH4IBI&#34;&gt;42 IntelliJ IDEA Tips and Tricks&lt;/a&gt;. Watch this.  Regularly.&lt;/li&gt;
&lt;li&gt;If you have IntelliJ IDEA power users near you, get them to install &lt;a href=&#34;https://plugins.jetbrains.com/plugin/7345&#34;&gt;Presentation Assistant&lt;/a&gt; so you can see all the shortcuts they&amp;rsquo;re using.&lt;/li&gt;
&lt;li&gt;If you want, you can also use the Eclipse keymap and the Eclipse compiler.&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s an extensive JetBrains article on &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/eclipse.html&#34;&gt;Migrating from Eclipse&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check out
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/keyboard-shortcuts-you-cannot-miss.html&#34;&gt;Keyboard Shortcuts You Cannot Miss&lt;/a&gt;
and DZone&amp;rsquo;s &lt;a href=&#34;https://dzone.com/refcardz/intellij-idea-update&#34;&gt;IntelliJ IDEA Refcard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Some of my own presentations are live coding using lots of IntelliJ IDEA features, watching them might give an
idea of what&amp;rsquo;s possible.  For example
&lt;a href=&#34;/presentation/angularjs_html5_groovy_java_mongodb_wcpgw&#34;&gt;AngularJS, HTML5, Groovy, Java and MongoDB All Together&lt;/a&gt;,
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 in Anger&lt;/a&gt; and &lt;a href=&#34;/presentation/refactoring_to_java_8&#34;&gt;Refactoring to Java 8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve written a few tutorials about specific topics performed in IntelliJ IDEA:
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-introduction-to-refactoring.html&#34;&gt;Introduction to Refactoring&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-test-driven-development.html&#34;&gt;Test Driven Development&lt;/a&gt;,
and &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the slides above, there&amp;rsquo;s a section &amp;ldquo;The Power of IntelliJ IDEA&amp;rdquo; with no content - that&amp;rsquo;s because that&amp;rsquo;s a place
for a live demo of working with IntelliJ IDEA. To create that demo, I jotted down some topics that I think are
interesting in IntelliJ IDEA, which are worth making a note of here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;IntelliJ provides &lt;em&gt;Contextual Aid&lt;/em&gt; - hints, tips, help and advice at the point at which you need it.  For example:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/auto-completing-code.html&#34;&gt;Code completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The magic Alt+Enter to show &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/intention-actions.html&#34;&gt;intention actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/using-postfix-templates.html&#34;&gt;Postfix completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/gutter-icons.html?search=gutter%20icons&#34;&gt;Gutter icons&lt;/a&gt;, such as
icons to run tests, show implementations of a method, display the Functional Interface for a lambda expression,
etc.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/code-inspection.html&#34;&gt;Inspections&lt;/a&gt; are automatically run for the
current file and shown as warnings, which you can
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/resolving-problems.html&#34;&gt;usually fix with a quick fix&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/navigating-through-the-source-code.html&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/live-templates.html&#34;&gt;Live templates&lt;/a&gt;  might be one of my favourite
features - both &lt;a href=&#34;http://www.radcortez.com/getting-started-with-intellij-idea-live-templates/&#34;&gt;built in&lt;/a&gt; (try &lt;code&gt;sout&lt;/code&gt;,
&lt;code&gt;soutp&lt;/code&gt;, &lt;code&gt;psvm&lt;/code&gt;, &lt;code&gt;itar&lt;/code&gt; and &lt;code&gt;iter&lt;/code&gt;)
and &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/creating-and-editing-live-templates.html#scratch&#34;&gt;custom&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/refactoring-source-code.html&#34;&gt;Refactoring&lt;/a&gt; (check out my &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-introduction-to-refactoring.html&#34;&gt;Refactoring
Tutorial&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/code-inspection.html&#34;&gt;Inspections&lt;/a&gt; were mentioned above, but as well
as having the results on the current file, you can
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/customizing-profiles.html&#34;&gt;customise what you&amp;rsquo;re looking for&lt;/a&gt; and
the &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/running-inspections.html&#34;&gt;scope to check&lt;/a&gt;.
They&amp;rsquo;re very powerful for helping to either keep your code clean, or improve it further. I&amp;rsquo;ve written a tutorial on
how to use them to help
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-migrating-to-java-8.html&#34;&gt;migrate your code to use Java 8 idioms&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/debugging.html&#34;&gt;Debugger&lt;/a&gt; is powerful but easy to use.&lt;/li&gt;
&lt;li&gt;All the things you get from the Java side of the IDE is also available for other languages you might be using too,
e.g. &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/databases-and-sql.html&#34;&gt;SQL&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/javascript-specific-guidelines.html&#34;&gt;JavaScript&lt;/a&gt;,
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/editing-html-files.html&#34;&gt;HTML&lt;/a&gt;, etc. E.g. code completion,
refactoring and debugging, where appropriate.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/vcs-specific-procedures.html&#34;&gt;VCS support&lt;/a&gt; is sufficient for most
everyday use, and every new release adds more features.  If in the past the VCS support didn&amp;rsquo;t do what you
wanted, give it another try now, it&amp;rsquo;s constantly evolving.&lt;/li&gt;
&lt;li&gt;Also interesting for most developers is the &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/gradle.html&#34;&gt;Gradle&lt;/a&gt;
&amp;amp; &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/maven.html&#34;&gt;Maven&lt;/a&gt; integration, and
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/testing.html&#34;&gt;running tests&lt;/a&gt; with
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/code-coverage.html&#34;&gt;code coverage&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaZone 2016</title>
      <link>https://trishagee.github.io/post/javazone_2016/</link>
      <pubDate>Fri, 16 Sep 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/javazone_2016/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s been a while since I wrote a conference write up.  The short version of &amp;ldquo;why&amp;rdquo; is because I got a bit bored of doing it.  Plus, I
found I was attending conferences as a speaker &amp;ldquo;on the circuit&amp;rdquo;, and my experience of hanging out, catching up with my friends, chatting
 to other attendees to see what they&amp;rsquo;re up to and so forth, didn&amp;rsquo;t seem as useful to share with people who might want to find out
 whether a conference is worth attending from a content or atmosphere point of view.&lt;/p&gt;

&lt;p&gt;But I feel compelled to blog about &lt;a href=&#34;https://2016.javazone.no/&#34;&gt;JavaZone&lt;/a&gt;. I presented there back in &lt;a href=&#34;/post/javazone_oslo&#34;&gt;2013&lt;/a&gt;, but every year since then haven&amp;rsquo;t
made it for one reason or another (the fact that it&amp;rsquo;s near my birthday in no way impacts my scheduling…).  I made the effort this year, and
I&amp;rsquo;m so pleased.  Now I&amp;rsquo;ve been to many more conferences, of various sizes, various themes, all around the world, and I can definitely
state that JavaZone is up there as one of the best conferences around.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The content is great, JavaZone manages to attract a lot of great speakers who can present on topics that range from &lt;a href=&#34;https://vimeo.com/181814364&#34;&gt;deeply
technical&lt;/a&gt; to &lt;a href=&#34;https://vimeo.com/181925281&#34;&gt;more theoretical&lt;/a&gt; to concepts
&lt;a href=&#34;https://vimeo.com/182087729&#34;&gt;beyond just code and syntax&lt;/a&gt;.  They also really make an effort to encourage local presenters, and to offer
the option of lightning talks. I love this from the point of view of encouraging more from the community to get involved and present themselves, but also because you get more novel content - experience reports from developers deep in the trenches; teams who can tell you what they&amp;rsquo;ve found trying to implement things that we hear about at conferences; and other things from the point of view of real developers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.45.36-coffee.jpg&#34; alt=&#34;Food and fantastic coffee&#34; title=&#34;Food and fantastic coffee&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The food is fantastic, and available all day.  I made half of a promise to myself not to rate conferences on the quality of the food
after I had a glimpse at how insanely hard it is for conference organisers to balance the requirements of keeping ticket costs low,
using an adequate venue in an accessible location, and providing some sort of catering through the day.  Especially when venues
themselves often restrict this.  I don&amp;rsquo;t know how JavaZone do it, but now I&amp;rsquo;m aware of all these issues, I&amp;rsquo;m even more impressed at the
variety and quality of their food.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.46.02-robots.jpg&#34; alt=&#34;Robots&#34; title=&#34;Robots&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The venue.  The location in the centre of Oslo is nice, often conference venues are out of town, making them hard to get to or, if
you&amp;rsquo;re staying near there, terribly isolated.  One of the reasons to travel to a conference is to see the city, and you get a chance to
do that at JavaZone. So it&amp;rsquo;s central, easy to get to, with plenty of great hotels nearby.  The venue itself also nicely laid out, with
presentation rooms circling a central exhibition space.  Which leads me to&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 09.46.18-exhibition.jpg&#34; alt=&#34;Exhibition&#34; title=&#34;The Exhibition&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The exhibition space is brilliant.  Because it&amp;rsquo;s central, most people spend their time between sessions in the exhibition hall.  As
an exhibitor (JetBrains had a stand there), this is obviously useful to us, but as an attendee it’s nice to know there&amp;rsquo;s a place to go
to hang out where other people will also be hanging out.  Especially when the vibe of the hall was so much fun, so energetic.  And the
stands themselves were impressive: some bribing us with excellent coffee; several with lego areas inviting you to sit down and play;
interactive VR headsets; modern and retro gaming centres (curses, I forgot to take a photo); interactive quizzes and games… As for us,
we had a sofa, and I loved that, it felt welcoming and relaxed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.45.20-games.jpg&#34; alt=&#34;Games&#34; title=&#34;Exhibition&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Everyone is really friendly.  The crew and JUG people were easy to spot and friendly if you needed help. All attendees and speakers
were happy to strike up conversations short and long, on a variety of topics. People smiled.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s a big conference, there are a lot of attendees, but it doesn&amp;rsquo;t feel big and daunting.  Instead, you get the benefit of 8 tracks
of varied content, but don&amp;rsquo;t feel lost in the crowd.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 09.39.20-overflow.jpg&#34; alt=&#34;Overflow Room&#34; title=&#34;Overflow Room&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The overflow room is the best thing I&amp;rsquo;ve ever seen at a conference, and I&amp;rsquo;m seriously wondering if I can set up something similar at
home (on a much smaller scale!) to let me skim content from multiple talks when I&amp;rsquo;m doing research, or maybe just something to have
half an eye on while I&amp;rsquo;m entertaining the minion.&lt;/li&gt;
&lt;li&gt;It was, from my point of view as an attendee and speaker, incredibly well organised.  It felt smooth, and touches like the big
monitors flashing up relevant information was really nice.  I also loved that the video production quality and presentation of the
stages and so forth was really professional.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 15.46.36-stacks-coffee.jpg&#34; alt=&#34;Plenty of caffeine for the developers&#34; title=&#34;Plenty of caffeine for the developers&#34; /&gt;
&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I personally think it&amp;rsquo;s brilliant that the &lt;a href=&#34;https://vimeo.com/album/4133413&#34;&gt;videos are online&lt;/a&gt; really soon after you&amp;rsquo;ve presented.
Sometimes as a speaker you might want a delay on the video - conferences may be more likely to accept your talk if it&amp;rsquo;s not already widely available.  For me though,
especially when giving a new talk like we did here, it&amp;rsquo;s nice to be able to see the video so soon afterwards, to see how it went and
learn from it.  For speakers just starting on their presenting career, it&amp;rsquo;s also great - you have a video to use in your &amp;ldquo;portfolio&amp;rdquo; to
help you get your talk(s) accepted at other conferences.&lt;/li&gt;
&lt;li&gt;And I can&amp;rsquo;t leave this without mentioning diversity.  Now that I&amp;rsquo;m a world-weary veteran of conferences, I&amp;rsquo;m fairly blind to gender
balance unless I specifically look, or something out of the ordinary catches my attention.  I don&amp;rsquo;t know what the percentages were, but
I noticed so many women at the conference, women who were clearly professionals attending the conference and not hired booth babes or
staff of some other kind.  It was obvious and pleasing.  I&amp;rsquo;m not sure how the other women attendees felt, if it was their first
conference maybe they still noticed there were fewer women than men, but the difference to me was that whichever direction I looked
in, there was at least &lt;em&gt;one&lt;/em&gt; woman, usually more. I don&amp;rsquo;t know if there are more women developers in Up North, or if it&amp;rsquo;s just a
conference that somehow appeals more to women than other conferences. I&amp;rsquo;d be interested to find out if any special measures were taken
by the conference organisers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I know a bit more about conferences and how they work behind the scenes, I&amp;rsquo;m astounded at JavaZone.  It feels like  a lot of money has been spent getting it really right, and/or they&amp;rsquo;ve worked really hard to get the absolute most out of what budget they have.&lt;/p&gt;

&lt;p&gt;If I had to really hunt for a downside, it&amp;rsquo;s that all the free alcohol was beer and not wine.  Yep, a complaint about free beer.  But knowing how expensive wine is in Norway, I&amp;rsquo;m not at all surprised.  Plus, moaning about the exact type of free alcohol available seems churlish at best.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/javazone-2016/2016-09-08 16.28.07-jetbrains.jpg&#34; alt=&#34;The JatBrains stand&#34; title=&#34;The JetBrains stand&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;If you do get a chance to go to JavaZone as an attendee or speaker, I highly recommend it.  I hope to be going again.&lt;/p&gt;

&lt;p&gt;PS In case you&amp;rsquo;re interested, we were presenting a new talk,
&lt;a href=&#34;presentation/code_review_matters_and_manners&#34;&gt;Code Review Matters and Manners&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Code Review Matters and Manners</title>
      <link>https://trishagee.github.io/presentation/code_review_matters_and_manners/</link>
      <pubDate>Wed, 31 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/code_review_matters_and_manners/</guid>
      <description>

&lt;p&gt;Content and resources for the Code Review Matters and Manners talk, including links to additional information and
supporting material.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;A code review is basically a technical discussion which should lead to improvements in the code and/or sharing
knowledge in a team. As with any conversation, it should have substance and form.&lt;/p&gt;

&lt;p&gt;What’s involved in a good code review? What kind of problems do we want to spot and address? Trisha Gee will talk
about things a reviewer may consider when looking at changes:  what potential issues to look for; why certain
patterns may be harmful; and, of course, what NOT to look at.&lt;/p&gt;

&lt;p&gt;But when it comes to commenting on someone’s work, it may be hard to find the right words to convey a useful message
without offending the authors - after all, this is something that they worked hard on. Maria Khalusova will share
some observations, thoughts and practical tricks on how to give and receive feedback without turning a code review
into a battlefield.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;iframe src=&#34;https://player.vimeo.com/video/182087729&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; webkitallowfullscreen mozallowfullscreen allowfullscreen&gt;&lt;/iframe&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/7wG1iGAnGsQ4F6&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;More Information&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Books&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;What to Look for in a Code Review&lt;/a&gt; - Trisha Gee (free!)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0735619670/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0735619670&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=4f2f97b38b1e19961a4425340aef003b&#34;&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0735619670&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Steve McConnell&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=0132350882&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=86afa947570d6d5c8d03f7c4d495c449&#34;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;&lt;img src=&#34;//ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=am2&amp;o=1&amp;a=0132350882&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt; - Robert C. Martin&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/07/23/what-to-look-for-in-a-code-review/&#34;&gt;What to look for in a Code Review&lt;/a&gt;, the article that started all of this.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/03/what-to-look-for-in-a-code-review-tests/&#34;&gt;What to look for in a Code Review: Tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/06/what-to-look-for-in-a-code-review-performance/&#34;&gt;What to look for in a Code Review: Performance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/20/what-to-look-for-in-a-code-review-data-structures/&#34;&gt;What to look for in a Code Review: Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/08/31/what-to-look-for-in-a-code-review-solid-principles-2/&#34;&gt;What to look for in a Code Review: SOLID Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/05/what-to-look-for-in-a-code-review-security/&#34;&gt;What to look for in a Code Review: Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2015/10/19/what-to-look-for-in-a-code-review-upsource-quick-wins/&#34;&gt;What to look for in a Code Review: Upsource Quick Wins&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/upsource/2016/08/03/what-to-look-for-in-java-8-code/&#34;&gt;What to look for in: Java 8 code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/code-reviews-just-do-it/&#34;&gt;Code Reviews: Just Do It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.fullstory.com/what-we-learned-from-google-code-reviews-arent-just-for-catching-bugs-b125a13aa292#.mktgod79l&#34;&gt;What we learned from Google: code reviews aren’t just for catching bugs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infragistics.com/community/blogs/erikdietrich/archive/2016/06/29/the-human-cost-of-tech-debt.aspx&#34;&gt;The Human Cost of Tech Debt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://spin.atomicobject.com/2016/06/21/pick-battles-software-team/&#34;&gt;How to Pick Your Battles on a Software Team&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;And, of course&amp;hellip;&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can &lt;a href=&#34;https://www.jetbrains.com/upsource/&#34;&gt;download Upsource&lt;/a&gt;, it&amp;rsquo;s free for up to 10 users.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A Year? Really?</title>
      <link>https://trishagee.github.io/post/what_a_year.md/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/what_a_year.md/</guid>
      <description>&lt;p&gt;So I came to the blog to update my &lt;a href=&#34;//presentation/upcoming_events/&#34;&gt;upcoming events&lt;/a&gt; (at least something stays up to date) only to find
it&amp;rsquo;s been nearly a year since I last blogged!  This is terrible!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not that I haven&amp;rsquo;t written anything in a year, it&amp;rsquo;s that a lot of my writing energy goes into
stuff for the actual day job.  Which is good, because that&amp;rsquo;s pretty much what I wanted from the day job, but the blog makes it look like
I don&amp;rsquo;t write any more.&lt;/p&gt;

&lt;p&gt;So I&amp;rsquo;m going to cheat.  Here&amp;rsquo;s the stuff I&amp;rsquo;ve written in the last 12 months.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A whole series of articles off the back of last year&amp;rsquo;s &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Java 8 in Anger&lt;/a&gt; talk:
&lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features That You Won’t Be Able to Live Without&lt;/a&gt;,
&lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8?&lt;/a&gt;, and &lt;a href=&#34;https://community.oracle.com/docs/DOC-920950&#34;&gt;Java SE 8 in Practice&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A tutorial on &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-test-driven-development.html&#34;&gt;TDD in IntelliJ IDEA&lt;/a&gt;. I have video
clips to turn this into a screencast as well, but that&amp;rsquo;s Yet Another thing I didn&amp;rsquo;t get around to.&lt;/li&gt;
&lt;li&gt;A tutorial on how IntelliJ IDEA helps you &lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.2/tutorial-migrating-to-java-8.html&#34;&gt;migrate code to Java 8&lt;/a&gt;.  This evolved into the other thing I&amp;rsquo;ve been working on this year, my latest live demo
presentation, &lt;a href=&#34;/presentation/refactoring_to_java_8/&#34;&gt;Refactoring to Java 8&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;A whole series of blog posts on &lt;a href=&#34;https://blog.jetbrains.com/upsource/category/practices/&#34;&gt;&amp;ldquo;What to look for in a code review&amp;rdquo;&lt;/a&gt;. This was fun and satisfying to write.&lt;/li&gt;
&lt;li&gt;&amp;hellip;which got &lt;a href=&#34;https://leanpub.com/whattolookforinacodereview&#34;&gt;turned into a book&lt;/a&gt;. Yes, I&amp;rsquo;m finally the author of a book!&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.jetbrains.com/idea/2016/07/java-8-top-tips/&#34;&gt;Java 8 Top Tips&lt;/a&gt;, with a bunch of IntelliJ-specific tips&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ve taken over &lt;a href=&#34;https://blog.jetbrains.com/idea/tag/java-annotated/&#34;&gt;Java Annotated Monthly&lt;/a&gt;, so at least you get to hear from me
once a month with that. I try really hard not to be too sarcastic, jokey or British when I write the newsletter. I don&amp;rsquo;t always succeed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve also done a bunch of screencasts &amp;amp; webinars for &lt;a href=&#34;https://www.youtube.com/user/intellijideavideo/videos&#34;&gt;IntelliJ IDEA&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/playlist?list=PLQ176FUIyIUa50f13M4v5Nvp6b-IBNB4e&#34;&gt;Upsource
and Team City&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Oh yeah, and I had a baby.  I&amp;rsquo;m contemplating blogging about being a working parent, but I&amp;rsquo;m a bit concerned that Of Course a woman is
going to blog about Being A Mother, when previously I just blogged about&amp;hellip; well, come to think about it I blogged about all sorts of
things, including &lt;a href=&#34;/post/why_the_customer_isnt_always_right/&#34;&gt;haircuts&lt;/a&gt; and
&lt;a href=&#34;/post/what_my_hangovers_can_teach_you_about_agile/&#34;&gt;hangovers&lt;/a&gt;, so I guess I could probably get away with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Applying Java 8 Idioms to Existing Code</title>
      <link>https://trishagee.github.io/presentation/refactoring_to_java_8/</link>
      <pubDate>Fri, 03 Jun 2016 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/presentation/refactoring_to_java_8/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Understand how to improve performance with your Java code using Java 8 language features.&lt;/li&gt;
&lt;li&gt;Learn hands on techniques to discover and implement common Java 8 refactorings.&lt;/li&gt;
&lt;li&gt;Understand when you should and should not apply key refactorings in Java 8.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Abstract&lt;/h2&gt;

&lt;p&gt;While we’re drawing ever closer to Java 9, and even hearing about features in Java 10, many of us are still working with an older version. Even if your project has technically adopted Java 8, and even if you’re using it when coding new features, it’s likely that the majority of your code base is still not making the most of what’s available in Java 8 - features like Lambda Expressions, the Streams API, and new Date/Time. And this is a shame, since Java 8 provides not only nicer syntax for developers, but (usually) better application performance.&lt;/p&gt;

&lt;p&gt;In this presentation, Trisha will:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Highlight the performance benefits of using Java 8 - after all, you’ll probably have to persuade &amp;ldquo;The Management&amp;rdquo; that tampering with
existing code is worthwhile&lt;/li&gt;
&lt;li&gt;Demonstrate how to identify areas of code that can be updated to use Java 8 features, and how to pick which changes will give you the
most benefit&lt;/li&gt;
&lt;li&gt;Demonstrate how to automatically refactor your code to make use of features like lambdas and streams&lt;/li&gt;
&lt;li&gt;Cover some of the pros and cons of using the new features - including suggestions of when refactoring may NOT be the best idea.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The talk&lt;/h2&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/NcetKbGayZY&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;This is the most complete version of the talk, containing as many different refactorings as I could squeeze in, and updated performance analysis.&lt;/p&gt;

&lt;p&gt;Other versions include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/2xOtyGUTpQU&#34;&gt;JetBrains Webinar&lt;/a&gt;, with all the latest IntelliJ IDEA support for Java 8 refactoring.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/java8-lambda-streams&#34;&gt;QCon New York&lt;/a&gt;, with a nice summary of the &lt;a href=&#34;https://www.infoq.com/articles/qcon-new-york-2016#_Toc456084721&#34;&gt;points covered in
the talk&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=dlzMV83RTtw&#34;&gt;DevoxxUK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&#34;//www.slideshare.net/slideshow/embed_code/key/xPhKtRN9aOsHZd&#34; width=&#34;595&#34; height=&#34;485&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;You can purchase a more in-depth tutorial on
&lt;a href=&#34;http://www.informit.com/store/refactoring-to-modern-java-livelessons-video-training-9780134653594&#34;&gt;informIT&lt;/a&gt;, and is also available via
&lt;a href=&#34;https://www.safaribooksonline.com/library/view/refactoring-to-modern/9780134653617/&#34;&gt;Safari Books Online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The IntelliJ-specific features of some of the refactoring shown are covered in my
&lt;a href=&#34;https://www.jetbrains.com/help/idea/2016.1/tutorial-migrating-to-java-8.html&#34;&gt;Migrating to Java 8&lt;/a&gt; tutorial.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Article: &lt;a href=&#34;https://dzone.com/articles/why-java-8-1&#34;&gt;Why Java 8&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.safaribooksonline.com/blog/2015/10/30/five-java-8-features/&#34;&gt;Five Java 8 Features You Won&amp;rsquo;t Be Able to Live Without&lt;/a&gt;&lt;br /&gt;
Video and Research: &lt;a href=&#34;/presentation/java8_in_anger/&#34;&gt;Building a Java 8 Application&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Code&lt;/h2&gt;

&lt;p&gt;The project we&amp;rsquo;re refactoring is &lt;a href=&#34;https://github.com/mongodb/morphia&#34;&gt;Morphia&lt;/a&gt;. You can see the &amp;ldquo;after&amp;rdquo; of the chosen refactorings on the
 &lt;a href=&#34;https://github.com/trishagee/morphia/tree/r2j8&#34;&gt;r2j8&lt;/a&gt; branch.&lt;/p&gt;

&lt;p&gt;The performance tests that were written and run specifically for this talk are in the &lt;a href=&#34;https://github.com/trishagee/j8-morphia-perf-tests&#34;&gt;j8-morphia-perf-tests repository&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Performance&lt;/h2&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Lambda Expressions&lt;/h3&gt;

&lt;p&gt;Video: &lt;a href=&#34;http://medianetwork.oracle.com/video/player/2623576348001&#34;&gt;Lambda Performance&lt;/a&gt; and &lt;a href=&#34;http://www.oracle
.com/technetwork/java/jvmls2013kuksen-2014088.pdf&#34;&gt;talk slides&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://www.infoq.com/articles/Java-8-Lambdas-A-Peek-Under-the-Hood&#34;&gt;Java 8 Lambdas - A Peek Under the Hood&lt;/a&gt;&lt;br /&gt;
Video: &lt;a href=&#34;https://youtu.be/MLksirK9nnE&#34;&gt;Lambdas in Java: A Peek under the Hood - Brian Goetz&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Streams&lt;/h4&gt;

&lt;p&gt;Video: &lt;a href=&#34;https://www.infoq.com/presentations/java8-stream-performance&#34;&gt;Let’s Get to the Rapids: Java 8 Stream Performance&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;https://jaxenter
.com/java-performance-tutorial-how-fast-are-the-java-8-streams-118830.html&#34;&gt;Java performance tutorial: How fast are the Java 8 streams? - Angelika Langer&lt;/a&gt; Notable Quotes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Again, the for-loop is faster that the sequential stream operation, but the difference on an ArrayList is not nearly as significant as
it was on an array.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;You will find that there is no measurable difference any more between for-loop and sequential stream if the functionality is heavily cpu
 bound.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The point to take home is that sequential streams are no faster than loops. If you use sequential streams then you don’t do it for
performance reasons; you do it because you like the functional programming style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The reality check via our benchmark yields a ratio (sequential / parallel) of only 1.6 instead of 2.0, which illustrates the amount of
overhead that is involved in going parallel and how (well or poorly) it is overcompensated (on this particular platform).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;With this in mind it is fair to say that the performance model of streams is not a trivial one&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;you need to benchmark a lot in order to find out for a given context whether going parallel is worth doing or not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The realisation is: Yes, parallel stream operations are easy to use and often they run faster than sequential operations, but don’t
expect miracles. Also, don’t guess; instead, benchmark a lot.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.takipi
.com/benchmark-how-java-8-lambdas-and-streams-can-make-your-code-5-times-slower/&#34;&gt;Benchmark: How Misusing Streams Can Make Your Code 5 Times Slower&lt;/a&gt; -
interesting comparison of different iteration styles.  Also shows that things like boxing might add more cost than streams (but that you
don&amp;rsquo;t realise you&amp;rsquo;re boxing)&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance/&#34;&gt;Stream Performance&lt;/a&gt; - some interesting benchmarks based on Angelika Langer&amp;rsquo;s
article&lt;br /&gt;
Article: &lt;a href=&#34;http://blog.codefx.org/java/stream-performance-your-ideas/&#34;&gt;Follow up on Stream Performance&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;Date and Time&lt;/h3&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://java-performance.info/jsr-310-java-8-datetime-library-performance-well-joda-time-2-3-j-u-calendar/&#34;&gt;JSR 310 – Java 8 Date/Time library performance (as well as Joda Time 2.3 and j.u.Calendar)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Benchmarking&lt;/h3&gt;

&lt;p&gt;I used a bunch of techniques to produce the benchmarks on the talk.  I&amp;rsquo;d like to summarise them more thoroughly when I get a chance, but
for now here&amp;rsquo;s my background reading:&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/architect-benchmarking-2266277.html&#34;&gt;Avoiding Benchmarking Pitfalls on the JVM&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Tool: &lt;a href=&#34;http://openjdk.java.net/projects/code-tools/jmh/&#34;&gt;JMH&lt;/a&gt;&lt;br /&gt;
Tool: &lt;a href=&#34;https://github.com/artyushov/idea-jmh-plugin&#34;&gt;IntelliJ JMH Plugin&lt;/a&gt;&lt;br /&gt;
Article: &lt;a href=&#34;http://java-performance.info/jmh/&#34;&gt;Introduction to JMH&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;&amp;ldquo;Best Practice&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;I dislike the term &amp;ldquo;Best Practice&amp;rdquo; as it implies a &amp;ldquo;one size fits all&amp;rdquo; approach, and I believe that our job is to
make difficult decisions based on various pros and cons and differing situations.  However, here I will collect
resources that may help us make some of those decisions&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://martinfowler.com/articles/refactoring-pipelines.html&#34;&gt;Refactoring with Loops and Collection Pipelines&lt;/a&gt; -
Martin Fowler&lt;br /&gt;
Slides: &lt;a href=&#34;http://martinfowler.com/articles/workflowsOfRefactoring/&#34;&gt;Workflows of Refactoring&lt;/a&gt; - Martin Fowler&lt;br /&gt;
Book: &lt;a href=&#34;https://www.amazon.com/gp/product/0201485672/ref=as_li_qf_sp_asin_il_tl?ie=UTF8&amp;amp;tag=trissramb-20&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;linkCode=as2&amp;amp;creativeASIN=0201485672&amp;amp;linkId=11d0b95e050a492112eeac6fb6b2bcb0&#34;&gt;Refactoring: Improving the Design of Existing Code&lt;/a&gt; - Martin Fowler&lt;/p&gt;

&lt;p&gt;Article: &lt;a href=&#34;http://blog.joda.org/2014/11/optional-in-java-se-8.html&#34;&gt;Using Optional in Java SE 8&lt;/a&gt; - Stephen Colebourne&lt;br /&gt;
Article: &lt;a href=&#34;http://zeroturnaround.com/rebellabs/java-8-best-practices-cheat-sheet/&#34;&gt;Java 8 Best Practices Cheat Sheet&lt;/a&gt; - ZeroTurnaround&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 3 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session3/</link>
      <pubDate>Tue, 04 Aug 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session3/</guid>
      <description>&lt;p&gt;Last night was the final get-together to discuss the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt;. Any
event hosted in August in a city that is regularly over 40&amp;deg;C is going to face challenges, so it was great that
we had attendees from earlier sessions plus new people too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/static/images/java8mooc/lesson3.jpg&#34; alt=&#34;Woohoo lambdas!&#34; title=&#34;Woohoo lambdas!&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The aim of this session was to talk about Lesson 3, but also to wrap up the course as a whole: to talk about what we
liked and what we would have improved (about both the course itself and our user group events).&lt;/p&gt;

&lt;p&gt;As in the previous &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;/post/java_8_mooc_session2&#34;&gt;posts&lt;/a&gt;, let&amp;rsquo;s outline our
discussion areas:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findAny--&#34;&gt;findAny()&lt;/a&gt;
vs &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#findFirst--&#34;&gt;findFirst()&lt;/a&gt;&lt;/strong&gt;: Why do we
need both of these methods, and when would you use them?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;findFirst()&lt;/code&gt; is the deterministic version, which will return you the first element in the Stream (according to
encounter order - see the section on
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;Ordering in the documentation&lt;/a&gt;).
So, regardless of whether you run the operation in parallel or serial, if you&amp;rsquo;re looking for &amp;ldquo;A&amp;rdquo; and use &lt;code&gt;findFirst&lt;/code&gt;
with this list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;you&amp;rsquo;ll get the element at index 3 - the first &amp;ldquo;A&amp;rdquo; in the list.&lt;/p&gt;

&lt;p&gt;But &lt;code&gt;findAny()&lt;/code&gt; is non-deterministic, so will return you any element that matches your criteria - it could return the
element at index 3, or the one at position 6. Realistically, if the stream is on an ordered collection like a list,
when you run &lt;code&gt;findAny&lt;/code&gt; on a sequential stream, I expect it will return the same result as &lt;code&gt;findFirst&lt;/code&gt;.  The real
use-case for &lt;code&gt;findAny&lt;/code&gt; is when you&amp;rsquo;re running this on a parallel stream. Let&amp;rsquo;s take the above list, and assume that
when you run this on a parallel stream it&amp;rsquo;s processed by two separate threads:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;,    // processed by thread 1 
 &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]     // processed by thread 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s possible that thread 2 finds its &amp;ldquo;A&amp;rdquo; (the one at position 6) before thread 1 finds the one at position 3, so
this will be value that&amp;rsquo;s returned. By configuring the Stream to return any one of the values that matches the
criteria, you can potentially execute the operation faster when running in parallel.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;findAny&lt;/code&gt; is (potentially) faster in parallel and (probably) returns the same value as &lt;code&gt;findFirst&lt;/code&gt; when running in
serial, why not use that all the time?  Well, there are times when you really do want the first item. If you have a
list of DVDs ordered by year the film was released, and you want to find the original &amp;ldquo;King Kong&amp;rdquo; (for
example), you&amp;rsquo;ll want &lt;code&gt;findFirst&lt;/code&gt; to find the one released in 1933, not the one that was released in 1976 or the
one from 2005.&lt;/p&gt;

&lt;p&gt;Plus, &lt;code&gt;findFirst&lt;/code&gt; is not always going to be slower than &lt;code&gt;findAny&lt;/code&gt;, even in parallel.  Going back to our list:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[&amp;quot;B&amp;quot;, &amp;quot;Z&amp;quot;, &amp;quot;C&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;L&amp;quot;, &amp;quot;K&amp;quot;, &amp;quot;A&amp;quot;, &amp;quot;H&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Trying to &lt;code&gt;findFirst&lt;/code&gt; or &lt;code&gt;findAny&lt;/code&gt; for &amp;ldquo;H&amp;rdquo; could be the same performance for both methods.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Collectors&lt;/strong&gt;: Maybe it&amp;rsquo;s just me who doesn&amp;rsquo;t really see the big picture for collectors.  I&amp;rsquo;m perfectly content with
the built in collectors like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toList())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.toSet())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s easy to see what they do, and work out when you need to use them.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m also very happy to have discovered &lt;code&gt;joining&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.joining(&amp;quot;,&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;a super-useful way to create Comma Separated Values (CSVs) that I use in my
&lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Where things get a bit murky for me is where we start chaining up collectors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;collect(Collectors.mapping(...).combiner().andThen(...).apply(...))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(it should be obvious from my lack of clear example that I&amp;rsquo;m not 100% certain under which circumstances these are
useful).&lt;/p&gt;

&lt;p&gt;As a group, we think the chained collectors are kinda ugly - not because we&amp;rsquo;re against chaining (we like Streams),
but maybe because it&amp;rsquo;s another chain inside a param to a chain.&lt;/p&gt;

&lt;p&gt;We think this is an area where some good, solid examples and a bit of daily use will make it much clearer to
developers. We hope.&lt;/p&gt;

&lt;p&gt;Related to this, the course didn&amp;rsquo;t go into creating your own collectors at all. My personal (under-informed) opinion
is that I guess most developers should be able to use either the out-of-the-box collectors (&lt;code&gt;toList&lt;/code&gt; etc) or use the
collector chaining to build what they need. If you need a custom collector, perhaps you haven&amp;rsquo;t considered everything
that&amp;rsquo;s already available to you. But as a group, we decided we would have liked to see this topic anyway so that we
could get a deeper understanding of what collectors are and how they work.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Exercises for lesson 3:&lt;/strong&gt; Well. What can we say? I really hope there are people reading this who haven&amp;rsquo;t finished
the course yet, because the Sevilla Java User group would like to say to you: don&amp;rsquo;t despair, the lesson 3 exercises
are &lt;em&gt;substantially&lt;/em&gt; harder than those for lessons 1 and 2. Honestly, the whole group considered it less of a learning
curve and more of a massive cliff to climb.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://herbookthoughts.reads-it.com/wp-content/uploads/2014/06/d6a1143f571184db25f94613edd43b40af6d3a629221aba00d9efdcfef5efd84.jpg&#34; alt=&#34;I have no idea what I am doing&#34; title=&#34;I have no idea 
what I am doing&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;I mean, it was great to have something so challenging to end on, but it probably would have been less ego-destroying
if we could have got up to that level gradually instead of having it sprung on us.&lt;/p&gt;

&lt;p&gt;The good thing about Part 2 of the lesson 3 exercises was that we had three very different answers to discuss
in the group. None of us were super happy with any of them, but we could see definite pros and cons of each approach,
and that&amp;rsquo;s something you really want to learn in a course like this.&lt;/p&gt;

&lt;p&gt;It was also really great to have a rough performance test to run on your own computer, so that you could really see
the impact of your choices on the performance of the stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For more info&lt;/strong&gt;&lt;br /&gt;
I&amp;rsquo;m going to add a shameless plug to a friend&amp;rsquo;s book here. I&amp;rsquo;ve been reading a lot about Java 8 for this course, for
my &lt;a href=&#34;/presentation/java8_in_anger&#34;&gt;Java 8 demo&lt;/a&gt;, and to generally get up to speed. My favourite book for getting to
grips with lambdas and streams
is &lt;a href=&#34;http://www.amazon.com/gp/product/B00J3B3J3C/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=9325&amp;creativeASIN=B00J3B3J3C&amp;linkCode=as2&amp;tag=trissramb-20&amp;linkId=IX6U2YT4FADY4JY6&#34;&gt;Java 8 Lambdas: Pragmatic Functional Programming&lt;/a&gt;&lt;img src=&#34;http://ir-na.amazon-adsystem.com/e/ir?t=trissramb-20&amp;l=as2&amp;o=1&amp;a=B00J3B3J3C&#34; width=&#34;1&#34; height=&#34;1&#34; border=&#34;0&#34; alt=&#34;&#34; style=&#34;border:none !important; margin:0px !important;&#34; /&gt;
by &lt;a href=&#34;https://twitter.com/RichardWarburto&#34;&gt;Richard Warburton&lt;/a&gt;. This book also contains more info about collectors too,
so maybe some of our questions around how to use these in more complex situation are answered in here.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;In Summary&lt;/strong&gt;&lt;br /&gt;
We really enjoyed the MOOC, and the sessions to get together to discuss it. We particularly liked that the meetups
were a safe place to ask questions and discuss alternative solutions, and that we weren&amp;rsquo;t expected to be genius-level
experts in order to participate fully.&lt;/p&gt;

&lt;p&gt;If/when Oracle re-runs the MOOC, if you didn&amp;rsquo;t get a chance to take part this time I highly recommend signing up.
And if you can find (or run) a local meetup to discuss it, it makes the experience much more fun.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java 8 MOOC - Session 2 Summary</title>
      <link>https://trishagee.github.io/post/java_8_mooc_session2/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 UTC</pubDate>
      <author>Trisha Gee</author>
      <guid>https://trishagee.github.io/post/java_8_mooc_session2/</guid>
      <description>&lt;p&gt;As I mentioned &lt;a href=&#34;/post/java_8_mooc_session1&#34;&gt;last week&lt;/a&gt;, the &lt;a href=&#34;http://www.meetup.com/SVQJUG/&#34;&gt;Sevilla Java User Group&lt;/a&gt;
is working towards completing the
&lt;a href=&#34;https://apexapps.oracle.com/pls/apex/f?p=44785:145:0::::P145_EVENT_ID,P145_PREV_PAGE:4887,143&#34;&gt;Java 8 MOOC&lt;/a&gt; on
lambdas and streams. We&amp;rsquo;re running &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223677436/&#34;&gt;three sessions&lt;/a&gt;
to share knowledge between people who are doing the course.&lt;/p&gt;

&lt;p&gt;The second week&amp;rsquo;s lesson was about
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html&#34;&gt;Streams&lt;/a&gt; - how you can use the
new stream API to transform data. There was also a whole section on
&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;, which initially seemed like
rather a lot, but it turns out that &lt;code&gt;Optional&lt;/code&gt; can do rather more than I originally thought.&lt;/p&gt;

&lt;p&gt;In the meetup session, we talked about:&lt;br /&gt;
&lt;strong&gt;&lt;a href=&#34;http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html&#34;&gt;Optional&lt;/a&gt;&lt;/strong&gt;: we were pretty
comfortable,
I think, with using &lt;code&gt;Optional&lt;/code&gt; to
prevent a &lt;code&gt;NullPointerException&lt;/code&gt;. What we weren&amp;rsquo;t so clear on were the examples of
&lt;code&gt;filter()&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; - if you were getting your &lt;code&gt;Optional&lt;/code&gt; values from a stream, why wouldn&amp;rsquo;t you do the map and the
filter on the stream first? For example, why do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s -&amp;gt; s.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;when you could map and filter in the stream to get the first non-empty value? That certainly seems like an
interesting question in relation to streams.&lt;/p&gt;

&lt;p&gt;I can see &lt;code&gt;Optional&lt;/code&gt; being more useful when other APIs fully
support Java 8 and return &lt;code&gt;Optional&lt;/code&gt; values, then you can perform additional operations on return values.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;That terminal operation&amp;rsquo;s not actually terminal??&lt;/strong&gt;: We ran into this a couple of times in our examples in the
session, one example is the code above (let&amp;rsquo;s copy it down here so we can look at it more closely):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .findFirst()
    .map(String::trim)
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isn&amp;rsquo;t &lt;code&gt;findFirst()&lt;/code&gt; a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps&#34;&gt;terminal operation&lt;/a&gt;? How
can you carry on doing more operations on that?&lt;/p&gt;

&lt;p&gt;The answer is, of course, that the return type of the terminal operation can also lead to further operations.  The
above is actually:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Optional&amp;lt;String&amp;gt; result = list.stream()
                              .findFirst();
result.map(String::trim)
      .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
      .ifPresent(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Our terminal operation returns an optional, which allows you to do further operations. Another example of this
confusion:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .collect(toList())
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;collect()&lt;/code&gt; is a terminal operation, but it returns a list, which also allows &lt;code&gt;forEach()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; results = list.stream()
                           .map(String::toLowerCase)
                           .collect(toList());
results.forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So be aware that just because it&amp;rsquo;s called a terminal operation, doesn&amp;rsquo;t mean you can&amp;rsquo;t perform other operations on
the returned value.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Parallel/sequential/parallel&lt;/strong&gt;: there had been a question in the previous week about why you could write code like
this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .parallel()
    .map(String::trim)
    .sequential()
    .filter(s1 -&amp;gt; s1.length() &amp;gt; 0)
    .parallel()
    .forEach(System.out::println);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and whether that would let you dictate which sections of the stream were parallel and which were to be processed in
serial.  Lesson two set the lesson straight, declaring &amp;ldquo;the last operator wins&amp;rdquo; - meaning &lt;em&gt;all&lt;/em&gt; of the above code will
be run as a parallel stream. I can&amp;rsquo;t find any documentation for this, I&amp;rsquo;ll edit this post if I locate it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/BaseStream.html#unordered--&#34;&gt;Unordered&lt;/a&gt;&lt;/strong&gt;: &amp;ldquo;Why
would you ever want your stream to be unordered?&amp;rdquo; - the answer is that &lt;code&gt;unordered()&lt;/code&gt; &lt;a href=&#34;http://stackoverflow.com/a/21350234/653519&#34;&gt;doesn&amp;rsquo;t turn
your sorted collection into one with no order&lt;/a&gt;, it just says that when
this code is executed, the order of elements doesn&amp;rsquo;t matter.  This might make processing faster on a parallel stream,
but as a group we figured it would probably be pointless on a sequential stream.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Efficiency optimisations and order of stream operations&lt;/strong&gt;: We had a &lt;em&gt;long&lt;/em&gt; conversation about the order in which you
perform
operations in a stream. The MOOC (in fact, most documentation around Streams) tells us that a) streams are
&lt;a href=&#34;http://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html&#34;&gt;lazy&lt;/a&gt;, and
not evaluated until a terminal operator is encountered and b) this enables optimisation of the operations in the
stream.  That lead to a discussion about the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .map(String::toLowerCase)
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The filter operation should result in less items to process in the stream. Given that the &lt;code&gt;map()&lt;/code&gt; operation doesn&amp;rsquo;t
change anything that &lt;code&gt;filter()&lt;/code&gt; relies on, will this code be optimised somehow under the covers so that the filter
is actually executed first? Or are optimisations still going to respect the order of operations on a stream?&lt;/p&gt;

&lt;p&gt;Our case is actually a very specific case, because a) the &lt;code&gt;map()&lt;/code&gt; returns the same type as the params passed in (i.e.
it doesn&amp;rsquo;t map a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;) and b) the &lt;code&gt;map()&lt;/code&gt; doesn&amp;rsquo;t change the characteristic the &lt;code&gt;filter()&lt;/code&gt; is
looking at (i.e. length). But generally speaking, you can&amp;rsquo;t expect these conditions to be true - in fact I bet in a
large number of cases they are &lt;em&gt;not&lt;/em&gt; true. So pipeline operations are &lt;a href=&#34;http://stackoverflow.com/a/22056258/653519&#34;&gt;performed in the order in which they are
written&lt;/a&gt;, meaning that our &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; will not be re-ordered into
a more efficient order.&lt;/p&gt;

&lt;p&gt;A good rule of thumb seems to be to do filtering as early in the stream as possible - that way you can potentially
cut down the number of items you process in each step of the stream. Therefore our code would probably be better as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;list.stream()
    .filter(s -&amp;gt; s.length() % 2 == 1)
    .map(String::toLowerCase)
    .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;
&lt;strong&gt;Flat Map&lt;/strong&gt;: what&amp;hellip;?
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#flatMap-java.util.function.Function-&#34;&gt;&lt;code&gt;flatMap()&lt;/code&gt;&lt;/a&gt;
is one of those methods that makes total sense once you get the hang of it, and you don&amp;rsquo;t
understand why it was so confusing. But the first time you encounter it, it&amp;rsquo;s confusing - how is &lt;code&gt;flatMap()&lt;/code&gt;
different to &lt;code&gt;map()&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Well, &lt;code&gt;flatMap&lt;/code&gt; is used to squish (for example) a stream of streams into just a simple stream. It&amp;rsquo;s like turning a
2-dimensional array into a single dimension so that you can iterate over all the items without needing nested
for-loops. There&amp;rsquo;s &lt;a href=&#34;http://stackoverflow.com/a/22384132/653519&#34;&gt;an example on StackOverflow&lt;/a&gt;, and some more examples
in answer to &lt;a href=&#34;http://stackoverflow.com/questions/26684562/java-8-map-and-flatmap-methods&#34;&gt;this question&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Comparators&lt;/strong&gt;: We&amp;rsquo;ve probably all written comparators at some point, it&amp;rsquo;s probably one of those examples where we
really did use anonymous inner classes &amp;ldquo;in the olden days&amp;rdquo; and were looking forward to replacing them with lambdas.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(new Comparator&amp;lt;String&amp;gt;() {
          @Override
          public int compare(String o1, String o2) {
              return ???;
          }
      })
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sadly, using a lambda still doesn&amp;rsquo;t answer the question &amp;ldquo;do I minus o1 from o2, or o2 from o1?&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted((o1, o2) -&amp;gt; ??? )
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there&amp;rsquo;s yet another new method in Java 8 here that can save us, one that is not nearly as well publicised as it
should be. There&amp;rsquo;s a
&lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html#comparing-java.util.function.Function-&#34;&gt;&lt;code&gt;Comparator.comparing()&lt;/code&gt;&lt;/a&gt;
that you can use to really easily define what to compare on. The JavaDoc and signature looks kinda confusing, but
this is one of those places where method references suddenly make loads of sense:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;reader.lines()
      .sorted(comparingInt(String::length))
      .collect(toList());
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(Here we&amp;rsquo;re actually using the &lt;code&gt;comparingInt&lt;/code&gt; method as we&amp;rsquo;re going to compare on a primitive value). Personally this
is one of my favourite new features in Java 8.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
Join us next week for the &lt;a href=&#34;http://www.meetup.com/SVQJUG/events/223910762/&#34;&gt;last session on Java 8 - Lambdas and Streams&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
